//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace TCF.Zeo.Cxn.Check.Chexar.ChexarCustomerService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CustServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CustService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CompanyLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback KnownCustAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerAddAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback KnownCustAddAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerRAddAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CustomerUpdateAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchBadgeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchCustIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchCustNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchCustBDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback OnHoldCodeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback MemberTypeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DocTypeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePhotoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentLenOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CustService() {
            this.Url = global::TCF.Zeo.Cxn.Check.Chexar.Properties.Settings.Default.MGI_Alloy_CXN_Check_Chexar_ChexarCustomerService_CustService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CompanyLoginCompletedEventHandler CompanyLoginCompleted;
        
        /// <remarks/>
        public event CustomerAddCompletedEventHandler CustomerAddCompleted;
        
        /// <remarks/>
        public event KnownCustAddCompletedEventHandler KnownCustAddCompleted;
        
        /// <remarks/>
        public event CustomerAddAllCompletedEventHandler CustomerAddAllCompleted;
        
        /// <remarks/>
        public event KnownCustAddAllCompletedEventHandler KnownCustAddAllCompleted;
        
        /// <remarks/>
        public event CustomerRAddAllCompletedEventHandler CustomerRAddAllCompleted;
        
        /// <remarks/>
        public event CustomerUpdateCompletedEventHandler CustomerUpdateCompleted;
        
        /// <remarks/>
        public event CustomerUpdateAllCompletedEventHandler CustomerUpdateAllCompleted;
        
        /// <remarks/>
        public event SearchBadgeCompletedEventHandler SearchBadgeCompleted;
        
        /// <remarks/>
        public event SearchCustIDCompletedEventHandler SearchCustIDCompleted;
        
        /// <remarks/>
        public event SearchCustNameCompletedEventHandler SearchCustNameCompleted;
        
        /// <remarks/>
        public event SearchCustBDayCompletedEventHandler SearchCustBDayCompleted;
        
        /// <remarks/>
        public event CountryListCompletedEventHandler CountryListCompleted;
        
        /// <remarks/>
        public event OnHoldCodeListCompletedEventHandler OnHoldCodeListCompleted;
        
        /// <remarks/>
        public event MemberTypeListCompletedEventHandler MemberTypeListCompleted;
        
        /// <remarks/>
        public event DocTypeListCompletedEventHandler DocTypeListCompleted;
        
        /// <remarks/>
        public event SavePhotoCompletedEventHandler SavePhotoCompleted;
        
        /// <remarks/>
        public event GetDocumentLenCompletedEventHandler GetDocumentLenCompleted;
        
        /// <remarks/>
        public event GetDocumentCompletedEventHandler GetDocumentCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CompanyLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CompanyLogin(string CompanyId, string Username, string Password) {
            object[] results = this.Invoke("CompanyLogin", new object[] {
                        CompanyId,
                        Username,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CompanyLoginAsync(string CompanyId, string Username, string Password) {
            this.CompanyLoginAsync(CompanyId, Username, Password, null);
        }
        
        /// <remarks/>
        public void CompanyLoginAsync(string CompanyId, string Username, string Password, object userState) {
            if ((this.CompanyLoginOperationCompleted == null)) {
                this.CompanyLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompanyLoginOperationCompleted);
            }
            this.InvokeAsync("CompanyLogin", new object[] {
                        CompanyId,
                        Username,
                        Password}, this.CompanyLoginOperationCompleted, userState);
        }
        
        private void OnCompanyLoginOperationCompleted(object arg) {
            if ((this.CompanyLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompanyLoginCompleted(this, new CompanyLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerAdd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerAdd(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    int CountryId, 
                    System.DateTime BDay, 
                    int MemberType, 
                    int BranchId, 
                    int EmployeeId) {
            object[] results = this.Invoke("CustomerAdd", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        CountryId,
                        BDay,
                        MemberType,
                        BranchId,
                        EmployeeId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerAddAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    int CountryId, 
                    System.DateTime BDay, 
                    int MemberType, 
                    int BranchId, 
                    int EmployeeId) {
            this.CustomerAddAsync(token, FName, LName, ITIN, SSAN, Address, Address2, City, State, Zip, HPhone, CountryId, BDay, MemberType, BranchId, EmployeeId, null);
        }
        
        /// <remarks/>
        public void CustomerAddAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    int CountryId, 
                    System.DateTime BDay, 
                    int MemberType, 
                    int BranchId, 
                    int EmployeeId, 
                    object userState) {
            if ((this.CustomerAddOperationCompleted == null)) {
                this.CustomerAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerAddOperationCompleted);
            }
            this.InvokeAsync("CustomerAdd", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        CountryId,
                        BDay,
                        MemberType,
                        BranchId,
                        EmployeeId}, this.CustomerAddOperationCompleted, userState);
        }
        
        private void OnCustomerAddOperationCompleted(object arg) {
            if ((this.CustomerAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerAddCompleted(this, new CustomerAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/KnownCustAdd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string KnownCustAdd(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    int CountryId, 
                    System.DateTime BDay, 
                    int MemberType, 
                    int BranchId, 
                    int EmployeeId, 
                    int KnownCust) {
            object[] results = this.Invoke("KnownCustAdd", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        CountryId,
                        BDay,
                        MemberType,
                        BranchId,
                        EmployeeId,
                        KnownCust});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void KnownCustAddAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    int CountryId, 
                    System.DateTime BDay, 
                    int MemberType, 
                    int BranchId, 
                    int EmployeeId, 
                    int KnownCust) {
            this.KnownCustAddAsync(token, FName, LName, ITIN, SSAN, Address, Address2, City, State, Zip, HPhone, CountryId, BDay, MemberType, BranchId, EmployeeId, KnownCust, null);
        }
        
        /// <remarks/>
        public void KnownCustAddAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    int CountryId, 
                    System.DateTime BDay, 
                    int MemberType, 
                    int BranchId, 
                    int EmployeeId, 
                    int KnownCust, 
                    object userState) {
            if ((this.KnownCustAddOperationCompleted == null)) {
                this.KnownCustAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKnownCustAddOperationCompleted);
            }
            this.InvokeAsync("KnownCustAdd", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        CountryId,
                        BDay,
                        MemberType,
                        BranchId,
                        EmployeeId,
                        KnownCust}, this.KnownCustAddOperationCompleted, userState);
        }
        
        private void OnKnownCustAddOperationCompleted(object arg) {
            if ((this.KnownCustAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KnownCustAddCompleted(this, new KnownCustAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerAddAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerAddAll(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int BranchId, 
                    int EmployeeId, 
                    int MemberType, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele) {
            object[] results = this.Invoke("CustomerAddAll", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        BDay,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        Phone2,
                        CountryId,
                        GALicense,
                        BranchId,
                        EmployeeId,
                        MemberType,
                        Occupation,
                        Employer,
                        EmergContact,
                        EmergPhone,
                        Doc1Type,
                        Doc1IssuedFor,
                        Doc1Date,
                        Doc1No,
                        Doc2Type,
                        Doc2IssuedFor,
                        Doc2Date,
                        Doc2No,
                        ValueCardNo,
                        CustWorkEmpNo,
                        Ref1Name,
                        Ref1Tele,
                        Ref2Name,
                        Ref2Tele});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerAddAllAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int BranchId, 
                    int EmployeeId, 
                    int MemberType, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele) {
            this.CustomerAddAllAsync(token, FName, LName, ITIN, SSAN, BDay, Address, Address2, City, State, Zip, HPhone, Phone2, CountryId, GALicense, BranchId, EmployeeId, MemberType, Occupation, Employer, EmergContact, EmergPhone, Doc1Type, Doc1IssuedFor, Doc1Date, Doc1No, Doc2Type, Doc2IssuedFor, Doc2Date, Doc2No, ValueCardNo, CustWorkEmpNo, Ref1Name, Ref1Tele, Ref2Name, Ref2Tele, null);
        }
        
        /// <remarks/>
        public void CustomerAddAllAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int BranchId, 
                    int EmployeeId, 
                    int MemberType, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele, 
                    object userState) {
            if ((this.CustomerAddAllOperationCompleted == null)) {
                this.CustomerAddAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerAddAllOperationCompleted);
            }
            this.InvokeAsync("CustomerAddAll", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        BDay,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        Phone2,
                        CountryId,
                        GALicense,
                        BranchId,
                        EmployeeId,
                        MemberType,
                        Occupation,
                        Employer,
                        EmergContact,
                        EmergPhone,
                        Doc1Type,
                        Doc1IssuedFor,
                        Doc1Date,
                        Doc1No,
                        Doc2Type,
                        Doc2IssuedFor,
                        Doc2Date,
                        Doc2No,
                        ValueCardNo,
                        CustWorkEmpNo,
                        Ref1Name,
                        Ref1Tele,
                        Ref2Name,
                        Ref2Tele}, this.CustomerAddAllOperationCompleted, userState);
        }
        
        private void OnCustomerAddAllOperationCompleted(object arg) {
            if ((this.CustomerAddAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerAddAllCompleted(this, new CustomerAddAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/KnownCustAddAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string KnownCustAddAll(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int BranchId, 
                    int EmployeeId, 
                    int MemberType, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele, 
                    int KnownCust) {
            object[] results = this.Invoke("KnownCustAddAll", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        BDay,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        Phone2,
                        CountryId,
                        GALicense,
                        BranchId,
                        EmployeeId,
                        MemberType,
                        Occupation,
                        Employer,
                        EmergContact,
                        EmergPhone,
                        Doc1Type,
                        Doc1IssuedFor,
                        Doc1Date,
                        Doc1No,
                        Doc2Type,
                        Doc2IssuedFor,
                        Doc2Date,
                        Doc2No,
                        ValueCardNo,
                        CustWorkEmpNo,
                        Ref1Name,
                        Ref1Tele,
                        Ref2Name,
                        Ref2Tele,
                        KnownCust});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void KnownCustAddAllAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int BranchId, 
                    int EmployeeId, 
                    int MemberType, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele, 
                    int KnownCust) {
            this.KnownCustAddAllAsync(token, FName, LName, ITIN, SSAN, BDay, Address, Address2, City, State, Zip, HPhone, Phone2, CountryId, GALicense, BranchId, EmployeeId, MemberType, Occupation, Employer, EmergContact, EmergPhone, Doc1Type, Doc1IssuedFor, Doc1Date, Doc1No, Doc2Type, Doc2IssuedFor, Doc2Date, Doc2No, ValueCardNo, CustWorkEmpNo, Ref1Name, Ref1Tele, Ref2Name, Ref2Tele, KnownCust, null);
        }
        
        /// <remarks/>
        public void KnownCustAddAllAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int BranchId, 
                    int EmployeeId, 
                    int MemberType, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele, 
                    int KnownCust, 
                    object userState) {
            if ((this.KnownCustAddAllOperationCompleted == null)) {
                this.KnownCustAddAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnKnownCustAddAllOperationCompleted);
            }
            this.InvokeAsync("KnownCustAddAll", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        BDay,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        Phone2,
                        CountryId,
                        GALicense,
                        BranchId,
                        EmployeeId,
                        MemberType,
                        Occupation,
                        Employer,
                        EmergContact,
                        EmergPhone,
                        Doc1Type,
                        Doc1IssuedFor,
                        Doc1Date,
                        Doc1No,
                        Doc2Type,
                        Doc2IssuedFor,
                        Doc2Date,
                        Doc2No,
                        ValueCardNo,
                        CustWorkEmpNo,
                        Ref1Name,
                        Ref1Tele,
                        Ref2Name,
                        Ref2Tele,
                        KnownCust}, this.KnownCustAddAllOperationCompleted, userState);
        }
        
        private void OnKnownCustAddAllOperationCompleted(object arg) {
            if ((this.KnownCustAddAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.KnownCustAddAllCompleted(this, new KnownCustAddAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerRAddAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerRAddAll(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int BranchId, 
                    int EmployeeId, 
                    int MemberType, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele, 
                    int AllowText) {
            object[] results = this.Invoke("CustomerRAddAll", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        BDay,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        Phone2,
                        CountryId,
                        GALicense,
                        BranchId,
                        EmployeeId,
                        MemberType,
                        Occupation,
                        Employer,
                        EmergContact,
                        EmergPhone,
                        Doc1Type,
                        Doc1IssuedFor,
                        Doc1Date,
                        Doc1No,
                        Doc2Type,
                        Doc2IssuedFor,
                        Doc2Date,
                        Doc2No,
                        ValueCardNo,
                        CustWorkEmpNo,
                        Ref1Name,
                        Ref1Tele,
                        Ref2Name,
                        Ref2Tele,
                        AllowText});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerRAddAllAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int BranchId, 
                    int EmployeeId, 
                    int MemberType, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele, 
                    int AllowText) {
            this.CustomerRAddAllAsync(token, FName, LName, ITIN, SSAN, BDay, Address, Address2, City, State, Zip, HPhone, Phone2, CountryId, GALicense, BranchId, EmployeeId, MemberType, Occupation, Employer, EmergContact, EmergPhone, Doc1Type, Doc1IssuedFor, Doc1Date, Doc1No, Doc2Type, Doc2IssuedFor, Doc2Date, Doc2No, ValueCardNo, CustWorkEmpNo, Ref1Name, Ref1Tele, Ref2Name, Ref2Tele, AllowText, null);
        }
        
        /// <remarks/>
        public void CustomerRAddAllAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int BranchId, 
                    int EmployeeId, 
                    int MemberType, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele, 
                    int AllowText, 
                    object userState) {
            if ((this.CustomerRAddAllOperationCompleted == null)) {
                this.CustomerRAddAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerRAddAllOperationCompleted);
            }
            this.InvokeAsync("CustomerRAddAll", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        BDay,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        Phone2,
                        CountryId,
                        GALicense,
                        BranchId,
                        EmployeeId,
                        MemberType,
                        Occupation,
                        Employer,
                        EmergContact,
                        EmergPhone,
                        Doc1Type,
                        Doc1IssuedFor,
                        Doc1Date,
                        Doc1No,
                        Doc2Type,
                        Doc2IssuedFor,
                        Doc2Date,
                        Doc2No,
                        ValueCardNo,
                        CustWorkEmpNo,
                        Ref1Name,
                        Ref1Tele,
                        Ref2Name,
                        Ref2Tele,
                        AllowText}, this.CustomerRAddAllOperationCompleted, userState);
        }
        
        private void OnCustomerRAddAllOperationCompleted(object arg) {
            if ((this.CustomerRAddAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerRAddAllCompleted(this, new CustomerRAddAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerUpdate(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSN, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    int CountryId, 
                    System.DateTime BDay, 
                    int OnHoldCodeId, 
                    int EmployeeId, 
                    int BadgeNo) {
            object[] results = this.Invoke("CustomerUpdate", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSN,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        CountryId,
                        BDay,
                        OnHoldCodeId,
                        EmployeeId,
                        BadgeNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerUpdateAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSN, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    int CountryId, 
                    System.DateTime BDay, 
                    int OnHoldCodeId, 
                    int EmployeeId, 
                    int BadgeNo) {
            this.CustomerUpdateAsync(token, FName, LName, ITIN, SSN, Address, Address2, City, State, Zip, HPhone, CountryId, BDay, OnHoldCodeId, EmployeeId, BadgeNo, null);
        }
        
        /// <remarks/>
        public void CustomerUpdateAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSN, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    int CountryId, 
                    System.DateTime BDay, 
                    int OnHoldCodeId, 
                    int EmployeeId, 
                    int BadgeNo, 
                    object userState) {
            if ((this.CustomerUpdateOperationCompleted == null)) {
                this.CustomerUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerUpdateOperationCompleted);
            }
            this.InvokeAsync("CustomerUpdate", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSN,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        CountryId,
                        BDay,
                        OnHoldCodeId,
                        EmployeeId,
                        BadgeNo}, this.CustomerUpdateOperationCompleted, userState);
        }
        
        private void OnCustomerUpdateOperationCompleted(object arg) {
            if ((this.CustomerUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerUpdateCompleted(this, new CustomerUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CustomerUpdateAll", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CustomerUpdateAll(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int OnHoldCodeId, 
                    int EmployeeId, 
                    int MemberType, 
                    int ProductId, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele, 
                    int BadgeNo) {
            object[] results = this.Invoke("CustomerUpdateAll", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        BDay,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        Phone2,
                        CountryId,
                        GALicense,
                        OnHoldCodeId,
                        EmployeeId,
                        MemberType,
                        ProductId,
                        Occupation,
                        Employer,
                        EmergContact,
                        EmergPhone,
                        Doc1Type,
                        Doc1IssuedFor,
                        Doc1Date,
                        Doc1No,
                        Doc2Type,
                        Doc2IssuedFor,
                        Doc2Date,
                        Doc2No,
                        ValueCardNo,
                        CustWorkEmpNo,
                        Ref1Name,
                        Ref1Tele,
                        Ref2Name,
                        Ref2Tele,
                        BadgeNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CustomerUpdateAllAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int OnHoldCodeId, 
                    int EmployeeId, 
                    int MemberType, 
                    int ProductId, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele, 
                    int BadgeNo) {
            this.CustomerUpdateAllAsync(token, FName, LName, ITIN, SSAN, BDay, Address, Address2, City, State, Zip, HPhone, Phone2, CountryId, GALicense, OnHoldCodeId, EmployeeId, MemberType, ProductId, Occupation, Employer, EmergContact, EmergPhone, Doc1Type, Doc1IssuedFor, Doc1Date, Doc1No, Doc2Type, Doc2IssuedFor, Doc2Date, Doc2No, ValueCardNo, CustWorkEmpNo, Ref1Name, Ref1Tele, Ref2Name, Ref2Tele, BadgeNo, null);
        }
        
        /// <remarks/>
        public void CustomerUpdateAllAsync(
                    string token, 
                    string FName, 
                    string LName, 
                    string ITIN, 
                    string SSAN, 
                    System.DateTime BDay, 
                    string Address, 
                    string Address2, 
                    string City, 
                    string State, 
                    string Zip, 
                    string HPhone, 
                    string Phone2, 
                    int CountryId, 
                    string GALicense, 
                    int OnHoldCodeId, 
                    int EmployeeId, 
                    int MemberType, 
                    int ProductId, 
                    string Occupation, 
                    string Employer, 
                    string EmergContact, 
                    string EmergPhone, 
                    int Doc1Type, 
                    string Doc1IssuedFor, 
                    System.DateTime Doc1Date, 
                    string Doc1No, 
                    int Doc2Type, 
                    string Doc2IssuedFor, 
                    System.DateTime Doc2Date, 
                    string Doc2No, 
                    string ValueCardNo, 
                    string CustWorkEmpNo, 
                    string Ref1Name, 
                    string Ref1Tele, 
                    string Ref2Name, 
                    string Ref2Tele, 
                    int BadgeNo, 
                    object userState) {
            if ((this.CustomerUpdateAllOperationCompleted == null)) {
                this.CustomerUpdateAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomerUpdateAllOperationCompleted);
            }
            this.InvokeAsync("CustomerUpdateAll", new object[] {
                        token,
                        FName,
                        LName,
                        ITIN,
                        SSAN,
                        BDay,
                        Address,
                        Address2,
                        City,
                        State,
                        Zip,
                        HPhone,
                        Phone2,
                        CountryId,
                        GALicense,
                        OnHoldCodeId,
                        EmployeeId,
                        MemberType,
                        ProductId,
                        Occupation,
                        Employer,
                        EmergContact,
                        EmergPhone,
                        Doc1Type,
                        Doc1IssuedFor,
                        Doc1Date,
                        Doc1No,
                        Doc2Type,
                        Doc2IssuedFor,
                        Doc2Date,
                        Doc2No,
                        ValueCardNo,
                        CustWorkEmpNo,
                        Ref1Name,
                        Ref1Tele,
                        Ref2Name,
                        Ref2Tele,
                        BadgeNo}, this.CustomerUpdateAllOperationCompleted, userState);
        }
        
        private void OnCustomerUpdateAllOperationCompleted(object arg) {
            if ((this.CustomerUpdateAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomerUpdateAllCompleted(this, new CustomerUpdateAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchBadge", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchBadge(string token, int badgeNo, string searchTerm) {
            object[] results = this.Invoke("SearchBadge", new object[] {
                        token,
                        badgeNo,
                        searchTerm});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchBadgeAsync(string token, int badgeNo, string searchTerm) {
            this.SearchBadgeAsync(token, badgeNo, searchTerm, null);
        }
        
        /// <remarks/>
        public void SearchBadgeAsync(string token, int badgeNo, string searchTerm, object userState) {
            if ((this.SearchBadgeOperationCompleted == null)) {
                this.SearchBadgeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchBadgeOperationCompleted);
            }
            this.InvokeAsync("SearchBadge", new object[] {
                        token,
                        badgeNo,
                        searchTerm}, this.SearchBadgeOperationCompleted, userState);
        }
        
        private void OnSearchBadgeOperationCompleted(object arg) {
            if ((this.SearchBadgeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchBadgeCompleted(this, new SearchBadgeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchCustId", RequestElementName="SearchCustId", RequestNamespace="http://tempuri.org/", ResponseElementName="SearchCustIdResponse", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SearchCustIdResult")]
        public string SearchCustID(string token, int customerId, int allFields) {
            object[] results = this.Invoke("SearchCustID", new object[] {
                        token,
                        customerId,
                        allFields});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchCustIDAsync(string token, int customerId, int allFields) {
            this.SearchCustIDAsync(token, customerId, allFields, null);
        }
        
        /// <remarks/>
        public void SearchCustIDAsync(string token, int customerId, int allFields, object userState) {
            if ((this.SearchCustIDOperationCompleted == null)) {
                this.SearchCustIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCustIDOperationCompleted);
            }
            this.InvokeAsync("SearchCustID", new object[] {
                        token,
                        customerId,
                        allFields}, this.SearchCustIDOperationCompleted, userState);
        }
        
        private void OnSearchCustIDOperationCompleted(object arg) {
            if ((this.SearchCustIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCustIDCompleted(this, new SearchCustIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchCustName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchCustName(string token, string custfname, string custlname, int allFields) {
            object[] results = this.Invoke("SearchCustName", new object[] {
                        token,
                        custfname,
                        custlname,
                        allFields});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchCustNameAsync(string token, string custfname, string custlname, int allFields) {
            this.SearchCustNameAsync(token, custfname, custlname, allFields, null);
        }
        
        /// <remarks/>
        public void SearchCustNameAsync(string token, string custfname, string custlname, int allFields, object userState) {
            if ((this.SearchCustNameOperationCompleted == null)) {
                this.SearchCustNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCustNameOperationCompleted);
            }
            this.InvokeAsync("SearchCustName", new object[] {
                        token,
                        custfname,
                        custlname,
                        allFields}, this.SearchCustNameOperationCompleted, userState);
        }
        
        private void OnSearchCustNameOperationCompleted(object arg) {
            if ((this.SearchCustNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCustNameCompleted(this, new SearchCustNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchCustBDay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SearchCustBDay(string token, System.DateTime birthdate, int allFields) {
            object[] results = this.Invoke("SearchCustBDay", new object[] {
                        token,
                        birthdate,
                        allFields});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SearchCustBDayAsync(string token, System.DateTime birthdate, int allFields) {
            this.SearchCustBDayAsync(token, birthdate, allFields, null);
        }
        
        /// <remarks/>
        public void SearchCustBDayAsync(string token, System.DateTime birthdate, int allFields, object userState) {
            if ((this.SearchCustBDayOperationCompleted == null)) {
                this.SearchCustBDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchCustBDayOperationCompleted);
            }
            this.InvokeAsync("SearchCustBDay", new object[] {
                        token,
                        birthdate,
                        allFields}, this.SearchCustBDayOperationCompleted, userState);
        }
        
        private void OnSearchCustBDayOperationCompleted(object arg) {
            if ((this.SearchCustBDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchCustBDayCompleted(this, new SearchCustBDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CountryList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CountryList(string token) {
            object[] results = this.Invoke("CountryList", new object[] {
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CountryListAsync(string token) {
            this.CountryListAsync(token, null);
        }
        
        /// <remarks/>
        public void CountryListAsync(string token, object userState) {
            if ((this.CountryListOperationCompleted == null)) {
                this.CountryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountryListOperationCompleted);
            }
            this.InvokeAsync("CountryList", new object[] {
                        token}, this.CountryListOperationCompleted, userState);
        }
        
        private void OnCountryListOperationCompleted(object arg) {
            if ((this.CountryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountryListCompleted(this, new CountryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OnHoldCodeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OnHoldCodeList(string token) {
            object[] results = this.Invoke("OnHoldCodeList", new object[] {
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OnHoldCodeListAsync(string token) {
            this.OnHoldCodeListAsync(token, null);
        }
        
        /// <remarks/>
        public void OnHoldCodeListAsync(string token, object userState) {
            if ((this.OnHoldCodeListOperationCompleted == null)) {
                this.OnHoldCodeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnHoldCodeListOperationCompleted);
            }
            this.InvokeAsync("OnHoldCodeList", new object[] {
                        token}, this.OnHoldCodeListOperationCompleted, userState);
        }
        
        private void OnOnHoldCodeListOperationCompleted(object arg) {
            if ((this.OnHoldCodeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OnHoldCodeListCompleted(this, new OnHoldCodeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MemberTypeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MemberTypeList(string token) {
            object[] results = this.Invoke("MemberTypeList", new object[] {
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MemberTypeListAsync(string token) {
            this.MemberTypeListAsync(token, null);
        }
        
        /// <remarks/>
        public void MemberTypeListAsync(string token, object userState) {
            if ((this.MemberTypeListOperationCompleted == null)) {
                this.MemberTypeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMemberTypeListOperationCompleted);
            }
            this.InvokeAsync("MemberTypeList", new object[] {
                        token}, this.MemberTypeListOperationCompleted, userState);
        }
        
        private void OnMemberTypeListOperationCompleted(object arg) {
            if ((this.MemberTypeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MemberTypeListCompleted(this, new MemberTypeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DocTypeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DocTypeList(string token, int isPrimary) {
            object[] results = this.Invoke("DocTypeList", new object[] {
                        token,
                        isPrimary});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DocTypeListAsync(string token, int isPrimary) {
            this.DocTypeListAsync(token, isPrimary, null);
        }
        
        /// <remarks/>
        public void DocTypeListAsync(string token, int isPrimary, object userState) {
            if ((this.DocTypeListOperationCompleted == null)) {
                this.DocTypeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocTypeListOperationCompleted);
            }
            this.InvokeAsync("DocTypeList", new object[] {
                        token,
                        isPrimary}, this.DocTypeListOperationCompleted, userState);
        }
        
        private void OnDocTypeListOperationCompleted(object arg) {
            if ((this.DocTypeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DocTypeListCompleted(this, new DocTypeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SavePhoto", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SavePhoto(string token, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] docbinaryarray, string docname, int BadgeNo, int isPhoto) {
            object[] results = this.Invoke("SavePhoto", new object[] {
                        token,
                        docbinaryarray,
                        docname,
                        BadgeNo,
                        isPhoto});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SavePhotoAsync(string token, byte[] docbinaryarray, string docname, int BadgeNo, int isPhoto) {
            this.SavePhotoAsync(token, docbinaryarray, docname, BadgeNo, isPhoto, null);
        }
        
        /// <remarks/>
        public void SavePhotoAsync(string token, byte[] docbinaryarray, string docname, int BadgeNo, int isPhoto, object userState) {
            if ((this.SavePhotoOperationCompleted == null)) {
                this.SavePhotoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePhotoOperationCompleted);
            }
            this.InvokeAsync("SavePhoto", new object[] {
                        token,
                        docbinaryarray,
                        docname,
                        BadgeNo,
                        isPhoto}, this.SavePhotoOperationCompleted, userState);
        }
        
        private void OnSavePhotoOperationCompleted(object arg) {
            if ((this.SavePhotoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePhotoCompleted(this, new SavePhotoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentLen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDocumentLen(string DocumentName) {
            object[] results = this.Invoke("GetDocumentLen", new object[] {
                        DocumentName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentLenAsync(string DocumentName) {
            this.GetDocumentLenAsync(DocumentName, null);
        }
        
        /// <remarks/>
        public void GetDocumentLenAsync(string DocumentName, object userState) {
            if ((this.GetDocumentLenOperationCompleted == null)) {
                this.GetDocumentLenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentLenOperationCompleted);
            }
            this.InvokeAsync("GetDocumentLen", new object[] {
                        DocumentName}, this.GetDocumentLenOperationCompleted, userState);
        }
        
        private void OnGetDocumentLenOperationCompleted(object arg) {
            if ((this.GetDocumentLenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentLenCompleted(this, new GetDocumentLenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocument", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetDocument(string DocumentName) {
            object[] results = this.Invoke("GetDocument", new object[] {
                        DocumentName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentAsync(string DocumentName) {
            this.GetDocumentAsync(DocumentName, null);
        }
        
        /// <remarks/>
        public void GetDocumentAsync(string DocumentName, object userState) {
            if ((this.GetDocumentOperationCompleted == null)) {
                this.GetDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentOperationCompleted);
            }
            this.InvokeAsync("GetDocument", new object[] {
                        DocumentName}, this.GetDocumentOperationCompleted, userState);
        }
        
        private void OnGetDocumentOperationCompleted(object arg) {
            if ((this.GetDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentCompleted(this, new GetDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CompanyLoginCompletedEventHandler(object sender, CompanyLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompanyLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompanyLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CustomerAddCompletedEventHandler(object sender, CustomerAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void KnownCustAddCompletedEventHandler(object sender, KnownCustAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KnownCustAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KnownCustAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CustomerAddAllCompletedEventHandler(object sender, CustomerAddAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerAddAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerAddAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void KnownCustAddAllCompletedEventHandler(object sender, KnownCustAddAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KnownCustAddAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal KnownCustAddAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CustomerRAddAllCompletedEventHandler(object sender, CustomerRAddAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerRAddAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerRAddAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CustomerUpdateCompletedEventHandler(object sender, CustomerUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CustomerUpdateAllCompletedEventHandler(object sender, CustomerUpdateAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomerUpdateAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CustomerUpdateAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SearchBadgeCompletedEventHandler(object sender, SearchBadgeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchBadgeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchBadgeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SearchCustIDCompletedEventHandler(object sender, SearchCustIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCustIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCustIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SearchCustNameCompletedEventHandler(object sender, SearchCustNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCustNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCustNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SearchCustBDayCompletedEventHandler(object sender, SearchCustBDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchCustBDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchCustBDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CountryListCompletedEventHandler(object sender, CountryListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void OnHoldCodeListCompletedEventHandler(object sender, OnHoldCodeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OnHoldCodeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OnHoldCodeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void MemberTypeListCompletedEventHandler(object sender, MemberTypeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MemberTypeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MemberTypeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DocTypeListCompletedEventHandler(object sender, DocTypeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DocTypeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DocTypeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SavePhotoCompletedEventHandler(object sender, SavePhotoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SavePhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SavePhotoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDocumentLenCompletedEventHandler(object sender, GetDocumentLenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentLenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentLenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDocumentCompletedEventHandler(object sender, GetDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591