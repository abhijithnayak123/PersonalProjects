//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 
#pragma warning disable 1591

namespace ChexarIO.ChexarCommonService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CommonServiceSoap", Namespace="http://tempuri.org/")]
    public partial class CommonService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CompanyLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmpLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmpLoginNPOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeactivateEmployeeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CommonService() {
            this.Url = global::ChexarIO.Properties.Settings.Default.ChexarIO_ChexarCommonService_CommonService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CompanyLoginCompletedEventHandler CompanyLoginCompleted;
        
        /// <remarks/>
        public event EmpLoginCompletedEventHandler EmpLoginCompleted;
        
        /// <remarks/>
        public event EmpLoginNPCompletedEventHandler EmpLoginNPCompleted;
        
        /// <remarks/>
        public event ResetPasswordCompletedEventHandler ResetPasswordCompleted;
        
        /// <remarks/>
        public event AddEmployeeCompletedEventHandler AddEmployeeCompleted;
        
        /// <remarks/>
        public event DeactivateEmployeeCompletedEventHandler DeactivateEmployeeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CompanyLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CompanyLogin(string CompanyId, string Username, string Password) {
            object[] results = this.Invoke("CompanyLogin", new object[] {
                        CompanyId,
                        Username,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CompanyLoginAsync(string CompanyId, string Username, string Password) {
            this.CompanyLoginAsync(CompanyId, Username, Password, null);
        }
        
        /// <remarks/>
        public void CompanyLoginAsync(string CompanyId, string Username, string Password, object userState) {
            if ((this.CompanyLoginOperationCompleted == null)) {
                this.CompanyLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompanyLoginOperationCompleted);
            }
            this.InvokeAsync("CompanyLogin", new object[] {
                        CompanyId,
                        Username,
                        Password}, this.CompanyLoginOperationCompleted, userState);
        }
        
        private void OnCompanyLoginOperationCompleted(object arg) {
            if ((this.CompanyLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompanyLoginCompleted(this, new CompanyLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EmpLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EmpLogin(string token, string Username, string Password) {
            object[] results = this.Invoke("EmpLogin", new object[] {
                        token,
                        Username,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EmpLoginAsync(string token, string Username, string Password) {
            this.EmpLoginAsync(token, Username, Password, null);
        }
        
        /// <remarks/>
        public void EmpLoginAsync(string token, string Username, string Password, object userState) {
            if ((this.EmpLoginOperationCompleted == null)) {
                this.EmpLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmpLoginOperationCompleted);
            }
            this.InvokeAsync("EmpLogin", new object[] {
                        token,
                        Username,
                        Password}, this.EmpLoginOperationCompleted, userState);
        }
        
        private void OnEmpLoginOperationCompleted(object arg) {
            if ((this.EmpLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmpLoginCompleted(this, new EmpLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EmpLoginNP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EmpLoginNP(string token, string Username) {
            object[] results = this.Invoke("EmpLoginNP", new object[] {
                        token,
                        Username});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EmpLoginNPAsync(string token, string Username) {
            this.EmpLoginNPAsync(token, Username, null);
        }
        
        /// <remarks/>
        public void EmpLoginNPAsync(string token, string Username, object userState) {
            if ((this.EmpLoginNPOperationCompleted == null)) {
                this.EmpLoginNPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmpLoginNPOperationCompleted);
            }
            this.InvokeAsync("EmpLoginNP", new object[] {
                        token,
                        Username}, this.EmpLoginNPOperationCompleted, userState);
        }
        
        private void OnEmpLoginNPOperationCompleted(object arg) {
            if ((this.EmpLoginNPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmpLoginNPCompleted(this, new EmpLoginNPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ResetPassword(string token, int EmployeeId, string Username, string OldPassword, string NewPassword) {
            object[] results = this.Invoke("ResetPassword", new object[] {
                        token,
                        EmployeeId,
                        Username,
                        OldPassword,
                        NewPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string token, int EmployeeId, string Username, string OldPassword, string NewPassword) {
            this.ResetPasswordAsync(token, EmployeeId, Username, OldPassword, NewPassword, null);
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string token, int EmployeeId, string Username, string OldPassword, string NewPassword, object userState) {
            if ((this.ResetPasswordOperationCompleted == null)) {
                this.ResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPasswordOperationCompleted);
            }
            this.InvokeAsync("ResetPassword", new object[] {
                        token,
                        EmployeeId,
                        Username,
                        OldPassword,
                        NewPassword}, this.ResetPasswordOperationCompleted, userState);
        }
        
        private void OnResetPasswordOperationCompleted(object arg) {
            if ((this.ResetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetPasswordCompleted(this, new ResetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddEmployee(string Token, string EmpFName, string EmpLName, string UserName, string PassWord, string Email, int BranchID, int EmployeeType, int CreatorID) {
            object[] results = this.Invoke("AddEmployee", new object[] {
                        Token,
                        EmpFName,
                        EmpLName,
                        UserName,
                        PassWord,
                        Email,
                        BranchID,
                        EmployeeType,
                        CreatorID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddEmployeeAsync(string Token, string EmpFName, string EmpLName, string UserName, string PassWord, string Email, int BranchID, int EmployeeType, int CreatorID) {
            this.AddEmployeeAsync(Token, EmpFName, EmpLName, UserName, PassWord, Email, BranchID, EmployeeType, CreatorID, null);
        }
        
        /// <remarks/>
        public void AddEmployeeAsync(string Token, string EmpFName, string EmpLName, string UserName, string PassWord, string Email, int BranchID, int EmployeeType, int CreatorID, object userState) {
            if ((this.AddEmployeeOperationCompleted == null)) {
                this.AddEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmployeeOperationCompleted);
            }
            this.InvokeAsync("AddEmployee", new object[] {
                        Token,
                        EmpFName,
                        EmpLName,
                        UserName,
                        PassWord,
                        Email,
                        BranchID,
                        EmployeeType,
                        CreatorID}, this.AddEmployeeOperationCompleted, userState);
        }
        
        private void OnAddEmployeeOperationCompleted(object arg) {
            if ((this.AddEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmployeeCompleted(this, new AddEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeactivateEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeactivateEmployee(string Token, int EmployeeID, int CreatorID) {
            object[] results = this.Invoke("DeactivateEmployee", new object[] {
                        Token,
                        EmployeeID,
                        CreatorID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeactivateEmployeeAsync(string Token, int EmployeeID, int CreatorID) {
            this.DeactivateEmployeeAsync(Token, EmployeeID, CreatorID, null);
        }
        
        /// <remarks/>
        public void DeactivateEmployeeAsync(string Token, int EmployeeID, int CreatorID, object userState) {
            if ((this.DeactivateEmployeeOperationCompleted == null)) {
                this.DeactivateEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeactivateEmployeeOperationCompleted);
            }
            this.InvokeAsync("DeactivateEmployee", new object[] {
                        Token,
                        EmployeeID,
                        CreatorID}, this.DeactivateEmployeeOperationCompleted, userState);
        }
        
        private void OnDeactivateEmployeeOperationCompleted(object arg) {
            if ((this.DeactivateEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeactivateEmployeeCompleted(this, new DeactivateEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CompanyLoginCompletedEventHandler(object sender, CompanyLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompanyLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompanyLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EmpLoginCompletedEventHandler(object sender, EmpLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmpLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmpLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void EmpLoginNPCompletedEventHandler(object sender, EmpLoginNPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmpLoginNPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmpLoginNPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ResetPasswordCompletedEventHandler(object sender, ResetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddEmployeeCompletedEventHandler(object sender, AddEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeactivateEmployeeCompletedEventHandler(object sender, DeactivateEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeactivateEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeactivateEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591