<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
    <Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets" Condition="'$(BUILD_NUMBER)' != '' " />
    <Import Project="$(MSBuildExtensionsPath)\ExtensionPack\4.0\MSBuild.ExtensionPack.tasks" Condition="'$(BUILD_NUMBER)' != '' " />
	<!-- Set the properties to be used across the build-->
    <PropertyGroup>
		<WorkspaceDir>$(WORKSPACE)$(ProjectRootPath)</WorkspaceDir>
		<NuGetAppPath>E:\Projects\ZEO\MergePromotoDevelop\ReleaseBranch\Zeo\CMMN\Nexxo.DMS.Deploy\.nuget\</NuGetAppPath>
		<NugetPackageRepoStore>https://nuget.org/api/v2/;http://10.111.109.14:9081/nexus/service/local/nuget/nexxo.share/;http://10.200.52.13:81/nuget/</NugetPackageRepoStore>
		<NugetPackagesFolder>$(WORKSPACE)Packages</NugetPackagesFolder>
		<NugetPackagesConfig>$(WorkspaceDir)packages.config</NugetPackagesConfig>
		<ProjectOutputDirectory>$(OutputDirectory)$(Project)</ProjectOutputDirectory>
		<DeploymentPSScript>$(NuGetAppPath)Deploy.ps1</DeploymentPSScript>
		
		<!-- Assembly related information -->
        <AssemblyName></AssemblyName>
        <AssemblyFile>$(WorkspaceDir)Properties\AssemblyInfo.cs</AssemblyFile>
        <AssemblyVersion></AssemblyVersion>
        <AssemblyMajorVersion></AssemblyMajorVersion>
        <AssemblyMinorVersion></AssemblyMinorVersion>
	</PropertyGroup>
	
	<!-- The common code in the custom targets should be above this -->
	<Target Name="Build" DependsOnTargets="InstallNugetDependency">
		<XmlPeek Namespaces="&lt;Namespace Prefix='msb' Uri='http://schemas.microsoft.com/developer/msbuild/2003'/&gt;"
				XmlInputPath="$(WorkspaceDir)\$(Project).csproj" Query="/msb:Project/msb:PropertyGroup/msb:OutputType/text()">
			<Output TaskParameter="Result" ItemName="myResult" />
		</XmlPeek>
		<PropertyGroup>
			<ProjectOutputType>@(myResult)</ProjectOutputType>
		</PropertyGroup>

		<Message Text="Project Type is: $(ProjectOutputType)"/>

		<!-- This MSBuild task is for non exe applications.-->
		<MSBuild Projects="$(WorkspaceDir)$(Project).csproj" Targets="Rebuild;_WPPCopyWebApplication"
				 Properties="WebProjectOutputDir=$(ProjectOutputDirectory);Configuration=$(ReleaseMode);WarningLevel=0;" Condition="'$(ProjectOutputType)'!='Exe' And '$(ProjectOutputType)'!='WinExe'">
			<Output TaskParameter="TargetOutputs" ItemName="AssemblyDetails" />
		</MSBuild>

		<!-- This MSBuild task is for exe applications-->
		<MSBuild Projects="$(WorkspaceDir)\$(Project).csproj" Targets="Rebuild;PrepareResources;ResolveReferences;"
				 Properties="OutputPath=$(ProjectOutputDirectory);Configuration=$(ReleaseMode);" Condition="'$(ProjectOutputType)'=='Exe' Or '$(ProjectOutputType)'=='WinExe'">
			<Output TaskParameter="TargetOutputs" ItemName="AssemblyDetails" />
		</MSBuild>
		
		<Copy SourceFiles="$(DeploymentPSScript)" DestinationFolder="$(ProjectOutputDirectory)" Condition="'$(ProjectOutputType)'!='Exe' And '$(ProjectOutputType)'!='WinExe'"/>

		<CallTarget Targets="CopyMasterData" Condition="Exists('$(MSBuildProjectDirectory)\MasterData\$(Project)')" />
		
        <MSBuild.ExtensionPack.Framework.Assembly TaskAction="GetInfo" NetAssembly="@(AssemblyDetails)" Condition="'$(BUILD_NUMBER)' != '' " >
            <Output TaskParameter="OutputItems" ItemName="Info"/>
        </MSBuild.ExtensionPack.Framework.Assembly>
        <Message Text="Identity: %(Info.Identity)" />
        <Message Text="FullName: %(Info.FullName)" />
        <PropertyGroup>
            <AssemblyName>%(Info.Identity)</AssemblyName>
        </PropertyGroup>
        <Message Text="Assembly Name is : $(AssemblyName)"/>
        <Message Text="'$(WorkspaceDir)$(AssemblyName).$(Version).nupkg'"/>
	</Target>
	<Target Name="CopyMasterData">
		<ItemGroup>
			<SourceFiles Include="$(MSBuildProjectDirectory)\MasterData\$(Project)\**\*.*"/>
		</ItemGroup>

		<Copy
            SourceFiles="@(SourceFiles)"
            DestinationFiles="@(SourceFiles->'$(ProjectOutputDirectory)\%(RecursiveDir)%(Filename)%(Extension)')"/>
	</Target>
	
	<Target Name="InstallNugetDependency" DependsOnTargets="SetAssemblyInfo">
       <Exec Command ="$(NuGetAppPath)Nuget.exe install -Source $(NugetPackageRepoStore) -Source http://10.111.109.14:8081/nexus/service/local/nuget/nexxo.share/ -OutputDirectory $(NugetPackagesFolder) $(NugetPackagesConfig)"
		Condition="Exists('$(NugetPackagesConfig)')"
		WorkingDirectory="$(MSBuildProjectDirectory)"/>

        <OnError ExecuteTargets="InstallNugetDependencyError"/>
    </Target>
	<!-- Targets For Error Handling-->
    <Target Name="InstallNugetDependencyError">
        <Error Text="Error occurred when installing Nuget package or one of its dependencies. Please verify if the dependencies listed in packages.config are valid and the source for installation is a valid nuget feed." Condition="1==1"/>
    </Target>
	<UsingTask TaskName="TransformXml" AssemblyFile="$(MSBuildProjectDirectory)\ExternalReference\Microsoft.Web.Publishing.Tasks.dll"/>
	<Target Name="TransformWebConfig">
		<XmlPeek Namespaces="&lt;Namespace Prefix='msb' Uri='http://schemas.microsoft.com/developer/msbuild/2003'/&gt;"
				XmlInputPath="$(WorkspaceDir)\$(Project).csproj" Query="/msb:Project/msb:PropertyGroup/msb:OutputType/text()">
			<Output TaskParameter="Result" ItemName="myResult" />
		</XmlPeek>
		
		<PropertyGroup>
			<ProjectOutputType>@(myResult)</ProjectOutputType>
		</PropertyGroup>
	
		<TransformXml Source="$(WorkspaceDir)app.config"
				  Transform="$(WorkspaceDir)$(Project).exe.$(Env).config"
				  Destination="$(ProjectOutputDirectory)\$(Project).exe.config"
				  StackTrace="true" Condition="('$(ProjectOutputType)'=='Exe' Or '$(ProjectOutputType)'=='WinExe' ) And Exists('$(WorkspaceDir)$(Project).exe.$(Env).config')"  />
				  
		<TransformXml Source="$(WorkspaceDir)Web.config"
				  Transform="$(WorkspaceDir)Web.$(Env).config"
				  Destination="$(ProjectOutputDirectory)\Web.config"
				  StackTrace="true" Condition="'$(ProjectOutputType)'!='Exe' And '$(ProjectOutputType)'!='WinExe'" />		  
	</Target>
	<Target Name="GetAssemblyInfo">
		<Delete Files="$(AssemblyFile).bak" Condition="Exists('$(AssemblyFile).bak')" />
		<Move SourceFiles="$(AssemblyFile)" DestinationFiles="$(AssemblyFile).bak"/>
        <GetAssemblyInfo AssemblyInfoFilePath="$(AssemblyFile).bak">
            <Output TaskParameter="Version" PropertyName="AssemblyVersion" />
            <Output TaskParameter="MajorVersion" PropertyName="AssemblyMajorVersion" />
            <Output TaskParameter="MinorVersion" PropertyName="AssemblyMinorVersion" />
        </GetAssemblyInfo>
        <Message Text="GetAssemblyInfo : 
			AssemblyMajorVersion : $(AssemblyMajorVersion) ; 
			AssemblyMinorVersion : $(AssemblyMinorVersion)"/>
    </Target>
	<Target Name="SetAssemblyInfo" DependsOnTargets="GetAssemblyInfo" Condition="'$(BUILD_NUMBER)' != '' ">
        <UpdateAssemblyVersionAssemblyInfo InputFilePath="$(AssemblyFile).bak" OutputFilePath="$(AssemblyFile)"
                       MajorVersion="$(AssemblyMajorVersion)"
                       MinorVersion="$(AssemblyMinorVersion)"
                       BuildVersion="$(BUILD_NUMBER)">
                      <!-- RevisionVersion="$(SVN_REVISION)"-->

        </UpdateAssemblyVersionAssemblyInfo>
        <Message Text="UpdateAssemblyVersionAssemblyInfo : 
			BuildVersion : $(BUILD_NUMBER) ;
			AssemblyMajorVersion : $(AssemblyMajorVersion) ; 
			AssemblyMinorVersion : $(AssemblyMinorVersion)"/>

        <PropertyGroup>
            <!--<Version>$(AssemblyMajorVersion).$(AssemblyMinorVersion).$(BUILD_NUMBER).$(SVN_REVISION)</Version>
			<Version Condition="'$(SCM.ToUpper())' == 'GIT'">$(AssemblyMajorVersion).$(AssemblyMinorVersion).$(BUILD_NUMBER)</Version>-->
			<Version>$(AssemblyMajorVersion).$(AssemblyMinorVersion).$(BUILD_NUMBER)</Version>
        </PropertyGroup>
    </Target>	
</Project>