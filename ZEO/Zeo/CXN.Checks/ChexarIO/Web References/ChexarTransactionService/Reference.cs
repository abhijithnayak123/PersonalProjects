//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.296.
// 
#pragma warning disable 1591

namespace ChexarIO.ChexarTransactionService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TransactionServiceSoap", Namespace="http://tempuri.org/")]
    public partial class TransactionService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CompanyLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback InvoiceDetailAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback InvoiceDetailAddGeocodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback InvoiceDetailDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostTmpOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductTypeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProductListOperationCompleted;
        
        private System.Threading.SendOrPostCallback OnHoldListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReOpenOperationCompleted;
        
        private System.Threading.SendOrPostCallback InvoiceGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback InvoiceVoidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOpenTransOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPrintedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsKnownMicrOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMicrInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearTransOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TransactionService() {
            this.Url = global::ChexarIO.Properties.Settings.Default.ChexarIO_ChexarTransactionService_TransactionService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CompanyLoginCompletedEventHandler CompanyLoginCompleted;
        
        /// <remarks/>
        public event InvoiceDetailAddCompletedEventHandler InvoiceDetailAddCompleted;
        
        /// <remarks/>
        public event InvoiceDetailAddGeocodeCompletedEventHandler InvoiceDetailAddGeocodeCompleted;
        
        /// <remarks/>
        public event InvoiceDetailDeleteCompletedEventHandler InvoiceDetailDeleteCompleted;
        
        /// <remarks/>
        public event PostTmpCompletedEventHandler PostTmpCompleted;
        
        /// <remarks/>
        public event CheckRulesCompletedEventHandler CheckRulesCompleted;
        
        /// <remarks/>
        public event ProductTypeListCompletedEventHandler ProductTypeListCompleted;
        
        /// <remarks/>
        public event ProductListCompletedEventHandler ProductListCompleted;
        
        /// <remarks/>
        public event OnHoldListCompletedEventHandler OnHoldListCompleted;
        
        /// <remarks/>
        public event ReOpenCompletedEventHandler ReOpenCompleted;
        
        /// <remarks/>
        public event InvoiceGetCompletedEventHandler InvoiceGetCompleted;
        
        /// <remarks/>
        public event InvoiceVoidCompletedEventHandler InvoiceVoidCompleted;
        
        /// <remarks/>
        public event GetOpenTransCompletedEventHandler GetOpenTransCompleted;
        
        /// <remarks/>
        public event SetPrintedCompletedEventHandler SetPrintedCompleted;
        
        /// <remarks/>
        public event IsKnownMicrCompletedEventHandler IsKnownMicrCompleted;
        
        /// <remarks/>
        public event GetMicrInfoCompletedEventHandler GetMicrInfoCompleted;
        
        /// <remarks/>
        public event ClearTransCompletedEventHandler ClearTransCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CompanyLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CompanyLogin(string CompanyId, string Username, string Password) {
            object[] results = this.Invoke("CompanyLogin", new object[] {
                        CompanyId,
                        Username,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CompanyLoginAsync(string CompanyId, string Username, string Password) {
            this.CompanyLoginAsync(CompanyId, Username, Password, null);
        }
        
        /// <remarks/>
        public void CompanyLoginAsync(string CompanyId, string Username, string Password, object userState) {
            if ((this.CompanyLoginOperationCompleted == null)) {
                this.CompanyLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompanyLoginOperationCompleted);
            }
            this.InvokeAsync("CompanyLogin", new object[] {
                        CompanyId,
                        Username,
                        Password}, this.CompanyLoginOperationCompleted, userState);
        }
        
        private void OnCompanyLoginOperationCompleted(object arg) {
            if ((this.CompanyLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompanyLoginCompleted(this, new CompanyLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InvoiceDetailAdd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InvoiceDetailAdd(
                    string token, 
                    int BadgeNo, 
                    int BranchId, 
                    int EmployeeId, 
                    int ProductId, 
                    double RefAmount, 
                    double FeeRate, 
                    string RefNumber, 
                    System.DateTime CheckDate, 
                    string ABA, 
                    string AcctNumber, 
                    string MicrData, 
                    double FeeAmount, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] CkFront, 
                    string CkFrontName, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] CkBack, 
                    string CkBackName, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Ckfronttif, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Ckbacktif, 
                    string makerPhone) {
            object[] results = this.Invoke("InvoiceDetailAdd", new object[] {
                        token,
                        BadgeNo,
                        BranchId,
                        EmployeeId,
                        ProductId,
                        RefAmount,
                        FeeRate,
                        RefNumber,
                        CheckDate,
                        ABA,
                        AcctNumber,
                        MicrData,
                        FeeAmount,
                        CkFront,
                        CkFrontName,
                        CkBack,
                        CkBackName,
                        Ckfronttif,
                        Ckbacktif,
                        makerPhone});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InvoiceDetailAddAsync(
                    string token, 
                    int BadgeNo, 
                    int BranchId, 
                    int EmployeeId, 
                    int ProductId, 
                    double RefAmount, 
                    double FeeRate, 
                    string RefNumber, 
                    System.DateTime CheckDate, 
                    string ABA, 
                    string AcctNumber, 
                    string MicrData, 
                    double FeeAmount, 
                    byte[] CkFront, 
                    string CkFrontName, 
                    byte[] CkBack, 
                    string CkBackName, 
                    byte[] Ckfronttif, 
                    byte[] Ckbacktif, 
                    string makerPhone) {
            this.InvoiceDetailAddAsync(token, BadgeNo, BranchId, EmployeeId, ProductId, RefAmount, FeeRate, RefNumber, CheckDate, ABA, AcctNumber, MicrData, FeeAmount, CkFront, CkFrontName, CkBack, CkBackName, Ckfronttif, Ckbacktif, makerPhone, null);
        }
        
        /// <remarks/>
        public void InvoiceDetailAddAsync(
                    string token, 
                    int BadgeNo, 
                    int BranchId, 
                    int EmployeeId, 
                    int ProductId, 
                    double RefAmount, 
                    double FeeRate, 
                    string RefNumber, 
                    System.DateTime CheckDate, 
                    string ABA, 
                    string AcctNumber, 
                    string MicrData, 
                    double FeeAmount, 
                    byte[] CkFront, 
                    string CkFrontName, 
                    byte[] CkBack, 
                    string CkBackName, 
                    byte[] Ckfronttif, 
                    byte[] Ckbacktif, 
                    string makerPhone, 
                    object userState) {
            if ((this.InvoiceDetailAddOperationCompleted == null)) {
                this.InvoiceDetailAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInvoiceDetailAddOperationCompleted);
            }
            this.InvokeAsync("InvoiceDetailAdd", new object[] {
                        token,
                        BadgeNo,
                        BranchId,
                        EmployeeId,
                        ProductId,
                        RefAmount,
                        FeeRate,
                        RefNumber,
                        CheckDate,
                        ABA,
                        AcctNumber,
                        MicrData,
                        FeeAmount,
                        CkFront,
                        CkFrontName,
                        CkBack,
                        CkBackName,
                        Ckfronttif,
                        Ckbacktif,
                        makerPhone}, this.InvoiceDetailAddOperationCompleted, userState);
        }
        
        private void OnInvoiceDetailAddOperationCompleted(object arg) {
            if ((this.InvoiceDetailAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InvoiceDetailAddCompleted(this, new InvoiceDetailAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InvoiceDetailAddGeocode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InvoiceDetailAddGeocode(
                    string token, 
                    int BadgeNo, 
                    int BranchId, 
                    int EmployeeId, 
                    int ProductId, 
                    double RefAmount, 
                    double FeeRate, 
                    string RefNumber, 
                    System.DateTime CheckDate, 
                    string ABA, 
                    string AcctNumber, 
                    string MicrData, 
                    double FeeAmount, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] CkFront, 
                    string CkFrontName, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] CkBack, 
                    string CkBackName, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Ckfronttif, 
                    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] Ckbacktif, 
                    string makerPhone, 
                    double GeoLatitude, 
                    double GeoLongitude) {
            object[] results = this.Invoke("InvoiceDetailAddGeocode", new object[] {
                        token,
                        BadgeNo,
                        BranchId,
                        EmployeeId,
                        ProductId,
                        RefAmount,
                        FeeRate,
                        RefNumber,
                        CheckDate,
                        ABA,
                        AcctNumber,
                        MicrData,
                        FeeAmount,
                        CkFront,
                        CkFrontName,
                        CkBack,
                        CkBackName,
                        Ckfronttif,
                        Ckbacktif,
                        makerPhone,
                        GeoLatitude,
                        GeoLongitude});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InvoiceDetailAddGeocodeAsync(
                    string token, 
                    int BadgeNo, 
                    int BranchId, 
                    int EmployeeId, 
                    int ProductId, 
                    double RefAmount, 
                    double FeeRate, 
                    string RefNumber, 
                    System.DateTime CheckDate, 
                    string ABA, 
                    string AcctNumber, 
                    string MicrData, 
                    double FeeAmount, 
                    byte[] CkFront, 
                    string CkFrontName, 
                    byte[] CkBack, 
                    string CkBackName, 
                    byte[] Ckfronttif, 
                    byte[] Ckbacktif, 
                    string makerPhone, 
                    double GeoLatitude, 
                    double GeoLongitude) {
            this.InvoiceDetailAddGeocodeAsync(token, BadgeNo, BranchId, EmployeeId, ProductId, RefAmount, FeeRate, RefNumber, CheckDate, ABA, AcctNumber, MicrData, FeeAmount, CkFront, CkFrontName, CkBack, CkBackName, Ckfronttif, Ckbacktif, makerPhone, GeoLatitude, GeoLongitude, null);
        }
        
        /// <remarks/>
        public void InvoiceDetailAddGeocodeAsync(
                    string token, 
                    int BadgeNo, 
                    int BranchId, 
                    int EmployeeId, 
                    int ProductId, 
                    double RefAmount, 
                    double FeeRate, 
                    string RefNumber, 
                    System.DateTime CheckDate, 
                    string ABA, 
                    string AcctNumber, 
                    string MicrData, 
                    double FeeAmount, 
                    byte[] CkFront, 
                    string CkFrontName, 
                    byte[] CkBack, 
                    string CkBackName, 
                    byte[] Ckfronttif, 
                    byte[] Ckbacktif, 
                    string makerPhone, 
                    double GeoLatitude, 
                    double GeoLongitude, 
                    object userState) {
            if ((this.InvoiceDetailAddGeocodeOperationCompleted == null)) {
                this.InvoiceDetailAddGeocodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInvoiceDetailAddGeocodeOperationCompleted);
            }
            this.InvokeAsync("InvoiceDetailAddGeocode", new object[] {
                        token,
                        BadgeNo,
                        BranchId,
                        EmployeeId,
                        ProductId,
                        RefAmount,
                        FeeRate,
                        RefNumber,
                        CheckDate,
                        ABA,
                        AcctNumber,
                        MicrData,
                        FeeAmount,
                        CkFront,
                        CkFrontName,
                        CkBack,
                        CkBackName,
                        Ckfronttif,
                        Ckbacktif,
                        makerPhone,
                        GeoLatitude,
                        GeoLongitude}, this.InvoiceDetailAddGeocodeOperationCompleted, userState);
        }
        
        private void OnInvoiceDetailAddGeocodeOperationCompleted(object arg) {
            if ((this.InvoiceDetailAddGeocodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InvoiceDetailAddGeocodeCompleted(this, new InvoiceDetailAddGeocodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InvoiceDetailDelete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InvoiceDetailDelete(string token, int tmpTrandetId) {
            object[] results = this.Invoke("InvoiceDetailDelete", new object[] {
                        token,
                        tmpTrandetId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InvoiceDetailDeleteAsync(string token, int tmpTrandetId) {
            this.InvoiceDetailDeleteAsync(token, tmpTrandetId, null);
        }
        
        /// <remarks/>
        public void InvoiceDetailDeleteAsync(string token, int tmpTrandetId, object userState) {
            if ((this.InvoiceDetailDeleteOperationCompleted == null)) {
                this.InvoiceDetailDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInvoiceDetailDeleteOperationCompleted);
            }
            this.InvokeAsync("InvoiceDetailDelete", new object[] {
                        token,
                        tmpTrandetId}, this.InvoiceDetailDeleteOperationCompleted, userState);
        }
        
        private void OnInvoiceDetailDeleteOperationCompleted(object arg) {
            if ((this.InvoiceDetailDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InvoiceDetailDeleteCompleted(this, new InvoiceDetailDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PostTmp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PostTmp(string token, int BranchId, int EmployeeId, int BadgeNo) {
            object[] results = this.Invoke("PostTmp", new object[] {
                        token,
                        BranchId,
                        EmployeeId,
                        BadgeNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PostTmpAsync(string token, int BranchId, int EmployeeId, int BadgeNo) {
            this.PostTmpAsync(token, BranchId, EmployeeId, BadgeNo, null);
        }
        
        /// <remarks/>
        public void PostTmpAsync(string token, int BranchId, int EmployeeId, int BadgeNo, object userState) {
            if ((this.PostTmpOperationCompleted == null)) {
                this.PostTmpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostTmpOperationCompleted);
            }
            this.InvokeAsync("PostTmp", new object[] {
                        token,
                        BranchId,
                        EmployeeId,
                        BadgeNo}, this.PostTmpOperationCompleted, userState);
        }
        
        private void OnPostTmpOperationCompleted(object arg) {
            if ((this.PostTmpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostTmpCompleted(this, new PostTmpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRules", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckRules(string token, int TranMastId) {
            object[] results = this.Invoke("CheckRules", new object[] {
                        token,
                        TranMastId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRulesAsync(string token, int TranMastId) {
            this.CheckRulesAsync(token, TranMastId, null);
        }
        
        /// <remarks/>
        public void CheckRulesAsync(string token, int TranMastId, object userState) {
            if ((this.CheckRulesOperationCompleted == null)) {
                this.CheckRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRulesOperationCompleted);
            }
            this.InvokeAsync("CheckRules", new object[] {
                        token,
                        TranMastId}, this.CheckRulesOperationCompleted, userState);
        }
        
        private void OnCheckRulesOperationCompleted(object arg) {
            if ((this.CheckRulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRulesCompleted(this, new CheckRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProductTypeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProductTypeList(string token) {
            object[] results = this.Invoke("ProductTypeList", new object[] {
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductTypeListAsync(string token) {
            this.ProductTypeListAsync(token, null);
        }
        
        /// <remarks/>
        public void ProductTypeListAsync(string token, object userState) {
            if ((this.ProductTypeListOperationCompleted == null)) {
                this.ProductTypeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductTypeListOperationCompleted);
            }
            this.InvokeAsync("ProductTypeList", new object[] {
                        token}, this.ProductTypeListOperationCompleted, userState);
        }
        
        private void OnProductTypeListOperationCompleted(object arg) {
            if ((this.ProductTypeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductTypeListCompleted(this, new ProductTypeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ProductList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ProductList(string token, int productTypeId) {
            object[] results = this.Invoke("ProductList", new object[] {
                        token,
                        productTypeId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProductListAsync(string token, int productTypeId) {
            this.ProductListAsync(token, productTypeId, null);
        }
        
        /// <remarks/>
        public void ProductListAsync(string token, int productTypeId, object userState) {
            if ((this.ProductListOperationCompleted == null)) {
                this.ProductListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProductListOperationCompleted);
            }
            this.InvokeAsync("ProductList", new object[] {
                        token,
                        productTypeId}, this.ProductListOperationCompleted, userState);
        }
        
        private void OnProductListOperationCompleted(object arg) {
            if ((this.ProductListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProductListCompleted(this, new ProductListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/OnHoldList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string OnHoldList(string token, int employeeId, int branchId) {
            object[] results = this.Invoke("OnHoldList", new object[] {
                        token,
                        employeeId,
                        branchId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OnHoldListAsync(string token, int employeeId, int branchId) {
            this.OnHoldListAsync(token, employeeId, branchId, null);
        }
        
        /// <remarks/>
        public void OnHoldListAsync(string token, int employeeId, int branchId, object userState) {
            if ((this.OnHoldListOperationCompleted == null)) {
                this.OnHoldListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnHoldListOperationCompleted);
            }
            this.InvokeAsync("OnHoldList", new object[] {
                        token,
                        employeeId,
                        branchId}, this.OnHoldListOperationCompleted, userState);
        }
        
        private void OnOnHoldListOperationCompleted(object arg) {
            if ((this.OnHoldListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OnHoldListCompleted(this, new OnHoldListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReOpen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ReOpen(string token, int TranMastId) {
            object[] results = this.Invoke("ReOpen", new object[] {
                        token,
                        TranMastId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReOpenAsync(string token, int TranMastId) {
            this.ReOpenAsync(token, TranMastId, null);
        }
        
        /// <remarks/>
        public void ReOpenAsync(string token, int TranMastId, object userState) {
            if ((this.ReOpenOperationCompleted == null)) {
                this.ReOpenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReOpenOperationCompleted);
            }
            this.InvokeAsync("ReOpen", new object[] {
                        token,
                        TranMastId}, this.ReOpenOperationCompleted, userState);
        }
        
        private void OnReOpenOperationCompleted(object arg) {
            if ((this.ReOpenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReOpenCompleted(this, new ReOpenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InvoiceGet", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InvoiceGet(string token, int TranMastId) {
            object[] results = this.Invoke("InvoiceGet", new object[] {
                        token,
                        TranMastId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InvoiceGetAsync(string token, int TranMastId) {
            this.InvoiceGetAsync(token, TranMastId, null);
        }
        
        /// <remarks/>
        public void InvoiceGetAsync(string token, int TranMastId, object userState) {
            if ((this.InvoiceGetOperationCompleted == null)) {
                this.InvoiceGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInvoiceGetOperationCompleted);
            }
            this.InvokeAsync("InvoiceGet", new object[] {
                        token,
                        TranMastId}, this.InvoiceGetOperationCompleted, userState);
        }
        
        private void OnInvoiceGetOperationCompleted(object arg) {
            if ((this.InvoiceGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InvoiceGetCompleted(this, new InvoiceGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InvoiceVoid", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InvoiceVoid(string token, int TranMastId) {
            object[] results = this.Invoke("InvoiceVoid", new object[] {
                        token,
                        TranMastId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InvoiceVoidAsync(string token, int TranMastId) {
            this.InvoiceVoidAsync(token, TranMastId, null);
        }
        
        /// <remarks/>
        public void InvoiceVoidAsync(string token, int TranMastId, object userState) {
            if ((this.InvoiceVoidOperationCompleted == null)) {
                this.InvoiceVoidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInvoiceVoidOperationCompleted);
            }
            this.InvokeAsync("InvoiceVoid", new object[] {
                        token,
                        TranMastId}, this.InvoiceVoidOperationCompleted, userState);
        }
        
        private void OnInvoiceVoidOperationCompleted(object arg) {
            if ((this.InvoiceVoidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InvoiceVoidCompleted(this, new InvoiceVoidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOpenTrans", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOpenTrans(string token) {
            object[] results = this.Invoke("GetOpenTrans", new object[] {
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOpenTransAsync(string token) {
            this.GetOpenTransAsync(token, null);
        }
        
        /// <remarks/>
        public void GetOpenTransAsync(string token, object userState) {
            if ((this.GetOpenTransOperationCompleted == null)) {
                this.GetOpenTransOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOpenTransOperationCompleted);
            }
            this.InvokeAsync("GetOpenTrans", new object[] {
                        token}, this.GetOpenTransOperationCompleted, userState);
        }
        
        private void OnGetOpenTransOperationCompleted(object arg) {
            if ((this.GetOpenTransCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOpenTransCompleted(this, new GetOpenTransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPrinted", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetPrinted(string token, int TranMastId) {
            object[] results = this.Invoke("SetPrinted", new object[] {
                        token,
                        TranMastId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetPrintedAsync(string token, int TranMastId) {
            this.SetPrintedAsync(token, TranMastId, null);
        }
        
        /// <remarks/>
        public void SetPrintedAsync(string token, int TranMastId, object userState) {
            if ((this.SetPrintedOperationCompleted == null)) {
                this.SetPrintedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPrintedOperationCompleted);
            }
            this.InvokeAsync("SetPrinted", new object[] {
                        token,
                        TranMastId}, this.SetPrintedOperationCompleted, userState);
        }
        
        private void OnSetPrintedOperationCompleted(object arg) {
            if ((this.SetPrintedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPrintedCompleted(this, new SetPrintedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsKnownMicr", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsKnownMicr(string token, int TranMastId) {
            object[] results = this.Invoke("IsKnownMicr", new object[] {
                        token,
                        TranMastId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsKnownMicrAsync(string token, int TranMastId) {
            this.IsKnownMicrAsync(token, TranMastId, null);
        }
        
        /// <remarks/>
        public void IsKnownMicrAsync(string token, int TranMastId, object userState) {
            if ((this.IsKnownMicrOperationCompleted == null)) {
                this.IsKnownMicrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsKnownMicrOperationCompleted);
            }
            this.InvokeAsync("IsKnownMicr", new object[] {
                        token,
                        TranMastId}, this.IsKnownMicrOperationCompleted, userState);
        }
        
        private void OnIsKnownMicrOperationCompleted(object arg) {
            if ((this.IsKnownMicrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsKnownMicrCompleted(this, new IsKnownMicrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMicrInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMicrInfo(string token, int TmpTranDetId) {
            object[] results = this.Invoke("GetMicrInfo", new object[] {
                        token,
                        TmpTranDetId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMicrInfoAsync(string token, int TmpTranDetId) {
            this.GetMicrInfoAsync(token, TmpTranDetId, null);
        }
        
        /// <remarks/>
        public void GetMicrInfoAsync(string token, int TmpTranDetId, object userState) {
            if ((this.GetMicrInfoOperationCompleted == null)) {
                this.GetMicrInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMicrInfoOperationCompleted);
            }
            this.InvokeAsync("GetMicrInfo", new object[] {
                        token,
                        TmpTranDetId}, this.GetMicrInfoOperationCompleted, userState);
        }
        
        private void OnGetMicrInfoOperationCompleted(object arg) {
            if ((this.GetMicrInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMicrInfoCompleted(this, new GetMicrInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearTrans", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ClearTrans(string token, int EmployeeId, int BadgeNo) {
            object[] results = this.Invoke("ClearTrans", new object[] {
                        token,
                        EmployeeId,
                        BadgeNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ClearTransAsync(string token, int EmployeeId, int BadgeNo) {
            this.ClearTransAsync(token, EmployeeId, BadgeNo, null);
        }
        
        /// <remarks/>
        public void ClearTransAsync(string token, int EmployeeId, int BadgeNo, object userState) {
            if ((this.ClearTransOperationCompleted == null)) {
                this.ClearTransOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearTransOperationCompleted);
            }
            this.InvokeAsync("ClearTrans", new object[] {
                        token,
                        EmployeeId,
                        BadgeNo}, this.ClearTransOperationCompleted, userState);
        }
        
        private void OnClearTransOperationCompleted(object arg) {
            if ((this.ClearTransCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearTransCompleted(this, new ClearTransCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CompanyLoginCompletedEventHandler(object sender, CompanyLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CompanyLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CompanyLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InvoiceDetailAddCompletedEventHandler(object sender, InvoiceDetailAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InvoiceDetailAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InvoiceDetailAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InvoiceDetailAddGeocodeCompletedEventHandler(object sender, InvoiceDetailAddGeocodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InvoiceDetailAddGeocodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InvoiceDetailAddGeocodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InvoiceDetailDeleteCompletedEventHandler(object sender, InvoiceDetailDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InvoiceDetailDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InvoiceDetailDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void PostTmpCompletedEventHandler(object sender, PostTmpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostTmpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostTmpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckRulesCompletedEventHandler(object sender, CheckRulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProductTypeListCompletedEventHandler(object sender, ProductTypeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductTypeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductTypeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProductListCompletedEventHandler(object sender, ProductListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProductListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProductListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void OnHoldListCompletedEventHandler(object sender, OnHoldListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OnHoldListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OnHoldListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ReOpenCompletedEventHandler(object sender, ReOpenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReOpenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReOpenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InvoiceGetCompletedEventHandler(object sender, InvoiceGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InvoiceGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InvoiceGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void InvoiceVoidCompletedEventHandler(object sender, InvoiceVoidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InvoiceVoidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InvoiceVoidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetOpenTransCompletedEventHandler(object sender, GetOpenTransCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOpenTransCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOpenTransCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetPrintedCompletedEventHandler(object sender, SetPrintedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPrintedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPrintedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void IsKnownMicrCompletedEventHandler(object sender, IsKnownMicrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsKnownMicrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsKnownMicrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetMicrInfoCompletedEventHandler(object sender, GetMicrInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMicrInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMicrInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ClearTransCompletedEventHandler(object sender, ClearTransCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearTransCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClearTransCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591