@model TCF.Channel.Zeo.Web.Models.ShoppingCartDetail
@{
    string LoadToCardEnable;
    string cssClass;

    bool withDrawTextBoxStatus = true;
    bool isGPR = Convert.ToBoolean(Model.CardHolder);

    bool isDisableWithdrawCNP = Convert.ToBoolean(Session["DisableWithdrawCNP"]);
    bool isCardPresent = Model.CustomerSession.CardPresent;

    if (isDisableWithdrawCNP)
    {
        if (isCardPresent)
        {
            withDrawTextBoxStatus = false;
        }
        else
        {
            withDrawTextBoxStatus = true;
        }
    }
    else
    {
        if (isCardPresent)
        {
            withDrawTextBoxStatus = false;
        }
        else
        {
            withDrawTextBoxStatus = false;
        }
    }

    if (ViewBag.cardStatus != null)
    {
        int cardStatus = ViewBag.cardStatus;
        if ((((isGPR == true) && (isCardPresent == false)) || ((isGPR == true) && (isCardPresent == true))) && (cardStatus == 8 || cardStatus == 9 || cardStatus == 10 || cardStatus == 100))
        {
            withDrawTextBoxStatus = true;
        }
    }
}

@if (isGPR && Model.Items.FindIndex(m => m.Product == "GPRActivation") < 0)
 {
    <table class="margin_left_4">
        <tr>
            <td class="cart_row" id="lblLoadToCard">
                <span>Load to Card $ <input type="hidden" name="MinimumLoadAmount" id="MinimumLoadAmount" value="@Model.MinimumLoadAmount" /></span>
            </td>

            <td>
                @Html.TextBoxFor(c => c.LoadToCard, Model.LoadToCard.ToString("0.00"), new { @class = "cart_input", onblur = "changeAmountPrecision(this)", @maxlength = "8" })
            </td>

            <td class="shpng_cart_lbl_font">
                <span id="minIntiLoadAmt" class="color_black">Min. initial load amount = $@Model.MinimumLoadAmount.ToString("0.00")</span>
                <span id="minIntiLoadAmtError" class="color_black hide">
                    @*Load amount should be greater than the min. initial load amount of $@Model.MinimumLoadAmount.ToString("0.00")*@
                    Min. initial load amount = $@Model.MinimumLoadAmount.ToString("0.00")
                </span>
                <input type="hidden" name="LoadFee" value="@Model.LoadFee" />
                @{double LoadFee = Convert.ToDouble(Model.LoadFee);
                    if (LoadFee > 0)
                    {
                        <span id="LoadFee" class="color_black">
                            $@Model.LoadFee.ToString("0.00") fee will be
                            deducted from load amount
                        </span>
                    }
                }
            </td>
        </tr>
        <tr>
            <td class="cart_checkout_card_err_msg" id="LoadTOCardErrMsg"></td>
            <td>
                @Html.ValidationMessageFor(c => c.LoadToCard)
            </td>
        </tr>
    </table>
    <input type="hidden" name="WithdrawFee" value="@Model.WithdrawFee" />
         if (Model.Items.FindAll(c => c.Product.ToLower() == TCF.Channel.Zeo.Web.Common.ProductType.GPRActivation.ToString().ToLower()).Count == 0 && isDisableWithdrawCNP == false && isCardPresent == true)
         {
             <table class="margin_left_5">
                 <tr>
                     <td class="shpng_withdraw_lbl shpng_withdraw_lbl_nonIe">
                         Withdraw from Card $
                     </td>
                     <td>
                        @if (withDrawTextBoxStatus)
                        {
                            @Html.TextBoxFor(c => c.WithdrawFromCard, Model.WithdrawFromCard.ToString("0.00"), new { @class = "cart_input", readOnly = false, disabled = "disabled", onblur = "changeAmountPrecision(this)" })                             
                        }
                        else
                        {
                            @Html.TextBoxFor(c => c.WithdrawFromCard, Model.WithdrawFromCard.ToString("0.00"), new { @class = "cart_input", onblur = "changeAmountPrecision(this)" })
                        }
                     </td> 
                     <td class="WithdrawFee cart_checkout_withdraw_fee">
                         @{ double WithdrawFee = Convert.ToDouble(Model.WithdrawFee);
                             if (WithdrawFee > 0)
                             {
                                 <span id="WithdrawFee" class="WithdrawFee">
                                     $@Model.WithdrawFee.ToString("0.00") fee
                                     will be deducted from load amount
                                 </span>
                             }
                         }
                     </td>
                 </tr>
                 <tr>
                     <td class="cart_checkout_withdraw_fromcard"></td>
                     <td>
                         @Html.ValidationMessageFor(c => c.WithdrawFromCard)
                     </td>
                 </tr>
             </table>
         }
         else
         {         
            <table class="margin_left_5">
                <tr>
                    <td class="shpng_withdraw_lbl shpng_withdraw_lbl_nonIe">
                        <span>Withdraw from Card $</span>
                    </td>
                    <td>
                       @if (withDrawTextBoxStatus)
                       {
                          @Html.TextBoxFor(c => c.WithdrawFromCard, Model.WithdrawFromCard.ToString("0.00"), new { @class = "cart_input", readOnly = false, disabled = "disabled", onblur = "changeAmountPrecision(this)" })                         
                           <input type="button" value="Swipe" class="anc_link_btn green_input withdraw_swipe" id="withdrawSwipe"/>
                       }
                       else
                       {                         
                          @Html.TextBoxFor(c => c.WithdrawFromCard, Model.WithdrawFromCard.ToString("0.00"), new { @class = "cart_input", onblur = "changeAmountPrecision(this)" })                         
                       }                    
                    </td>
                    <td class="WithdrawFee cart_checkout_withdraw_fee">
                        @{ double WithdrawFee = Convert.ToDouble(Model.WithdrawFee);
                            if (WithdrawFee > 0)
                            {
                                <span id="WithdrawFee" class="WithdrawFee">
                                    $@Model.WithdrawFee.ToString("0.00") fee
                                    will be added to the Withdraw amount
                                </span>
                            }
                        }
                    </td>

                </tr>
                <tr>
                    <td class="cart_checkout_withdraw_fromcard"></td>
                    <td>
                        @Html.ValidationMessageFor(c => c.WithdrawFromCard)
                    </td>
                </tr>
            </table>
         }
 }