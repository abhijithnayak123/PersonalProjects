@model TCF.Channel.Zeo.Web.Models.SendMoney
@{
	ViewBag.Title = "SendMoneyConfirm";
}
<script src="@Url.Content("~/Scripts/SendMoney/SendMoneyDetails.js?version=" + @DateTime.Now.Ticks)" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/SendMoney/SendMoneyConfirm.js?version=" + @DateTime.Now.Ticks)" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/SendMoney/CancelMoneytransfer.js?version=" + @DateTime.Now.Ticks)" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Common/lib/helper.js?version=" + @DateTime.Now.Ticks)" type="text/javascript"></script>

<!--Author : Abhijith -->
<!--Bug : AL-2014 -->
<!--Description : Using this JS file only for Dodd Frank because if Dodd Frank is not printed we need to show the 
	custom popup - "Retry & Continue" and other functions use it from common printing logic file. -->
<!-- Starts Here -->
<script src="@Url.Content("~/Scripts/SendMoney/DoddFrankPrint.js?version=" + @DateTime.Now.Ticks)" type="text/javascript"></script>
<!-- Ends Here -->

<script src="@Url.Content("~/Scripts/ShoppingCart/PrintReceipt.js?version=" + @DateTime.Now.Ticks)" type="text/javascript"></script>

<script type="text/javascript">
	var sendMoneyDetTestQuestion = '@Model.TestQuestionOption';
	var sendMoneyDetCountry = '@Model.Country';
	var transactionId = '@Model.TransactionId';
	var sendMoneyDetIsAmountValid = '@ViewBag.isAmountValid';
	var isTnCForcePrintRequired = '@ViewBag.isTnCForcePrintRequired';
	var lpmtHasError = '@Model.HasLPMTError';

	//Author : Abhijith
	//Bug : AL-2014
	//Description : Adding a exception pop up if Dodd frank receipt not printed.
	//Starts Here
	var DoddFrankExceptionMsgPopupURL = '@Url.Action("DisplayDoddFrankMessage", "SendMoney")';
	//Ends Here
    var isFormPost = true;

	$(document).ready(function () {

		$(document).click(function (event) {
			var focused = document.activeElement;
			if (focused) {
                if (!((focused.id == "ConsumerProtectionMessage") || (focused.id == "ProvidedTermsandConditonsMessage") || (focused.id == "DoddFrankDisclosure") || (focused.id == "DomesticPreDisclosure") || (focused.id == "btnSubmit") || (focused.id == "submitLink") || (focused.innerText == "Logout") || (focused.innerText == "Home") || (focused.innerText == "Change Password") || (focused.innerText == "My Profile") || (focused.innerText == "My Reports")))
					event.preventDefault();
			}
		});
	});
</script>
@using (Html.BeginForm("SendMoneyConfirm", "SendMoney", FormMethod.Post, new { Id = "frmSendMoenyConfirm" }))
{
	<input type ="hidden" id = "DoddFrankPrintError" value = "@TCF.Channel.Zeo.Web.App_GlobalResources.Nexxo.PrintDoddFrankError" />
	
	<div class="send_money_wrap">
		<div>
			<ul class="page_head product_head">
				<li>Send Money Confirm</li>
			</ul>
		</div>
		<br />
		@Html.Partial("_partialSpinner")
		<div>
			@if (@ViewBag.ErrorMessage != null)
			{
				<div id="divErrorMsg">
					<div class="field-validation-error error_txt">@ViewBag.ErrorMessage</div>
				</div>
			}
		</div>
		<input type="hidden" id="PanelStatus" value="1" />
		<div class="info_wrap">
			<ul>
				<li class="rec_info">Receiver’s Information</li>
				<li class="trn_info"> Transfer Information </li>
			</ul>
		</div>
		<div class="rec_info_wrap">
			<div class="table_wrap">
				<table>
					<tr>
						<td> @Html.DisplayFor(model => model.FirstName) @Html.DisplayFor(model => model.LastName) @Html.DisplayFor(model => model.SecondLastName) </td>
					</tr>
					@{
						if (!string.IsNullOrWhiteSpace(Model.PickUpLocation))
						{
							<tr>
								<td> @Html.DisplayFor(model => model.PickUpLocation) </td>
							</tr>
						}
						if (!string.IsNullOrWhiteSpace(Model.ReceiverCityName))
						{

							<tr>
								<td> @Html.DisplayFor(model => model.ReceiverCityName) </td>
							</tr>
						}
						if (!string.IsNullOrWhiteSpace(Model.StateProvince))
						{
							<tr>
								<td> @Html.DisplayFor(model => model.StateProvince) </td>
							</tr>
						}
					}
				</table>
                    <div class="bold row2">Transfer Destination</div>
                   <table>
					<tr>
						<td> @Html.DisplayFor(model => model.PickupCountry) </td>
					</tr>
					<tr>
						<td> @Html.DisplayFor(model => model.PickupState) </td>
					</tr>
					<tr>
						<td> @Html.DisplayFor(model => model.PickupCity) </td>
					</tr>
				</table>
                </div>
			<div>
				<table>
					<tr>
						<td class="label"> Delivery Method: </td>
						<td> @Html.DisplayFor(model => model.DeliveryMethodDesc) </td>
					</tr>
					<tr>
						<td class="label"> Delivery Option: </td>
						<td> @Html.DisplayFor(model => model.DeliveryOptionDesc) </td>
					</tr>
					<tr>
						<td class="label"> Transfer Amount: </td>
						<td> <span>$</span>@Html.DisplayFor(model => model.TransferAmount) <span>USD</span> </td>
					</tr>
					<tr>
						<td class="label">Fee:</td>
						<td>
							<span>$</span>@Html.DisplayFor(model => model.OriginalFee) <span>USD</span>
						</td>
					</tr>
					<tr>
						<td class="label">Promo Discount: </td>
						<td>
							@if (!string.IsNullOrEmpty(Model.CouponPromoCode))
							{
								<span>$ -</span>@Html.DisplayFor(model => model.PromoDiscount) <span>USD</span>
							}
							else
							{
								<span>NA</span>
							}
						</td>
					</tr>
					<tr>
						<td class="label">Promo Code / Coupon:</td>
						<td>
							@if (!string.IsNullOrEmpty(Model.CouponPromoCode))
							{
								@Html.DisplayFor(model => model.CouponPromoCode)}
							 else
							 {
								<span>NA</span>
							 }
						</td>
					</tr>
					<tr>
						<td class="label">Net Fee:</td>
						<td>
							<span>$</span>@Html.DisplayFor(model => model.TransferFee) <span>USD</span>
						</td>
					</tr>
					<tr>
						<td class="label">Transfer Tax:</td>
						<td>
						@if (Model.TransferTax != 0)
							{
								<span>$</span>@Html.DisplayFor(model => model.TransferTax) <span>USD</span>
							}
							 else
							 {
								<span>NA</span>
							 }
						</td>
					</tr>
					<tr>
						<td class="label">Total Amount:</td>
						<td>
							<span>$</span>@Html.DisplayFor(model => model.Amount) <span>USD</span>
						</td>
					</tr>
				</table>
			</div>
		</div>
		<div class="line_Sep">
		</div>


		<div class="cond_msg_wrap">
			<table>
				<tr>
					<td>
						@Html.CheckBoxFor(model => model.ConsumerProtectionMessage)
						@Html.LabelFor(model => model.ConsumerProtectionMessage, new { @class = "bold" })
					</td>
				</tr>
				<tr>
					<td>
						@Html.CheckBoxFor(model => model.ProvidedTermsandConditonsMessage)
						<span class="bold">@TCF.Channel.Zeo.Web.App_GlobalResources.Nexxo.ProvidedTermsandConditonsMessage</span>
						<span class="w_union_txt">@TCF.Channel.Zeo.Web.App_GlobalResources.Nexxo.ProvidedTermsandConditonsMessageCont</span>
					</td>
				</tr>
				@if (Model.isDomesticTransferVal == "false")
				{
					<tr>
						<td>
							@Html.CheckBoxFor(model => model.DoddFrankDisclosure)
							@Html.LabelFor(model => model.DoddFrankDisclosure, new { @class = "bold" })
						</td>
					</tr>
                }
                else
                {
                     <tr>
                         <td>
                             @Html.CheckBoxFor(model => model.DomesticPreDisclosure)
                             @Html.LabelFor(model => model.DomesticPreDisclosure, new { @class = "bold" })
                         </td>
                     </tr>
                }
            </table>
			<div class="send_many_btn_shift">
				<ul>
					<li class="row_width30">
						@Html.ActionLink("Cancel", "CancelSendMoneyDetails", "SendMoney", new { id = Model.TransactionId }, new { @class = "anc_link_btn cancelMoneyTransfer red_btn", id = Model.TransactionId, name = "SendMoneyConfirm" })
					</li>
					<li class="SrchButtonWidth">
						<input type="submit" id="btnSubmit" value="Next" />
					</li>
				</ul>
			</div>
		</div>

        </div>

	@Html.TextBoxFor(model => model.FirstName, new { style = "display:none" })
	@Html.TextBoxFor(model => model.LastName, new { style = "display:none" })
	@Html.TextBoxFor(model => model.DeliveryMethod, new { style = "display:none" })
	@Html.TextBoxFor(model => model.DeliveryOptions, new { style = "display:none" })
	@Html.TextBoxFor(model => model.Amount, new { style = "display:none" })
	@Html.TextBoxFor(model => model.TransferFee, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PromoDiscount, new { style = "display:none" })
	@Html.TextBoxFor(model => model.TransferAmount, new { style = "display:none" })
	@Html.TextBoxFor(model => model.ExchangeRateConversion, new { style = "display:none" })
	@Html.TextBoxFor(model => model.DestinationAmount, new { style = "display:none" })
	@Html.TextBoxFor(model => model.OtherFees, new { style = "display:none" })
	@Html.TextBoxFor(model => model.TotalToRecipient, new { style = "display:none" })
	@Html.TextBoxFor(model => model.TestQuestion, new { style = "display:none" })
	@Html.TextBoxFor(model => model.TestAnswer, new { style = "display:none" })
	@Html.TextBoxFor(model => model.ReceiverID, new { style = "display:none" })
	@Html.TextBoxFor(model => model.TransactionId, new { style = "display:none" })
	@Html.TextBoxFor(model => model.ExchangeRate, new { style = "display:none" })
	@Html.TextBoxFor(model => model.TestQuestionOption, new { style = "display:none" })
	@Html.TextBoxFor(model => model.CurrencyType, new { style = "display:none" })
	@Html.TextBoxFor(model => model.isDomesticTransfer, new { style = "display:none" })
	@Html.TextBoxFor(model => model.Country, new { style = "display:none" })
	@Html.TextBoxFor(model => model.City, new { style = "display:none" })
	@Html.TextBoxFor(model => model.StateProvince, new { style = "display:none" })
	@Html.TextBoxFor(model => model.CountryCode, new { style = "display:none" })
	@Html.TextBoxFor(model => model.StateProvinceCode, new { style = "display:none" })
	@Html.TextBoxFor(model => model.CityID, new { style = "display:none" })
	@Html.TextBoxFor(model => model.isDomesticTransferVal, new { style = "display:none" })
	@Html.TextBoxFor(model => model.TestQuestionOption, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PromoDiscount, new { style = "display:none" })
	@Html.TextBoxFor(model => model.DestinationAmountFromFeeEnquiry, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PickUpLocation, new { style = "display:none" })
	@Html.TextBoxFor(model => model.CityName, new { style = "display:none" })
	@Html.TextBoxFor(model => model.DeliveryMethodDesc, new { style = "display:none" })
	@Html.TextBoxFor(model => model.DeliveryOptionDesc, new { style = "display:none" })
	@Html.TextBoxFor(model => model.TransactionId, new { style = "display:none" })
	@Html.TextBoxFor(model => model.IsFixedOnSend, new { style = "display:none" })
	@Html.TextBoxFor(model => model.CouponPromoCode, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PromoCodeDescription, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PromoName, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PromoMessage, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PromotionError, new { style = "display:none" })
	@Html.TextBoxFor(model => model.IsFixedOnSend, new { style = "display:none" })
	@Html.TextBoxFor(model => model.MessageFee, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PersonalMessage, new { style = "display:none" })
	@Html.TextBoxFor(model => model.OriginalFee, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PickupCountry, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PickupState, new { style = "display:none" })
	@Html.TextBoxFor(model => model.PickupCity, new { style = "display:none" })
	@Html.TextBoxFor(model => model.TransferTax, new { style = "display:none" })
}
