@model MGI.Channel.DMS.Web.Models.MoneyTransferTransactionDetailsViewModel
@{
    Layout = null;
}
<script src="@Url.Content("~/Scripts/Common/lib/spin.js")" type="text/javascript"></script>
@*<script src="@Url.Content("~/Scripts/MoneyOrder/MoneyOrder.js")" type="text/javascript"></script>*@
@Html.Partial("_partialSpinner")
<script type="text/javascript">
	var PayStatus = "";

    $(document).ready(function () {
    $("#txtReasonForRefund").keydown(function (event) { 
        $('#divRFRefundLengthValidation').addClass('hide');
            var refundReason = $("#txtReasonForRefund").val();
         if (refundReason.length > 38) { 
             $("#txtReasonForRefund").val(refundReason.substring(0, 38)); 
             return false; 
             } 
          })
    
        $('#btnRefund').click(function () {
        
            showSpinner();
            $('#divFNameValidation').hide();
            $('#divLNameValidation').hide();
            $('#divSecLNameValidation').hide();
            $('#divTestQuestValidation').hide();
            $('#divTestAnswerValidation').hide();

           
            $("#divRefund").css("display", "block");
            $("#divModify").css("display", "none");
            
             var MTCN = '@Model.MTCN';

            $.ajax({
                url: '@Url.Action("GetRefundStatus", "TransactionHistory")' + "?MTCN=" + MTCN,
                type: 'POST',
                datatype: 'json',
                success: function (jsonData) {
                    if (jsonData.success) {
                    $("#lblRefundStatus").html(jsonData.tranDetails.RefundStatusDesc);
					
                    var RefundCategory = $('#RefundCategory');

                    if (RefundCategory.length > 0)
						RefundCategory.empty();
                    var items = '';
                    $.each(jsonData.tranDetails.RefundCategory, function (i, refundCategory) {
                        if (refundCategory.Text != undefined) {
                                items += '<option value="' + refundCategory.Value + '">' + refundCategory.Text + '</option>';
                        }
                        else {
                            items = '<option value="">Select</option>';
                        }
                    });
                    $('#RefundStatus').val(jsonData.tranDetails.RefundStatus);
					$('#RefundCategory').html(items);
                    hideSpinner();
                    }
                  else {
                        hideSpinner();
                        showExceptionPopupMsg(jsonData.data);
                    }
                    
                },
                error: function (err) {
                    showExceptionPopupMsg(err);
                    hideSpinner();
                }
            });

        });

        $('#btnModify').click(function () {
            showSpinner();
            var MTCN = '@Model.MTCN';

            $.ajax({
                url: '@Url.Action("GetTransactionForModify", "TransactionHistory")' + "?MTCN=" + MTCN,
                type: 'POST',
                datatype: 'json',
                success: function (jsonData) {
                    if (jsonData.success) {
                    
                        $("#txtFirstName").val(jsonData.FirstName);
                        $("#txtLastName").val(jsonData.LastName);
                        $("#txtSecLastName").val(jsonData.SecondLastName);
                        $("#txtModifyTestQuestion").val(jsonData.TestQuestion);
                        $("#txtModifyTestAnswer").val(jsonData.TestAnswer);
                        
                      if ('@Model.TestQuestionAvailable'=="Yes") {
                          $('#txtModifyTestQuestion').attr("disabled", true);
                        $('#txtModifyTestAnswer').attr("disabled", true);
                      }
                        hideSpinner();

                    }
                    else {
                        hideSpinner();
                        showExceptionPopupMsg(jsonData.data);
                    }
                },
                error: function (err) {
                    showExceptionPopupMsg(err);
                    hideSpinner();
                }
            });
            $("#divRefund").css("display", "none");
            $("#divModify").css("display", "block");
        });

    	if ('@Session["ClosedCustomerProfile"]' != null && '@Session["ClosedCustomerProfile"]' == "true") {
    		$("#btnRefund").css("display", "none");
    		$("#btnModify").css("display", "none");
    	}
    });

    $(document).ready(function () {
	 $('#chkRefundAgree').click(function () 
	 {
		 if($("#chkRefundAgree").is(':checked'))
		 { 
			$('#btnRefSubmit').removeAttr('disabled');
			$('#btnRefSubmit').removeClass('opaqueViewCart');

		 }
		 else
		 {
			$('#btnRefSubmit').addClass('opaqueViewCart');
			$('#btnRefSubmit').attr('disabled', 'disabled');
		 }
	 });
        $('#btnRefSubmit').click(function () {
         if ($("#txtReasonForRefund").val().length > 38)
         {
         $('#divRFRefundLengthValidation').removeClass('hide');
         return false;
         }
         else
         {
          $('# divRFRefundLengthValidation').addClass('hide');
         }
            $('#divReasonForRefundValidation').hide();
            $('#divRFRefundEmptyValidation').hide();
              $('#divRefundCatValidation').hide();

            var ReasonForRefund = $('#txtReasonForRefund').val();
            var RefundCategory = $('#RefundCategory').val();
			var SpecialCharRegex = /^[0-9a-zA-Z',\-\s]*$/;
			if(RefundCategory=="") {
               $('#divRefundCatValidation').show();
                return false;
            }
			if (!SpecialCharRegex.test(ReasonForRefund)) {
                $('#divReasonForRefundValidation').show();
                return false;
            }
            if(ReasonForRefund=="") {
                 $('#divRFRefundEmptyValidation').show();
                return false;
            }
           
            showSpinner();
            var dataValues = {
            	TransactionId: '@Model.TransactionId',
            	ConfirmationNumber: '@Model.MTCN',
                CategoryCode: $('#RefundCategory').val(),
                CategoryDescription: $("#RefundCategory option:selected").text(),
                Reason: $('#txtReasonForRefund').val(),				
                RefundStatus: $('#RefundStatus').val()
            };
            $.ajax({
                url: '@Url.Action("SendMoneyRefundSubmit", "TransactionHistory")',
                data: dataValues,
                type: 'POST',
                datatype: 'json',
                success: function (jsonData) {                
                    if (jsonData.success) {                        
                        SendMoneyRefundSuccess();
                    }
                    else {
                          hideSpinner();
                          showExceptionPopupMsg(jsonData.data);
                    }
                },
                error: function (err) {
                      hideSpinner();
                    showExceptionPopupMsg(err);
                    
                }
            });
        });
    });

    $(document).ready(function () {
	 $('#chkModifyAgree').click(function () 
	 {	 	 
		 if($("#chkModifyAgree").is(':checked'))
		 {
			$('#btnModifySubmit').removeAttr('disabled');
			$('#btnModifySubmit').removeClass('opaqueViewCart');

		 }
		 else
		 {	  
		    $('#btnModifySubmit').addClass('opaqueViewCart');
			$('#btnModifySubmit').attr('disabled', 'disabled');
		 }
	 });
        $('#btnModifySubmit').click(function () {
            $('#divFNameValidation').hide();
            $('#divLNameValidation').hide();
            $('#divSecLNameValidation').hide();
            $('#divTestQuestValidation').hide();
            $('#divTestAnswerValidation').hide();

            var FName = $('#txtFirstName').val();
            var LName = $('#txtLastName').val();
            var SecLName = $('#txtSecLastName').val();
            var TestQuest = $('#txtModifyTestQuestion').val();
            var TestAnsw = $('#txtModifyTestAnswer').val();

            var Alphareg = /^[a-zA-Z ]*$/;
            var SpecialCharRegex = /^[0-9a-zA-Z',\-\s]*$/;

            if (!Alphareg.test(FName)) {
                $('#divFNameValidation').show();
                return false;
            }
            if (!Alphareg.test(LName)) {
                $('#divLNameValidation').show();
                return false;
            }
            if (!Alphareg.test(SecLName)) {
                $('#divSecLNameValidation').show();
                return false;
            }
            if (!SpecialCharRegex.test(TestQuest)) {
                $('#divTestQuestValidation').show();
                return false;
            }
            if (!SpecialCharRegex.test(TestAnsw)) {
                $('#divTestAnswerValidation').show();
                return false;
            }

            var dataValues = {
            	TransactionId: '@Model.TransactionId',
            	ConfirmationNumber: '@Model.MTCN',
                FirstName: $('#txtFirstName').val(),
                LastName: $('#txtLastName').val(),
                SecondLastName: $('#txtSecLastName').val(),
                TestQuestion: $('#txtModifyTestQuestion').val(),
                TestAnswer: $('#txtModifyTestAnswer').val(),
                RefundStatus: $('#RefundStatus').val()
            };
            $.ajax({

                url: '@Url.Action("SendMoneyModifySubmit", "TransactionHistory")',
                data: dataValues,
                type: 'POST',
                datatype: 'json',
                success: function (jsonData) {
                    if (jsonData.success) {
                        _spinner();
                        $('#divPrepaid').dialog('destroy').remove();
                        RedirectToUrl('@Url.Action("SendMoneyConfirm", "TransactionHistory")');
						'@Url.Action("SendMoneyConfirm", "TransactionHistory")'
                    } else {
                        showExceptionPopupMsg(jsonData.data);
                        hideSpinner();

                    }

                },
                error: function (err) {
                    showExceptionPopupMsg(err);
                }
            });
        });
    });
    function SendMoneyRefundFail() {

        jQuery.ajaxSetup({ cache: false });

        //     $('#divPrepaid').dialog('destroy').remove();
        var $MoneyTransferRefundFail = $("<div id='MoneyTransferRefundFailPopup'></div>");
        $MoneyTransferRefundFail.empty();
        $MoneyTransferRefundFail.dialog({
            autoOpen: false,
            title: "Message",
            width: 430,
            draggable: false,
            modal: true,
            minHeight: 170,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) {
                var URL = '@Url.Action("SendMoneyRefundFail", "TransactionHistory")';
                $MoneyTransferRefundFail.load(URL, function () {
                    $('#CancelTransaction').focus();
                });
            },
            error: function (err) {
                showExceptionPopupMsg(err);
            }
        });
        $MoneyTransferRefundFail.dialog("open");
    }


    function SendMoneyRefundSuccess() {
        jQuery.ajaxSetup({ cache: false });
        if ($('#txtReasonForRefund').val() == '') {
            $('#divCheckNumberValidation').show();
            return false;
        }

        var MTCN = '@Model.MTCN';
        $('#divPrepaid').dialog('destroy').remove();
        var $MoneyTransferRefundSuccess = $("<div id='MoneyTransferRefundSuccessPopup'></div>");
        $MoneyTransferRefundSuccess.empty();
        $MoneyTransferRefundSuccess.dialog({
            autoOpen: false,
            title: "Message",
            width: 430,
            draggable: false,
            modal: true,
            minHeight: 170,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) {
                var URL = '@Url.Action("SendMoneyRefundSuccess", "TransactionHistory")' + "?MTCN=" + MTCN;
                $MoneyTransferRefundSuccess.load(URL, function () {
                    $('#CancelTransaction').focus();
                });
            },
            error: function (err) {
                showExceptionPopupMsg(err);
            }
        });
        $MoneyTransferRefundSuccess.dialog("open");
    }
    function SendMoneyModifySuccess() {
        jQuery.ajaxSetup({ cache: false });
        var MTCN = '@Model.MTCN';
        $('#divPrepaid').dialog('destroy').remove();
        var $SendMoneyCancelSuccess = $("<div id='SendMoneyModifySuccessPopup'></div>");
        $SendMoneyCancelSuccess.empty();
        $SendMoneyCancelSuccess.dialog({
            autoOpen: false,
            title: "Message",
            width: 330,
            draggable: false,
            modal: true,
            minHeight: 170,
            resizable: false,
            closeOnEscape: false,
            open: function (event, ui) {
                var URL = '@Url.Action("SendMoneyModifySuccess", "TransactionHistory")' + "?MTCN=" + MTCN;
                $SendMoneyCancelSuccess.load(URL, function () {
                    $('#CancelTransaction').focus();
                });
            },
            error: function (err) {
                showExceptionPopupMsg(err);
            }
        });
        $SendMoneyCancelSuccess.dialog("open");
    }
</script>
<div class="trxpopup_provider_div">
    <div class="trxpopup_row">
        @Html.LabelFor(model => model.MTCN, new { @class = "trxpopup_label" })
        <span class="trxpopup_label">@Html.DisplayFor(model => model.MTCN)</span>
    </div>
    <div class="trxpopup_row">
        @Html.LabelFor(model => model.TestQuestion, new { @class = "trxpopup_label" })
        <span class="trxpopup_label">@Html.DisplayFor(model => model.TestQuestion)</span>
    </div>
    <div class="trxpopup_row">
        @Html.LabelFor(model => model.TestAnswer, new { @class = "trxpopup_label" })
        <span class="trxpopup_label">@Html.DisplayFor(model => model.TestAnswer)</span>
    </div>
    @if (@ViewBag.IsAgentSession == null || @ViewBag.IsAgentSession == false)
    {
        
        <div>
            @if (Model.isAddedtoShoppingCart)
            {
                <label class="row_label_txt_Status">
                    @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.SendMoneyModifyAddedToShoppingCart
                </label>
                
            }
            else if (Model.TransactionSubType == "3")
            {
                <label class="row_label_txt_Status">
                    @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.SendMoneyRefundTransactionMSG
                </label>
                
            }
            else if (Model.PayStatus == "W/C")
            {
                <div>
                    @if (Model.TransactionSubType == "1")
                    {
                        <label class="row_label_txt_Status">
                            @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.SendMoneyCancelledTransaction
                        </label>
                    }
                    else if ((Model.TransactionSubType == "2" && Model.isModifiedOrRefunded == true) || (Model.TransactionSubType == null && Model.isModifiedOrRefunded == true))
                    {
                        <label class="row_label_txt_Status">
                            @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.SendMoneyAlreadyModified
                        </label>
                    }
                    else if ((Model.TransactionSubType == "2" && Model.isModifiedOrRefunded == false) ||
                             Model.TransactionSubType == null)
                    {
                        <label class="row_label_txt_Status">
                            @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.SendMoneyModifiedTrxMSG
                        </label>
						if (Session["CustomerSession"] != null)
						{
							if (Session["UserRoleId"] != null)
							{
								if (Convert.ToInt32((Session["UserRoleId"])) != (int)UserRoles.ComplianceManager && Convert.ToInt32((Session["UserRoleId"])) != (int)UserRoles.Tech)
								{
								<div class="trxpopup_topspace_row" style="padding-right: 34%;">
									<input type="button" value="Refund" class="orange_btn" id="btnRefund" />
									<input type="button" value="Modify" class="green_input" id="btnModify" />
								</div>
								}
							}
						}
                    }
                </div>
            }
	    else if (Model.PayStatus == "HOLD")
            {
                <label class="row_label_txt_Status">
                    @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.SendMoneyModifyHOLD
                </label>
               
                
            }
            else if (Model.PayStatus == "PAID")
            {
                <div>
                    @if (Model.TransactionSubType == "1")
                    {
                        <label class="row_label_txt_Status">
                            @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.SendMoneyCancelledTransaction
                        </label>
                    }
                    else if (Model.TransactionSubType == "2" && Model.isModifiedOrRefunded == false)//For paid with modify
                    {
                        <label class="row_label_txt_Status">
                            @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.SendMoneyModifyPAID
                        </label>
                    }
                    else if (Model.TransactionSubType == "2" || Model.TransactionSubType == "3" || (Model.TransactionSubType == null && Model.isModifiedOrRefunded == true))
                    {
                        <label class="row_label_txt_Status">
                            @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.SendMoneyAlreadyModified
                        </label>
                    }
                    else
                    { <label class="row_label_txt_Status">
                        @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.SendMoneyModifyPAID
                    </label>}
                </div>
            }
            else if (String.IsNullOrWhiteSpace(Model.PayStatus))
            {
                <label class="row_label_txt_Status">
                    @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.PayRequestStatusCode_Null
                </label>
            }
            else if (string.IsNullOrWhiteSpace(Model.PayStatusCodeMessage))
            {
                <label class="row_label_txt_Status">
                    @MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.PayRequestStatusCode.Replace("XXX", Model.PayStatus)
                </label>
                if (Session["CustomerSession"] != null)
                {
					if (Session["UserRoleId"] != null)
					{
						if (Convert.ToInt32((Session["UserRoleId"])) != (int)UserRoles.ComplianceManager && Convert.ToInt32((Session["UserRoleId"])) != (int)UserRoles.Tech)
						{
						<div class="trxpopup_topspace_row" style="padding-right: 34%;">
							<input type="button" value="Refund" class="orange_btn" id="btnRefund" />
							<input type="button" value="Modify" class="green_input" id="btnModify" />
						</div>
						}
					}
                }
            }
            else
            {
                <label class="row_label_txt_Status">
                    @Model.PayStatusCodeMessage
                </label>
                if (Session["CustomerSession"] != null)
                {
					if (Session["UserRoleId"] != null)
					{
						if (Convert.ToInt32((Session["UserRoleId"])) != (int)UserRoles.ComplianceManager && Convert.ToInt32((Session["UserRoleId"])) != (int)UserRoles.Tech)
						{
						<div class="trxpopup_topspace_row" style="padding-right: 34%;">
							<input type="button" value="Refund" class="orange_btn" id="btnRefund" />
							<input type="button" value="Modify" class="green_input" id="btnModify" />
						</div>
						}
					}
                }
            }
        </div>
        <div id="divRefund" class="trxpopup_row hide">
            <div class="trxpopup_row clear_both">
                <div>
                    @Html.LabelFor(model => model.RefundStatus, new { @class = "row_label_txt send_mny_trns_refund_status" })
                    <label class="trxpopup_label" id="lblRefundStatus">
                    </label>
                </div>
            </div>
            @if (Model.RefundCategory != null)
            {
                <div class="trxpopup_row clear_both">
                    <div>
                        @Html.LabelFor(model => model.RefundCategory, new { @class = "row_label_txt" })
                        @Html.DropDownListFor(model => model.RefundCategory, null, new { @class = "dropdown_box" })
                    </div>
                    <div class="error_align_left hide" id="divRefundCatValidation">
                        <p class="error_txt">@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.RefundCategoryError</p>
                    </div>
                </div>
            }
            <div class="trxpopup_row clear_both">
                <div>
                    @Html.LabelFor(model => model.ReasonforRefund, new { @class = "row_label_txt" })
                    <span class="positionrelative mandatory margin_left_2 margin_top_1 float_left">*</span>
                    @Html.TextAreaFor(model => model.ReasonforRefund, 2, 44, new { @maxlength = "39", id = "txtReasonForRefund", @class = "left_zero_three" })
                </div>
                <div class="error_align_left hide" id="divReasonForRefundValidation">
                    <p class="error_txt">@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.MTTestAnswerError</p>
                </div>
                <div class="error_align_left hide" id="divRFRefundEmptyValidation">
                    <p class="error_txt">@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.ReasonForRefundError</p>
                </div>
                <div class="error_align_left hide" id="divRFRefundLengthValidation">
                    <p class="error_txt">@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.RefundMaxLength</p>
                </div>
            </div>
	    @if (Model.isCashierState)
	       {
		 <div class="dyntext">
		  <span class="bold">@Html.CheckBoxFor(model => model.isAgentAgree, new { @class = "trans_history_ldl trans_his_sel", id = "chkRefundAgree" })
		    I, @Html.DisplayFor(model => model.AgentFirstName)<span> @Html.DisplayFor(model => model.AgentLastName),</span>		 
		    certify this is my true and correct name, I am AML/CFT trained and will comply with all laws in processing transactions.</span>
		</div>
		<div class="SendMoneyModifyButtonAlign">
		 <span><input type="button" value="Submit" class="green_input opaqueViewCart" disabled="disabled" id="btnRefSubmit" /></span>
		</div>
	       }
	       else
		{
                 <div class="SendMoneyModifyButtonAlign">
                     <span><input type="button" value="Submit" class="green_input" id="btnRefSubmit" /></span>
		 </div>
		}
        </div>
        <div id="divModify" class="trxpopup_row hide">
            <div class="row float_left">
                <div class="send_mny_trns_firstname_wrap_popup">
                    <label class="row_label_txt send_money_txt row_width50">
                        @Html.Label(@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.FirstName)
                    </label>
                    @Html.TextBoxFor(model => model.FirstName, null, new { @class = "input_box", id = "txtFirstName", @maxlength = 20 })
                </div>
                <div class="send_mny_trns_lastname_wrap">
                    <label class="row_label_txt send_money_Scn_txt">
                        @Html.Label(@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.LastName)</label>
                    @Html.TextBoxFor(model => model.LastName, null, new { @class = "input_box", id = "txtLastName", @maxlength = 30 })
                </div>
                <div class="error_align_left hide" id="divFNameValidation">
                    <p class="error_txt">@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.MTFirstNameError</p>
                </div>
                <div class="error_align_left hide padding_left_250" id="divLNameValidation">
                    <p class="error_txt">@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.MTLastNameError</p>
                </div>
            </div>
            <div class="trxpopup_row clear_both">
                <div>
                    @Html.LabelFor(model => model.RecieverSecondLastName, new { @class = "row_label_txt" })
                    @Html.TextBoxFor(model => model.RecieverSecondLastName, null, new { @class = "input_box", id = "txtSecLastName", @maxlength = 30 })
                </div>
                <div class="error_align_left  hide" id="divSecLNameValidation">
                    <p class="error_txt">@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.MTSecLastNameError</p>
                </div>
            </div>
            <div class="trxpopup_row clear_both">
                <div>
                    @Html.LabelFor(model => model.ModifiedTestQuestion, new { @class = "row_label_txt" })
                    @Html.TextBoxFor(model => model.ModifiedTestQuestion, null, new { @class = "input_box", id = "txtModifyTestQuestion", @maxlength = 20 })
                </div>
                <div class="error_align_left  hide" id="divTestQuestValidation">
                    <p class="error_txt">@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.MTTestQuestionError</p>
                </div>
            </div>
            <div class="trxpopup_row clear_both">
                <div>
                    @Html.LabelFor(model => model.ModifiedTestAnswer, new { @class = "row_label_txt" })
                    @Html.TextBoxFor(model => model.ModifiedTestAnswer, null, new { @class = "input_box", id = "txtModifyTestAnswer", @maxlength = 19 })
                </div>
                <div class="error_align_left hide" id="divTestAnswerValidation">
                    <p class="error_txt">@MGI.Channel.DMS.Web.App_GlobalResources.Nexxo.MTTestAnswerError</p>
                </div>
            </div>
	        @if (Model.isCashierState)
	        {
	           <div>
		      <span>@Html.CheckBoxFor(model => model.isAgentAgree, new { @class = "trans_history_ldl trans_his_sel",id="chkModifyAgree" })
		  	    I, @Html.DisplayFor(model => model.AgentFirstName)<span> @Html.DisplayFor(model => model.AgentLastName),</span>		 
			    certify this is my true and correct name, I am AML/CFT trained and will comply 
			    with all laws in processing transactions.
		      </span>
	           </div>
	           <div class="SendMoneyModifyButtonAlign">
	      	     <span><input type="button" value="Submit" class="trxbuttonText opaqueViewCart" disabled="disabled" id="btnModifySubmit" /></span>
	            </div>
	        }
	        else
	        {
	          <div class="SendMoneyModifyButtonAlign">
	    	    <span><input type="button" value="Submit" class="trxbuttonText" id="btnModifySubmit"/></span>
	          </div>
	        }
	    </div>
    }
</div>
@Html.TextBoxFor(model => model.RefundStatus, new { style = "display:none" })
