IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND NAME = 'TRG_EX_AudProfileTax') 
BEGIN
	DROP TRIGGER TRG_EX_AudProfileTax;
	PRINT 'DROPPED TRIGGER TRG_EX_AudProfileTax';
END
GO

SET ANSI_NULLS ON;
GO

SET QUOTED_IDENTIFIER OFF;
GO
/******************************************************************************  
** Trigger Name:  TRG_EX_AudProfileTax  
** Table Name:  TBL_IRS_ProfileTax  
** Action   Insert, Update, Delete  
**  
** Description:  Writes data changes to the audit table  
**  
** Created By: by TriggerGenerator Program (Rajesh)  
** Company   : Kaspick & Company  
** Project   : Excelsior  
** Created DT: 5/30/2007  
**  
*******************************************************************************  
**       Change History  
*******************************************************************************  
** Date/Version  Author:  Bug #  Description:  
** --------   -------- -------------------------------------------  
** 5/30/2007    TriggerGenerator Program (Rajesh) Created for PROFILE_TAX table  
** 2/29/2008 Modified  Madhuri  Added Fascimile_Signer_Flag column  
*******************************************************************************  
** Copyright (C) 2007 Kaspick & Company, All Rights Reserved  
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION  
*******************************************************************************/
CREATE TRIGGER [TRG_EX_AudProfileTax]
    ON [TBL_IRS_ProfileTax]
    AFTER INSERT, UPDATE, DELETE
    AS --  Variable Declarations  --  
    DECLARE @trgname AS VARCHAR (60);
       DECLARE @Errormessage AS VARCHAR (1000);
       DECLARE @ErrorNumber AS INT;
       DECLARE @TAX_ID AS INT;
       -- Variables used for error handling - uncomment if needed  
       DECLARE @val1 AS VARCHAR (30);
--Declare @val2      varchar(30);  
--  Temp tables, Cursors, Table Variables  --  
--  Variable Data Assignment  --  
SET @trgname = 'TRG_EX_AudProfileTax';
-- Body of trigger  --  
-- if the row is an insert, count from Deleted will be 0, so put the inserted data into  
-- the audit table.  If the rowcount from Deleted > 0, then get the data from the  
-- Deleted table for recording the old values in the audit table.  
BEGIN TRY
BEGIN TRANSACTION;
	DECLARE @UNKNOWN_ID AS int;
	SELECT	@UNKNOWN_ID = USERID FROM TBL_KS_USER WHERE UPPER(LOGINNAME) = 'UNKNOWN';

IF (SELECT COUNT(*) FROM Deleted) > 0 AND (SELECT COUNT(*)FROM Inserted)> 0 -- Update
BEGIN
		-- Insert the old data row 
		INSERT INTO TBL_IRS_Audit_ProfileTax (AUDIT_USER_ID, AUDIT_DATETIME, AUDIT_FLAG, AUDIT_TABLE, AUDIT_DETAILS, TAX_ID, 
		ENTITY_TYPE_ID, ManagerCode, AllianceNumber, CustomerAccountNumber, BeneContactID, EmployeeContactID, 
		BENEFICIARY_TAX_FORM_ID, TAX_RETURN_ID, TAX_10989_ID, TAX_1099R_ID, HIGH_PRIORITY, K_1_PRIORITY, CT_12S_ID, OR_REGISTRATION_NO, 
		FASCIMILE_SIGNER_FLAG, MODIFIED_DATE, MODIFIED_USER_ID, CREATED_DATE, CREATED_USER_ID, DELETED_USER_ID)
		SELECT DISTINCT D.modified_user_id,GETDATE(),'U','TBL_IRS_ProfileTax',
		'LOGIN_NAME->' + SYSTEM_USER + ',SYSTEM_ID->' + HOST_ID() + ',HOST_NAME->' + HOST_NAME() + ',USER->' + USER,
		D.TAX_ID,D.ENTITY_TYPE_ID,D.ManagerCode,D.AllianceNumber,D.CustomerAccountNumber,D.BeneContactID,
		D.EmployeeContactID,D.BENEFICIARY_TAX_FORM_ID,D.TAX_RETURN_ID,D.TAX_10989_ID,D.TAX_1099R_ID,
		D.HIGH_PRIORITY,D.K_1_PRIORITY,D.CT_12S_ID,D.OR_REGISTRATION_NO,D.FASCIMILE_SIGNER_FLAG,D.MODIFIED_DATE,
		D.MODIFIED_USER_ID,D.CREATED_DATE,D.CREATED_USER_ID,D.DELETED_USER_ID
		FROM DELETED AS D --, Inserted I 
		--WHERE D.ManagerCode IS NOT NULL AND D.AllianceNumber IS NOT NULL AND D.CustomerAccountNumber IS NOT	NULL
	END
ELSE IF (SELECT	COUNT(*)FROM Inserted)> 0  -- Insert 
BEGIN
	INSERT INTO TBL_IRS_Audit_ProfileTax (AUDIT_USER_ID, AUDIT_DATETIME, AUDIT_FLAG, AUDIT_TABLE, AUDIT_DETAILS, TAX_ID, 
	ENTITY_TYPE_ID, ManagerCode, AllianceNumber, CustomerAccountNumber, BeneContactID, EmployeeContactID, 
	BENEFICIARY_TAX_FORM_ID, TAX_RETURN_ID, TAX_10989_ID, TAX_1099R_ID, HIGH_PRIORITY, K_1_PRIORITY, CT_12S_ID, OR_REGISTRATION_NO, 
	FASCIMILE_SIGNER_FLAG, MODIFIED_DATE, MODIFIED_USER_ID, CREATED_DATE, CREATED_USER_ID, DELETED_USER_ID)
	SELECT ISNULL(I.modified_user_id, @UNKNOWN_ID),	GETDATE(),'I','TBL_IRS_ProfileTax',
		'LOGIN_NAME->' + SYSTEM_USER + ',SYSTEM_ID->' + HOST_ID() + ',HOST_NAME->' + HOST_NAME() + ',USER->' + USER,
		I.TAX_ID,I.ENTITY_TYPE_ID,I.ManagerCode,I.AllianceNumber,I.CustomerAccountNumber,I.BeneContactID,
		I.EmployeeContactID,I.BENEFICIARY_TAX_FORM_ID,I.TAX_RETURN_ID,I.TAX_10989_ID,I.TAX_1099R_ID,I.HIGH_PRIORITY,
		I.K_1_PRIORITY,I.CT_12S_ID,I.OR_REGISTRATION_NO,I.FASCIMILE_SIGNER_FLAG,I.MODIFIED_DATE,I.MODIFIED_USER_ID,
		I.CREATED_DATE,I.CREATED_USER_ID,I.DELETED_USER_ID	
	FROM Inserted AS I;
END 
ELSE IF (SELECT COUNT(*) FROM Deleted)> 0  -- Delete
BEGIN
	INSERT INTO TBL_IRS_Audit_ProfileTax (AUDIT_USER_ID, AUDIT_DATETIME, AUDIT_FLAG, AUDIT_TABLE, AUDIT_DETAILS, TAX_ID, ENTITY_TYPE_ID, ManagerCode, AllianceNumber, CustomerAccountNumber, BeneContactID, EmployeeContactID, BENEFICIARY_TAX_FORM_ID, TAX_RETURN_ID, TAX_10989_ID, TAX_1099R_ID, HIGH_PRIORITY, K_1_PRIORITY, CT_12S_ID, OR_REGISTRATION_NO, FASCIMILE_SIGNER_FLAG, MODIFIED_DATE, MODIFIED_USER_ID, CREATED_DATE, CREATED_USER_ID, DELETED_USER_ID)
	SELECT ISNULL(DELETED_USER_ID, @UNKNOWN_ID),GETDATE(),'D','TBL_IRS_ProfileTax',
		'LOGIN_NAME->' + SYSTEM_USER + ',SYSTEM_ID->' + HOST_ID() + ',HOST_NAME->' + HOST_NAME() + ',USER->' + USER,
		D.TAX_ID,D.ENTITY_TYPE_ID,D.ManagerCode,D.AllianceNumber,D.CustomerAccountNumber,D.BeneContactID,
		D.EmployeeContactID,D.BENEFICIARY_TAX_FORM_ID,D.TAX_RETURN_ID,D.TAX_10989_ID,D.TAX_1099R_ID,D.HIGH_PRIORITY,
		D.K_1_PRIORITY,D.CT_12S_ID,D.OR_REGISTRATION_NO,D.FASCIMILE_SIGNER_FLAG,D.MODIFIED_DATE,D.MODIFIED_USER_ID,
		D.CREATED_DATE,D.CREATED_USER_ID,D.DELETED_USER_ID
	FROM Deleted AS D;
END
END TRY 
BEGIN CATCH
SET @Errormessage = ERROR_MESSAGE();
SET @Errornumber = ERROR_NUMBER();
ROLLBACK;
SELECT	@TAX_ID = TAX_ID FROM Inserted;
SET @val1 = CAST(@TAX_ID AS varchar(30));
EXECUTE USP_EX_SYSErrorHandler	@codename = @trgname,
								@Errormessage = @Errormessage,
								@Errornumber = @Errornumber,
								@val1 = @val1,
								@val1str = 'TAX_ID';
END CATCH
COMMIT TRANSACTION;
GO
IF EXISTS (SELECT * FROM sysobjects WHERE type = 'TR' AND NAME = 'TRG_EX_AudProfileTax') 
BEGIN
	PRINT 'CREATED TRIGGER TRG_EX_AudProfileTax';
END