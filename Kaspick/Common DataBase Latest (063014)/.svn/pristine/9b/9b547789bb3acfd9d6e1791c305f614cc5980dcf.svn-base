/****** Object:  StoredProcedure [dbo].[USP_PP_GetCalcEngBeneficiaryPaymentLeadTimeForAccount]    Script Date: 09/19/2013 11:22:21 ******/
IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = OBJECT_ID(N'[dbo].[USP_PP_GetCalcEngBeneficiaryPaymentLeadTimeForAccount]')
			AND type IN (
				N'P'
				,N'PC'
				)
		)
	DROP PROCEDURE [dbo].[USP_PP_GetCalcEngBeneficiaryPaymentLeadTimeForAccount]
GO

/******************************************************************************        
** Name:     USP_PP_GetCalcEngBeneficiaryPaymentLeadTimeForAccount 
**       
** Short Desc: To Get Beneficiary LeadTime
**                      
** Full Description:  To Get Beneficiary LeadTime where Input is CustomerAccountNumber      
**           
**        
** Sample Call        
        EXEC USP_PP_GetCalcEngBeneficiaryPaymentLeadTimeForAccount  '7770010'      
      
**        
** Return values: NONE        
**                      
** Standard declarations                      
**       SET LOCK_TIMEOUT         30000   -- 30 seconds                      
**                       
** Created By: Debajyoti kalita   
** Company   : Kaspick & Company                      
** Project   : BackOffice Integration                      
** Created DT: 19-Sep-13                 
**                                  
*******************************************************************************                
**       Change History                      
*******************************************************************************                
** Date:      Author:	 Bug #     Description:                           
** --------  --------	 ------    -------------------------------------- 
** 26-may-14   Salih			   Splitcheck implementation changes, AdviceFlag check modified from 1 to -4 
** 26-jun-14   Salih               Modified Rolecode implementation from Rolecode description to ID.
*******************************************************************************                      
** Copyright (C) <CopyrightYear,,Year> Kaspick & Company, All Rights Reserved                      
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION                      
*******************************************************************************/
CREATE PROCEDURE [dbo].[USP_PP_GetCalcEngBeneficiaryPaymentLeadTimeForAccount] @CustomerAccountNumber VARCHAR(14)
AS
BEGIN TRY
	--  Initial Set statements  --      
	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 30000;-- 30 seconds 

	--  Variable Declarations  -- 
	DECLARE @ContactRoleCode INT
	DECLARE @MinCheck INT
	DECLARE @MinNonCheck INT
	DECLARE @MinimumWirePostingDays INT

	CREATE TABLE #TmpBeneficiaryLeadTime (
		CustomerAccountNumber VARCHAR(14)
		,ContactID INT
		,ContactRoleCode INT
		,LeadTime INT
		)

	CREATE TABLE #TmpWirePostingDays (
		CustomerAccountNumber VARCHAR(14)
		,ContactID INT
		,ContactRoleCode INT
		,DaysValue INT
		)

	----Assigning value to Variables
	-- 26-jun-2014  Salih: Modified Rolecode implementation from Rolecode description to ID.
	SET @ContactRoleCode = 21 --'Beneficiary'

	--get all Contact for given CustomerAccountNumber      
	INSERT INTO #TmpBeneficiaryLeadTime (
		CustomerAccountNumber
		,ContactID
		,ContactRoleCode
		)
	SELECT DISTINCT CustomerAccountNumber
		,ContactID
		,ContactRoleCode
	FROM SYN_IT_ContactAccountRoles ContAccRole
	WHERE ContAccRole.CustomerAccountNumber = @CustomerAccountNumber
		AND ContAccRole.ContactRoleCode = @ContactRoleCode

	--get the default values for check and noncheck from sys table      
	SELECT @MinCheck = MinimumCheckPostingDays
		,@MinNonCheck = MinimumNonCheckPostingDays
		,@MinimumWirePostingDays = MinimumWirePostingDays
	FROM TBL_PP_SystemAdministration

	---Get the list of Contact for PaymentMethod = 'Wire'
	INSERT INTO #TmpWirePostingDays (
		CustomerAccountNumber
		,ContactID
		,ContactRoleCode
		,DaysValue
		)
	SELECT TmpBeneLeadTime.CustomerAccountNumber
		,TmpBeneLeadTime.ContactID
		,TmpBeneLeadTime.ContactRoleCode
		,@MinimumWirePostingDays AS DaysValue
	FROM #TmpBeneficiaryLeadTime TmpBeneLeadTime
	INNER JOIN SYN_IT_ContactPaymentMethods SynPmntMthds
		ON TmpBeneLeadTime.ContactID = SynPmntMthds.ContactID
			AND SynPmntMthds.PaymentType = 'Wire'

	----lowest priority Manager		   
	UPDATE #TmpBeneficiaryLeadTime
	SET LeadTime = MgrRule.DaysValue
	FROM #TmpBeneficiaryLeadTime TmpBeneLeadTime
	INNER JOIN dbo.VW_IT_ProfileInfo VWProfileInfo
		ON TmpBeneLeadTime.CustomerAccountNumber = VWProfileInfo.CustomerAccountNumber
			AND TmpBeneLeadTime.ContactID = VWProfileInfo.ContactID
			AND TmpBeneLeadTime.ContactRoleCode = VWProfileInfo.ContactRoleCode
			AND VWProfileInfo.ContactRoleCode = @ContactRoleCode
	INNER JOIN dbo.TBL_PP_ManagerRule MgrRule
		ON MgrRule.ManagerCode = VWProfileInfo.ManagerCode
	WHERE MgrRule.DaysValue IS NOT NULL

	--second priority CustomerAccountNumber  
	UPDATE #TmpBeneficiaryLeadTime
	SET LeadTime = CASE 
			WHEN AccntRule.DaysValue IS NULL
				THEN LeadTime
			ELSE AccntRule.DaysValue
			END
	FROM #TmpBeneficiaryLeadTime TmpBeneLeadTime
	INNER JOIN dbo.VW_IT_ProfileInfo VWProfileInfo
		ON TmpBeneLeadTime.CustomerAccountNumber = VWProfileInfo.CustomerAccountNumber
			AND TmpBeneLeadTime.ContactID = VWProfileInfo.ContactID
			AND TmpBeneLeadTime.ContactRoleCode = VWProfileInfo.ContactRoleCode
			AND VWProfileInfo.ContactRoleCode = @ContactRoleCode
	INNER JOIN dbo.TBL_PP_AccountRule AccntRule
		ON AccntRule.CustomerAccountNumber = VWProfileInfo.CustomerAccountNumber
	WHERE AccntRule.DaysValue IS NOT NULL

	--Highest priority Contact       
	UPDATE #TmpBeneficiaryLeadTime
	SET LeadTime = CASE 
			WHEN CnctRule.DaysValue IS NULL
				THEN LeadTime
			ELSE CnctRule.DaysValue
			END
	FROM #TmpBeneficiaryLeadTime TmpBeneLeadTime
	INNER JOIN dbo.VW_IT_ProfileInfo VWProfileInfo
		ON TmpBeneLeadTime.CustomerAccountNumber = VWProfileInfo.CustomerAccountNumber
			AND TmpBeneLeadTime.ContactID = VWProfileInfo.ContactID
			AND TmpBeneLeadTime.ContactRoleCode = VWProfileInfo.ContactRoleCode
			AND VWProfileInfo.ContactRoleCode = @ContactRoleCode
	INNER JOIN dbo.TBL_PP_ContactRule CnctRule
		ON CnctRule.ContactID = VWProfileInfo.Contactid
	WHERE CnctRule.DaysValue IS NOT NULL

	UPDATE #TmpBeneficiaryLeadTime
	SET LeadTime = CASE 
			WHEN ISNULL(LeadTime, 0) > @MinNonCheck
				THEN ISNULL(LeadTime, 0)
			ELSE @MinNonCheck
			END
	FROM #TmpBeneficiaryLeadTime TmpBeneLeadTime
	INNER JOIN SYN_IT_ContactPaymentMethods SynPmntMthds
		ON TmpBeneLeadTime.ContactID = SynPmntMthds.ContactID
	WHERE SynPmntMthds.PaymentType IS NULL
		OR SynPmntMthds.PaymentType <> 'CHECK'

	--For Chek payment method MW rules..If not found then System admin value      
	UPDATE #TmpBeneficiaryLeadTime
	SET LeadTime = CASE 
			WHEN LeadTime IS NULL
				THEN @MinCheck
			ELSE LeadTime
			END
	FROM #TmpBeneficiaryLeadTime TmpBeneLeadTime
	INNER JOIN SYN_IT_ContactPaymentMethods SynPmntMthds
		ON TmpBeneLeadTime.ContactID = SynPmntMthds.ContactID
	LEFT OUTER JOIN SYN_IT_BeneficiaryDistributions SynBeneDist
		ON SynBeneDist.ContactID = SynBeneDist.ContactID
			AND (
				FixedOrPercentageFlag = 3
				OR FixedOrPercentageFlag = 4
				)
	WHERE SynPmntMthds.PaymentType IS NOT NULL
		AND (
			SynPmntMthds.PaymentType = 'CHECK'
			OR ( -- 26-may-2014	Salih :  Splitcheck implementation changes, AdviceFlag check modified from 1 to -4 
				SynPmntMthds.PaymentType = 'CHECK'
				AND AdviceFlag = -4
				)
			)

	UPDATE #TmpBeneficiaryLeadTime
	SET LeadTime = CASE 
			WHEN ISNULL(LeadTime, 0) > TmpWirePstng.DaysValue
				THEN ISNULL(LeadTime, 0)
			ELSE TmpWirePstng.DaysValue
			END
	FROM #TmpBeneficiaryLeadTime TmpBeneLeadTime
	INNER JOIN #TmpWirePostingDays TmpWirePstng
		ON TmpBeneLeadTime.CustomerAccountNumber = TmpWirePstng.CustomerAccountNumber
			AND TmpBeneLeadTime.ContactID = TmpWirePstng.ContactID
			AND TmpBeneLeadTime.ContactRoleCode = TmpWirePstng.ContactRoleCode

	SELECT CustomerAccountNumber
		,ContactID
		,ContactRoleCode
		,LeadTime
	FROM #TmpBeneficiaryLeadTime
	ORDER BY ContactID
END TRY

BEGIN CATCH
	SELECT ERROR_MESSAGE() AS ErrorMessage
END CATCH
