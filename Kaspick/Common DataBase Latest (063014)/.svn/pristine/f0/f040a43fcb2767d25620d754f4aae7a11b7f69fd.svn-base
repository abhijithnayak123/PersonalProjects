IF EXISTS (
		SELECT *
		FROM sys.objects
		WHERE object_id = OBJECT_ID(N'[dbo].[USP_TR_SaveParsedSecurityInfo]')
			AND type IN (
				N'P'
				,N'PC'
				)
		)
	DROP PROCEDURE [dbo].[USP_TR_SaveParsedSecurityInfo]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/******************************************************************************      
** Name:     USP_TR_SaveParsedSecurityInfo      
** Short Desc : Saves SecurityInfo to TBL_TR_Asset
**      
** Full Description : Saves SecurityInfo to TBL_TR_Asset
**      
** Sample Call      
EXEC USP_TR_SaveParsedSecurityInfo        
@XMLUnpostedPayments =       
'<SecurityInfoCollection>      
  <InsertList>        
   <SecurityInfo  PaymentType="Beneficiary payment" ScheduleID="309802" PaymentDate="01/01/2007" ScheduledAmount="9669.24" ClientID="100033" ProgramID="100034" CustomerAccountNumber="103899" ParticipantID="115492" BeneficiaryID ="114957" Lead_Time="0"/>       
 </InsertList>      
</SecurityInfoCollection>'    
@ReturnStatus out,
@ErrorDesc out
      
** Return values: 0,-1,-2 and Error Description
**      
**      
** Standard declarations      
**       SET LOCK_TIMEOUT         30000   -- 30 seconds      
**       
** Created By :		Chaithra Madappa
** Company  :		Kaspick & Company      
** Project  :		Back Office Integration (T-Rex)     
** Created DT :		Feb/27/2014        
**                  
*******************************************************************************      
**       Change History      
*******************************************************************************      
** Date:        Author:  Bug #     Description:                           Rvwd      
** --------     -------- ------    -------------------------------------- --------      
** 
*******************************************************************************      
** Copyright (C) <CopyrightYear,,Year> Kaspick & Company, All Rights Reserved      
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION      
*******************************************************************************/
CREATE PROCEDURE [dbo].[USP_TR_SaveParsedSecurityInfo]
	-- paremeters here      
	@XMLSecurityInfo XML
	,@ReturnStatus INT = - 1
OUTPUT
	,-- assume SP fails and 
	@ErrorDesc VARCHAR(8000)
OUTPUT AS

--  Initial Set statements  --      
SET NOCOUNT ON;
SET LOCK_TIMEOUT 30000;-- 30 seconds      

-- Body of procedure  --      
BEGIN TRY
	BEGIN TRANSACTION

	IF EXISTS (
			SELECT *
			FROM TEMPDB.DBO.SYSOBJECTS
			WHERE ID = OBJECT_ID(N'TEMPDB.[DBO].[#TEMP_NewSecurities]')
			)
		DROP TABLE [DBO].[#TEMP_NewSecurities]

	CREATE TABLE #TEMP_NewSecurities (
		SecuritySymbol VARCHAR(25)
		,AssetName VARCHAR(100)
		,Dividend FLOAT
		,BondMatureDate DATETIME
		,LastPaymentDate DATETIME
		,IndustryID INT
		,AssetType VARCHAR(10)
		,IsFund SMALLINT
		,AssetClassName VARCHAR(25)
		,CouponDelay INT
		,IsKcoAsset SMALLINT
		)

	INSERT INTO #TEMP_NewSecurities (
		SecuritySymbol
		,AssetName
		,Dividend
		,BondMatureDate
		,LastPaymentDate
		,IndustryID
		,AssetType
		,IsFund
		,AssetClassName
		,CouponDelay
		)
	SELECT XMLDATA.item.value('@SecuritySymbol[1]', 'varchar(25)') AS SecuritySymbol
		,XMLDATA.item.value('@AssetName[1]', 'varchar(100)') AS AssetName
		,XMLDATA.item.value('@Dividend[1]', 'FLOAT') AS Dividend
		,XMLDATA.item.value('@BondMatureDate[1]', 'DateTime') AS BondMatureDate
		,XMLDATA.item.value('@LastPaymentDate[1]', 'DateTime') AS LastPaymentDate
		,XMLDATA.item.value('@IndustryID[1]', 'int') AS IndustryID
		,XMLDATA.item.value('@AssetType[1]', 'varchar(10)') AS AssetType
		,XMLDATA.item.value('@IsFund[1]', 'smallint') AS IsFund
		,XMLDATA.item.value('@AssetClassName[1]', 'varchar(25)') AS AssetClassName
		,XMLDATA.item.value('@CouponDelay[1]', 'int') AS CouponDelay
	--Case when isnull(AA.SecuritySymbol,'')<>'' then -1 END 
	FROM @XMLSecurityInfo.nodes('//SecurityInfoCollection/SecurityInfo') AS XMLDATA(item)
	--Left Outer join (
	--Select Distinct rtrim(ltrim(isnull(SecuritySymbol,'')))  SecuritySymbol from  SYN_EX_AssetAllocation 
	--where isnull(CustomerAccountNumber,0)<>0) AA  ON XMLDATA.item.value('@SecuritySymbol[1]', 'varchar(25)')=AA.SecuritySymbol
	WHERE isnull(XMLDATA.item.value('@SecuritySymbol[1]', 'varchar(25)'), '') <> ''

	UPDATE #TEMP_NewSecurities
	SET IsKcoAsset = - 1
	FROM #TEMP_NewSecurities newSec
	INNER JOIN (
		SELECT DISTINCT rtrim(ltrim(isnull(SecuritySymbol, ''))) SecuritySymbol
		FROM TBL_TR_Asset
		) Asset ON newSec.SecuritySymbol = Asset.SecuritySymbol

	UPDATE TBL_TR_Asset
	SET AssetName = newAssets.AssetName
		,Dividend = newAssets.Dividend
		,BondMatureDate = (
			CASE 
				WHEN year(newAssets.BondMatureDate) <= 1900
					THEN NULL
				ELSE newAssets.BondMatureDate
				END
			)
		,LastPaymentDate = (
			CASE 
				WHEN year(newAssets.LastPaymentDate) <= 1900
					THEN NULL
				ELSE newAssets.LastPaymentDate
				END
			)
		,
		-- IndustryID = newAssets.IndustryID ,
		AssetType = newAssets.AssetType
		,IsFund = newAssets.IsFund
		,AssetClassName = newAssets.AssetClassName
		,CouponDelay = newAssets.CouponDelay
		,LastUpdate = GetDate()
		,IsKcoAsset = newAssets.IsKcoAsset
	FROM TBL_TR_Asset existingAsset
	INNER JOIN #TEMP_NewSecurities newAssets ON newAssets.SecuritySymbol = existingAsset.SecuritySymbol

	INSERT INTO TBL_TR_Asset (
		SecuritySymbol
		,AssetName
		,Dividend
		,BondMatureDate
		,LastPaymentDate
		,--IndustryID, 
		AssetType
		,IsFund
		,AssetClassName
		,CouponDelay
		,LastUpdate
		,IsKcoAsset
		)
	SELECT newSec.SecuritySymbol
		,newSec.AssetName
		,newSec.Dividend
		,(
			CASE 
				WHEN year(newSec.BondMatureDate) <= 1900
					THEN NULL
				ELSE newSec.BondMatureDate
				END
			)
		,(
			CASE 
				WHEN year(newSec.LastPaymentDate) <= 1900
					THEN NULL
				ELSE newSec.LastPaymentDate
				END
			)
		,newSec.AssetType
		,newSec.IsFund
		,newSec.AssetClassName
		,newSec.CouponDelay
		,GetDate()
		,newSec.IsKcoAsset
	FROM #TEMP_NewSecurities newSec
	LEFT OUTER JOIN TBL_TR_Asset existingAsset ON newSec.SecuritySymbol = existingAsset.SecuritySymbol
	WHERE isnull(existingAsset.SecuritySymbol, '') = ''

	UPDATE TBL_TR_AXYSInfoImportLog
	SET lastUpdated = GetDate()
		,RowsLoaded = (
			SELECT count(*)
			FROM #TEMP_NewSecurities
			)
	WHERE FileDescription = 'Asset Names'

	SET @ReturnStatus = 0;

	COMMIT TRANSACTION;
END TRY

BEGIN CATCH
	SET @ReturnStatus = - 1;
	SET @ErrorDesc = error_message();

	ROLLBACK TRANSACTION;
END CATCH

SET NOCOUNT OFF;
GO


