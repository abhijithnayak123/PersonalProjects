/****** Object:  StoredProcedure [dbo].[USP_IE_ReviewReimportValuation]    Script Date: 07/02/2014 09:22:21 ******/
IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = OBJECT_ID(N'[dbo].[USP_IE_ReviewReimportValuation]')
			AND type IN (
				N'P'
				,N'PC'
				)
		)
	DROP PROCEDURE [dbo].[USP_IE_ReviewReimportValuation]
GO

/****** Object:  StoredProcedure [dbo].[USP_IE_ReviewReimportValuation]    Script Date: 07/02/2014 09:22:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/******************************************************************************    
** Name:     USP_IE_ReviewReimportValuation    
** Short Desc:  Used for recalculating net income used for payment, Net Income Yield & Variances Calculation in Data Review Module  
**    
** Full Description : Used for recalculating net income used for payment, Net Income Yield & Variances Calculation in Data Review Module  
**            
**    
** Sample Call    
  Declare @XMLDATA XML  
	set @XMLDATA =   '<ImportStagingCollection>  
  <InsertList>  
   <ImportStaging StagingID="12" />  
   <ImportStaging StagingID="13" />  
   <ImportStaging StagingID="14" />  
  </InsertList><UpdateList></UpdateList><DeleteList></DeleteList>  
	</ImportStagingCollection>'  
	EXEC USP_IE_ReviewReimportValuation  @XMLDATA    
**    
** Return values: NONE    
**    
**    
** Standard declarations    
**       SET LOCK_TIMEOUT         30000   -- 30 seconds    
**     
** Created By: Mohamed Salih    
** Company   : Kaspick & Company    
** Project   : Back Office Integration - Income Estimation    
** Created DT: 08/22/2014    
**                
*******************************************************************************    
**       Change History    
*******************************************************************************    
** Date:        Author:  Bug #     Description:                           Rvwd    
** --------     -------- ------    -------------------------------------- --------    
**   
*******************************************************************************    
** Copyright (C) <CopyrightYear,,Year> Kaspick & Company, All Rights Reserved    
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION    
*******************************************************************************/
CREATE PROCEDURE [dbo].[USP_IE_ReviewReimportValuation] @XMLDATA XML
AS
BEGIN
	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 30000;-- 30 seconds    

	--  Variable Declarations  --   
	DECLARE @TaxYear INT;

	--  Temp tables, Cursors, Table Variables  --  
	IF OBJECT_ID('tempdb..#TBLAccountsToBeImported') IS NOT NULL
		DROP TABLE #TBLAccountsToBeImported

	CREATE TABLE #TBLAccountsToBeImported (StagingID INT NOT NULL)

	BEGIN TRY
		--  Transactions  
		BEGIN TRANSACTION

		--Get acounts to be imported from xml  
		INSERT INTO #TBLAccountsToBeImported
		SELECT XMLInput.Item.value('@StagingID[1]', 'int') AS StagingID
		FROM @XMLDATA.nodes('//ImportStagingCollection/InsertList/ImportStaging') AS XMLInput(Item)

		--get Tax year from Groups table  
		SELECT TOP 1 @TaxYear = Grp.TaxYear
		FROM TBL_IE_STG_Estimate STGEst
		INNER JOIN #TBLAccountsToBeImported ImpAcc
			ON STGEst.StagingID = ImpAcc.StagingID
		INNER JOIN TBL_IE_Group Grp
			ON STGEst.GroupID = Grp.GroupID
		ORDER BY ImpAcc.StagingID

		--Valuation, Unitrust Amount, Cumulative Deficiency, Prior Year Overpayment  
		UPDATE TBL_IE_STG_Estimate
		SET PP_Valuation = ISNULL(AccPyot.Valuation, 0) + ISNULL(AccPyot.ProratedGiftValuation, 0)
			,PP_ScheduledPaymentAmount = AccPyot.EstAnnualPayout
			,PP_OverPayment = AccPyot.PrevOverPayment
			,PP_UnitrustAmount = (ISNULL(AccPyot.Valuation, 0) + ISNULL(AccPyot.ProratedGiftValuation, 0)) * ISNULL(STGEst.UnitrustPercentage, 0) / 100
			,PP_CumulativeDeficiency = AccPyot.Deficit
			,Ex_ValuationImportDate = GETDATE()
			,PP_ValuationStatus = CASE 
				WHEN AccPyot.Valuation > 0
					THEN 'Ready for Pmt'
				ELSE 'New'
				END
		FROM TBL_IE_STG_Estimate STGEst
		INNER JOIN #TBLAccountsToBeImported ImpAcc
			ON STGEst.StagingID = ImpAcc.StagingID
		INNER JOIN TBL_PP_AnnualAccountPayoutInfo AccPyot
			ON STGEst.CustomerAccountNumber = AccPyot.CustomerAccountNumber
		WHERE AccPyot.PayoutYear = @TaxYear

		--Prior Year Q1-Q4 Payment  
		UPDATE TBL_IE_STG_Estimate
		SET PP_Q1_Q4PaymentsPriorYear1 = (
				SELECT SUM(ISNULL(BenPymt.PaymentAmount, 0)) AS PriorYearPayment
				FROM TBL_PP_BeneficiaryPayment BenPymt
				WHERE CustomerAccountNumber = STGEst.CustomerAccountNumber
					AND (
						BenPymt.TaxYear = @TaxYear - 1
						AND BenPymt.VoidDate IS NULL
						)
					AND BenPymt.PaymentDate BETWEEN CONVERT(DATETIME, '1/1/' + CONVERT(VARCHAR(4), @TaxYear - 1))
						AND CONVERT(DATETIME, '12/31/' + CONVERT(VARCHAR(4), @TaxYear - 1))
				)
		FROM TBL_IE_STG_Estimate STGEst
		INNER JOIN #TBLAccountsToBeImported ImpAcc
			ON STGEst.StagingID = ImpAcc.StagingID

		--Prior Year Q5 Payment  
		UPDATE TBL_IE_STG_Estimate
		SET PP_Q5PaymentsPriorYear1 = (
				SELECT SUM(ISNULL(BenPymt.PaymentAmount, 0)) AS PriorYearPayment
				FROM TBL_PP_BeneficiaryPayment BenPymt
				WHERE CustomerAccountNumber = STGEst.CustomerAccountNumber
					AND (
						BenPymt.TaxYear = @TaxYear - 1
						AND BenPymt.VoidDate IS NULL
						)
					AND BenPymt.PaymentDate > CONVERT(DATETIME, '12/31/' + CONVERT(VARCHAR(4), @TaxYear - 1))
				)
		FROM TBL_IE_STG_Estimate STGEst
		INNER JOIN #TBLAccountsToBeImported ImpAcc
			ON STGEst.StagingID = ImpAcc.StagingID

		--Prior Year Total Payment and other cascades  
		UPDATE TBL_IE_STG_Estimate
		SET PP_PriorYearPayout = ISNULL(PP_Q1_Q4PaymentsPriorYear1, 0) + ISNULL(PP_Q5PaymentsPriorYear1, 0)
			,PP_PriorYearValuation = ISNULL(PP_ValuationPriorYear1, 0)
			,PP_PriorYearYield = CASE 
				WHEN ISNULL(PP_ValuationPriorYear1, 0) = 0
					THEN 0
				ELSE (((ISNULL(PP_Q1_Q4PaymentsPriorYear1, 0) + ISNULL(PP_Q5PaymentsPriorYear1, 0)) / PP_ValuationPriorYear1))
				END
			,PP_TotalPaymentsPriorYear1 = ISNULL(PP_Q1_Q4PaymentsPriorYear1, 0) + ISNULL(PP_Q5PaymentsPriorYear1, 0)
			,PP_TrustYieldPriorYear1 = CASE 
				WHEN ISNULL(PP_ValuationPriorYear1, 0) = 0
					THEN 0
				ELSE (((ISNULL(PP_Q1_Q4PaymentsPriorYear1, 0) + ISNULL(PP_Q5PaymentsPriorYear1, 0)) / PP_ValuationPriorYear1))
				END
		FROM TBL_IE_STG_Estimate STGEst
		INNER JOIN #TBLAccountsToBeImported ImpAcc
			ON STGEst.StagingID = ImpAcc.StagingID

		--Prior Year Q1-Q4 Variance (Net)  
		--'= IF(NetIncomeYield%onJan1 = 0, 0, ((Net Income Estimate used for Payment/Year-1 Q1-Q4 Payments) -1 ) * 100  
		--Prior Year Total Variance (Net)  
		--'= IF(NetIncomeYield%onJan1 = 0, 0, ((Net Income Estimate used for Payment/Year -1 Total Payments) -1 ) * 100  
		--Inv Alloc Net Yield Variance , Mid Year Variance  
		UPDATE TBL_IE_STG_Estimate
		SET Ca_NetPriorYearQ1_Q4Var = CASE 
				WHEN ISNULL(PP_Q1_Q4PaymentsPriorYear1, 0) = 0
					OR PP_Q1_Q4PaymentsPriorYear1 = 0
					THEN 0
				ELSE ((ISNULL(Ca_NetIncomeEstimateUsedForPmt, 0) / PP_Q1_Q4PaymentsPriorYear1) - 1)
				END
			,Ca_NetPriorYearTotalVar = CASE 
				WHEN ISNULL(PP_TotalPaymentsPriorYear1, 0) = 0
					OR PP_TotalPaymentsPriorYear1 = 0
					THEN 0
				ELSE ((ISNULL(Ca_NetIncomeEstimateUsedForPmt, 0) / PP_TotalPaymentsPriorYear1) - 1)
				END
			,Ca_InvAllocNetYieldVar = CASE 
				WHEN ISNULL(PP_InvestmentAllocationYield, 0) = 0
					OR PP_InvestmentAllocationYield = 0
					THEN 0
				ELSE ((Ax_NetIncomeYieldOnStartDate / (PP_InvestmentAllocationYield)) - 1)
				END
			,Ca_NetMidYearVar = CASE 
				WHEN ISNULL(PP_ScheduledPaymentAmount, 0) = 0
					OR PP_ScheduledPaymentAmount = 0
					THEN 0
				ELSE ((Ca_NetIncomeEstimateUsedForPmt / (PP_ScheduledPaymentAmount)) - 1)
				END
			,ModifiedDate = GETDATE()
		FROM TBL_IE_STG_Estimate STGEst
		INNER JOIN #TBLAccountsToBeImported ImpAcc
			ON STGEst.StagingID = ImpAcc.StagingID

		COMMIT TRANSACTION;
	END TRY

	BEGIN CATCH
		ROLLBACK TRANSACTION;

		DECLARE @ErrorMessage NVARCHAR(4000);
		DECLARE @ErrorSeverity INT;
		DECLARE @ErrorState INT;

		SELECT @ErrorMessage = ERROR_MESSAGE()
			,@ErrorSeverity = ERROR_SEVERITY()
			,@ErrorState = ERROR_STATE();

		RAISERROR (
				@ErrorMessage
				,-- Message text.
				@ErrorSeverity
				,-- Severity.
				@ErrorState -- State.
				);

		PRINT N'The transaction is in an uncommittable state. ' + 'Rolling back transaction.'
	END CATCH;

	SET NOCOUNT OFF;
END
