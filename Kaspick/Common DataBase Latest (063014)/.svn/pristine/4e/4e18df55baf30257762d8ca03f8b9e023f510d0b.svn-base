IF EXISTS (SELECT *
   FROM   sysobjects 
   WHERE  type = 'TR'
		  AND name = 'TRG_EX_AudPIFProjection')
BEGIN
	DROP TRIGGER TRG_EX_AudPIFProjection;
	PRINT 'DROPPED TRIGGER TRG_EX_AudPIFProjection';
END
GO  

/****** Object:  Trigger [dbo].[TRG_EX_AudPIFProjection]    Script Date: 06/23/2014 14:32:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO  
  
/******************************************************************************  
** Trigger Name:  TRG_EX_AudPIFProjection 
** Table Name  : TBL_BR_PIFProjection  
** Action    : Insert, Update, Delete  
**   
** Description :  Writes data changes to the audit table  
**  
**      
** Created By : by TriggerGenerator Program (Rajesh)  
** Company    : Kaspick & Company  
** Project    : BeneReport  
** Created DT : 6/1/2009  
**  
*******************************************************************************  
**       Change History  
*******************************************************************************  
** Date/Version  Author:  Bug #  Description:  
** --------   -------- -------------------------------------------  
** 6/1/2009 Madhuri     Created for TBL_EIS_RPT_PIF_PROJECTION table  
** 6/23/2014 Sanath     Created for  TBL_BR_PIFProjection
*******************************************************************************  
** Copyright (C) 2007 Kaspick & Company, All Rights Reserved  
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION  
*******************************************************************************/  
  
CREATE TRIGGER [dbo].[TRG_EX_AudPIFProjection]  
   ON [dbo].[TBL_BR_PIFProjection]  
   AFTER INSERT,UPDATE,DELETE  
AS   
  
--  Variable Declarations  --  
Declare @trgname     varchar(60);  
Declare @Errormessage      varchar(1000);  
Declare @Errornumber      int;  
Declare @AccountID    int;  
  
  
-- Variables used for error handling - uncomment if needed  
Declare @val1      varchar(30);  
--Declare @val2      varchar(30);  
  
--  Temp tables, Cursors, Table Variables  --  
  
--  Variable Data Assignment  --  
  
Set @trgname = 'TRG_EX_AudPIFProjection';  
  
-- Body of trigger  --  
  
-- if the row is an insert, count from Deleted will be 0, so put the inserted data into  
-- the audit table.  If the rowcount from Deleted > 0, then get the data from the  
-- Deleted table for recording the old values in the audit table.  
  
BEGIN TRY  
BEGIN TRANSACTION  
  
 DECLARE @UNKNOWN_ID INT  
 SELECT @UNKNOWN_ID = USERID FROM TBL_KS_USER WHERE upper(LOGINNAME) = 'UNKNOWN'  
  
 If (Select count(*) from Deleted) > 0 and (select count(*) from Inserted) > 0   
 BEGIN  
  
  insert into TBL_BR_AUDIT_PIFProjection  
    (AUDIT_USER_ID ,  
    AUDIT_DATETIME,  
    AUDIT_FLAG,  
    AUDIT_TABLE,  
    AUDIT_DETAILS,  
    ProjectionID,  
    CustomerAccountNumber,  
    Year,  
    ExpectedIncome,  
    MODIFIED_DATE,  
    MODIFIED_USER_ID,  
    CREATED_DATE,  
    CREATED_USER_ID,  
    DELETED_USER_ID)  
  
  SELECT  
    I.modified_user_id,   
    GETDATE(),   
    'U',  
    'TBL_BR_PIFProjection',      
    'LOGIN_NAME->'+ SYSTEM_USER+',SYSTEM_ID->'+HOST_ID()+',HOST_NAME->'+HOST_NAME()+',USER->'+USER,  
    D.ProjectionID,  
    D.CustomerAccountNumber,  
    D.Year,  
    D.ExpectedIncome,  
    D.MODIFIED_DATE,  
    D.MODIFIED_USER_ID,  
    D.CREATED_DATE,  
    D.CREATED_USER_ID,  
    D.DELETED_USER_ID  
  
  From Deleted D inner join inserted I on I.ProjectionId = D.ProjectionID  
     
  
   
 END  
 ELSE  
 IF (select count(*) from Inserted) > 0   
 BEGIN  
  
  insert into TBL_BR_AUDIT_PIFPROJECTION  
    (AUDIT_USER_ID ,  
     AUDIT_DATETIME,  
     AUDIT_FLAG,  
     AUDIT_TABLE,  
     AUDIT_DETAILS,  
     ProjectionID,  
     CustomerAccountNumber,  
    Year,  
    ExpectedIncome,  
    MODIFIED_DATE,  
    MODIFIED_USER_ID,  
    CREATED_DATE,  
    CREATED_USER_ID,  
    DELETED_USER_ID)  
  
  SELECT  
     ISNULL(I.modified_user_id, @UNKNOWN_ID),  
     GETDATE(),   
    'I',  
    'TBL_BR_PIFProjection',      
    'LOGIN_NAME->'+ SYSTEM_USER+',SYSTEM_ID->'+HOST_ID()+',HOST_NAME->'+HOST_NAME()+',USER->'+USER,  
    I.ProjectionID,  
    I.CustomerAccountNumber,  
    I.Year,  
    I.ExpectedIncome,  
    I.MODIFIED_DATE,  
    I.MODIFIED_USER_ID,  
    I.CREATED_DATE,  
    I.CREATED_USER_ID,  
    I.DELETED_USER_ID  
  From Inserted I   
  
 END  
 ELSE  
 If (Select count(*) from Deleted) > 0   
 BEGIN  
  
  
  insert into TBL_BR_AUDIT_PIFPROJECTION  
    (AUDIT_USER_ID ,  
     AUDIT_DATETIME,  
     AUDIT_FLAG,  
     AUDIT_TABLE,  
     AUDIT_DETAILS,  
     ProjectionID,  
     CustomerAccountNumber,  
    Year,  
    ExpectedIncome,  
    MODIFIED_DATE,  
    MODIFIED_USER_ID,  
    CREATED_DATE,  
    CREATED_USER_ID,  
    DELETED_USER_ID)  
  
  SELECT  
    ISNULL(DELETED_USER_ID,@UNKNOWN_ID),   
    GETDATE(),   
    'D',  
    'TBL_BR_PIFProjection',      
    'LOGIN_NAME->'+ SYSTEM_USER+',SYSTEM_ID->'+HOST_ID()+',HOST_NAME->'+HOST_NAME()+',USER->'+USER,  
    D.ProjectionID,  
    D.CustomerAccountNumber,  
    D.Year,  
    D.ExpectedIncome,  
    D.MODIFIED_DATE,  
    D.MODIFIED_USER_ID,  
    D.CREATED_DATE,  
    D.CREATED_USER_ID,  
    D.DELETED_USER_ID      
  
  From Deleted D   
  
   
 END  
  
  END TRY  
  BEGIN CATCH  
  
  Set @Errormessage = ERROR_MESSAGE();  
  Set @Errornumber = ERROR_NUMBER();  
  
  ROLLBACK TRANSACTION;  
  
  Select @AccountID = CustomerAccountNumber  
  From Inserted;  
  
  Set @val1 = Cast(@AccountID as varchar(30));  
  
  exec USP_EX_SYSErrorHandler @codename = @trgname,  
  @Errormessage = @Errormessage,   
  @Errornumber = @Errornumber,  
  @val1 = @val1,   
  @val1str = 'AccountID'   
  END CATCH  
    
  COMMIT TRANSACTION;  
  
  GO

IF EXISTS (	SELECT * FROM sysobjects
		    WHERE type = 'TR' AND name = 'TRG_EX_AudPIFProjection')
BEGIN
	PRINT 'CREATED TRIGGER TRG_EX_AudPIFProjection';
END 
  
    