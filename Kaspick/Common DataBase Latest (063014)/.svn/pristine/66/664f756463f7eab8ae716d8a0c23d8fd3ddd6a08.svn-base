/****** Object:  StoredProcedure [dbo].[USP_PP_GetAccountManagerCode]    Script Date: 04/29/2014 09:22:21 ******/
IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = OBJECT_ID(N'[dbo].[USP_PP_GetAccountManagerCode]')
			AND type IN (
				N'P'
				,N'PC'
				)
		)
	DROP PROCEDURE [dbo].[USP_PP_GetAccountManagerCode]
GO

/****** Object:  StoredProcedure [dbo].[USP_PP_GetAccountManagerCode]    Script Date: 04/29/2014 09:22:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/******************************************************************************                      
** Name		 : USP_PP_GetAccountManagerCode                      
** Short Desc: To get Account Manger Codes from InnoTrust Repl database based on Loged in User
**                      
** Full Description: To get Account Manger Codes from InnoTrust Repl database based on Loged in User           
**        
**                              
** Input Arguments:  
	 @UserID	INT
**         
** Sample Call     
   EXEC USP_PP_GetAccountManagerCode  100023
                 
**                      
** Standard declarations                      
**       SET LOCK_TIMEOUT         30000   -- 30 seconds                      
**                       
** Created By: Saravanan P Muthu
** Company   : Kaspick & Company                      
** Project   : BackOffice Integration                      
** Created DT: 29-Apr-2014                 
**                                  
*******************************************************************************                
**       Change History                      
*******************************************************************************                
** Date:      Author:	 Bug #     Description:                           
** --------  --------	 ------    -------------------------------------- 
** 26-jun-14   Salih               Modified Rolecode implementation from Rolecode description to ID.
**
*******************************************************************************                      
** Copyright (C) <CopyrightYear,,Year> Kaspick & Company, All Rights Reserved                      
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION                      
*******************************************************************************/
CREATE PROCEDURE [dbo].[USP_PP_GetAccountManagerCode] @UserID INT
AS
--  Initial Set statements  --    
SET NOCOUNT ON;
SET LOCK_TIMEOUT 30000;-- 30 seconds   

-- Body of procedure  --        
BEGIN TRY
	DECLARE @TmpAccountManagerCode TABLE (
		ManagerCode VARCHAR(4)
		,ManagerDescription VARCHAR(35)
		,[Level] VARCHAR(15)
		,ActiveFlag INT
		)

	--1.0 Get Manager Code collection
	--1.1 Insert Primary & Back-up Managers
	INSERT INTO @TmpAccountManagerCode (
		ManagerCode
		,ManagerDescription
		,[Level]
		,ActiveFlag
		)
	SELECT am.ManagerCode
		,am.ManagerName
		,(
			CASE -- 26-jun-2014  Salih: Modified Rolecode implementation from Rolecode description to ID.
				WHEN cr.ID = 2 -- 'Administrator'
					OR cr.ID = 14 -- Investment Officer <-- 'Relationship Manager'
					THEN 'Primary'
				WHEN cr.ID = 3 -- 'Backup Administrator'
					OR cr.ID = 512 -- 'Backup Relationship Manager'
					THEN 'Secondary'
				WHEN cr.ID = 26 -- 'Plan Administrator'
					OR cr.ID = 510 -- 'Trust Administrator'
					OR cr.ID = 515 -- 'Portfolio Analyst'
					OR cr.ID = 518 -- 'Custody Ops Administrator'
					OR cr.ID = 519 -- 'Reporting Analyst'
					THEN 'Both'
				END
			) AS [Level]
		,am.ActiveFlag
	FROM TBL_KS_User u
	INNER JOIN SYN_IT_SubContactRoles sub
		ON sub.SubContactID = u.InnotrustContactID
	INNER JOIN SYN_IT_ContactRoleCodes cr
		ON cr.ID = sub.ContactRoleCode
	INNER JOIN SYN_IT_AccountManagerCodes am
		ON am.ContactID = sub.ContactID
	WHERE cr.ID IN (
			-- 26-jun-2014  Salih: Modified Rolecode implementation from Rolecode description to ID.
			2 -- 'Administrator'
			,3 -- 'Backup Administrator'
			,14 -- Investment Officer <-- 'Relationship Manager'
			,512 -- 'Backup Relationship Manager'
			,26 -- 'Plan Administrator'
			,510 -- 'Trust Administrator'
			,515 -- 'Portfolio Analyst'
			,518 -- 'Custody Ops Administrator'
			,519 -- 'Reporting Analyst'
			)
		AND UserID = @UserID

	--1.2 Insert All Managers (except Primary & Backu-up)
	INSERT INTO @TmpAccountManagerCode (
		ManagerCode
		,ManagerDescription
		,[Level]
		,ActiveFlag
		)
	SELECT am.ManagerCode
		,am.ManagerName
		,'All' AS [Level]
		,am.ActiveFlag
	FROM SYN_IT_AccountManagerCodes am
	LEFT OUTER JOIN @TmpAccountManagerCode TempAM
		ON am.ManagerCode = TempAM.ManagerCode
	WHERE TempAM.ManagerCode IS NULL

	--2.0 Get Account Collection
	SELECT ManagerCode
		,ManagerDescription
		,[Level]
		,ActiveFlag
	FROM @TmpAccountManagerCode
	ORDER BY ManagerCode

	SELECT AM.ManagerCode
		,AMC.ManagerName AS ManagerDescription
		,AM.AllianceNumber
		,Alliance.AllianceDesc AS AllianceDescription
		,AM.CustomerAccountNumber
		,AM.CustomerShortName AS AccountName
		,AM.AccountTypeCode
		,AM.ActiveFlag
	FROM SYN_IT_AccountMaster AM
	LEFT OUTER JOIN SYN_IT_AccountManagerCodes AMC
		ON AM.ManagerCode = AMC.ManagerCode
	LEFT OUTER JOIN SYN_IT_AllianceNumbers Alliance
		ON AM.AllianceNumber = Alliance.AllianceNumber
	ORDER BY AM.CustomerAccountNumber
END TRY

BEGIN CATCH
	DECLARE @ErrorMessage NVARCHAR(4000);
	DECLARE @ErrorSeverity INT;
	DECLARE @ErrorState INT;

	SELECT @ErrorMessage = ERROR_MESSAGE()
		,@ErrorSeverity = ERROR_SEVERITY()
		,@ErrorState = ERROR_STATE();

	RAISERROR (
			@ErrorMessage
			,-- Message text.
			@ErrorSeverity
			,-- Severity.
			@ErrorState -- State.
			);

	PRINT N'The transaction is in an uncommittable state. ' + 'Rolling back transaction.'
END CATCH
