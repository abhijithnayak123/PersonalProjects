/****** Object:  StoredProcedure [dbo].[USP_TR_GetAllEvent]    Script Date: 03/06/2014 10:39:45 ******/
IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = OBJECT_ID(N'[dbo].[USP_TR_GetAllEvent]')
			AND type IN (
				N'P'
				,N'PC'
				)
		)
	DROP PROCEDURE [dbo].[USP_TR_GetAllEvent]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/******************************************************************************            
** Name   :   USP_TR_GetAllEvent            
** Short Desc : Get all Events           
**            
** Full Description : Get all Events       
**                    
**            
** Sample Call            
        EXEC USP_TR_GetAllEvent 'All Clients','All','All','All','02/22/2009','03/09/2014','<EventTypeMasterCollection><InsertList><EventTypeMaster EventType="Gifted Stock Sale"  EventTypeID="14" /><EventTypeMaster EventType="Bond Maturity Reinvestment"  EventTypeID="19" /></InsertList></EventTypeMasterCollection>',100316
        EXEC USP_TR_GetAllEvent 'All Clients','SA','All','All','02/22/2014','09/09/2014','<EventTypeMasterCollection><InsertList><EventTypeMaster EventType="All"  EventTypeID="-1" /></InsertList></EventTypeMasterCollection>',100124  
        EXEC USP_TR_GetAllEvent 'My Clients','All','All','All','02/22/2014','09/17/2014','<EventTypeMasterCollection><InsertList><EventTypeMaster EventType="All"  EventTypeID="-1" /></InsertList></EventTypeMasterCollection>',100124    
**            
** Return values: NONE            
**            
**            
** Standard declarations            
**       SET LOCK_TIMEOUT         30000   -- 30 seconds            
**             
** Created By :  Soorya       
** Company  :  Kaspick & Company            
** Project  :  Back Office Integration - TRex            
** Created DT :  03/06/2014            
**                        
*******************************************************************************            
**       Change History            
*******************************************************************************            
** Date:        Author:  Bug #     Description:                           Rvwd            
** --------     -------- ------    -------------------------------------- --------            
** 03/06/2014	Soorya 
** 26-jun-14   Salih               Modified Rolecode implementation from Rolecode description to ID.   
******************************************************************************            
** Copyright (C) 2007 Kaspick & Company, All Rights Reserved            
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION            
*******************************************************************************/
CREATE PROCEDURE [dbo].[USP_TR_GetAllEvent] (
	@ManagerCodeGroup VARCHAR(20)
	,@ManagerCode VARCHAR(5)
	,@CustomerAccountNumber VARCHAR(10)
	,@EventStatus VARCHAR(50)
	,@FromDate DATETIME
	,@ToDate DATETIME
	,@EventTypeXML XML
	,@UserID INT
	)
AS
BEGIN
	--  Initial Set statements  --          
	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 30000;-- 30 seconds          
		--SET TRANSACTION ISOLATION LEVEL SNAPSHOT;          

	DECLARE @AnalysisPrepStatusId AS INT
	DECLARE @ProposedStatusId AS INT
	DECLARE @ApprovedStatusId AS INT
	DECLARE @SubmittedStatusId AS INT
	DECLARE @ReconciledStatusId AS INT
	DECLARE @Review1StatusId AS INT

	SELECT @AnalysisPrepStatusId = EventStatusID
	FROM TBL_TR_EventStatus
	WHERE EVENTSTATUS = 'AnalysisPrep'

	SELECT @ProposedStatusId = EventStatusID
	FROM TBL_TR_EventStatus
	WHERE EVENTSTATUS = 'Proposed'

	SELECT @ApprovedStatusId = EventStatusID
	FROM TBL_TR_EventStatus
	WHERE EVENTSTATUS = 'Approved'

	SELECT @SubmittedStatusId = EventStatusID
	FROM TBL_TR_EventStatus
	WHERE EVENTSTATUS = 'Submitted'

	SELECT @ReconciledStatusId = EventStatusID
	FROM TBL_TR_EventStatus
	WHERE EVENTSTATUS = 'Reconciled'

	SELECT @Review1StatusId = EventStatusID
	FROM TBL_TR_EventStatus
	WHERE EVENTSTATUS = 'Review1'

	CREATE TABLE #Temp (
		CustomerAccountNumber CHAR(14)
		,TaxYear INT
		,PaymentDate VARCHAR(20)
		,ScheduledAmount VARCHAR(20)
		)

	INSERT INTO #Temp (
		CustomerAccountNumber
		,TaxYear
		,PaymentDate
		,ScheduledAmount
		)
	SELECT CustomerAccountNumber
		,TaxYear
		,MIN(PaymentDate)
		,MAX(ScheduledAmount)
	FROM TBL_PP_AccountPayoutSchedule
	WHERE PaymentDate > CURRENT_TIMESTAMP
	GROUP BY CustomerAccountNumber
		,TaxYear

	CREATE TABLE #EventTypeMaster (
		EventTypeID INT
		,EventType VARCHAR(150)
		)

	INSERT INTO #EventTypeMaster
	SELECT TypeTable.TypeColumns.value('@EventTypeID', 'INT')
		,TypeTable.TypeColumns.value('@EventType', 'VARCHAR(150)')
	FROM @EventTypeXML.nodes('/EventTypeMasterCollection/InsertList/EventTypeMaster') AS TypeTable(TypeColumns)

	IF EXISTS (
			SELECT 1
			FROM #EventTypeMaster
			WHERE EventTypeID = - 1
			)
	BEGIN
		TRUNCATE TABLE #EventTypeMaster

		INSERT INTO #EventTypeMaster
		SELECT EventTypeID
			,EventType
		FROM TBL_TR_EVENTTYPEMASTER
	END

	SELECT AcntMgr.ManagerCode
		,Evnt.EVENTID
		,Evnt.EventName
		,Evnt.EventStatusID
		,EvntSts.EventStatus
		,Evnt.RecordVersion AS EventRecordVersion
		,Evnt.LastModifiedUserID AS EventLastModifiedUser
		,Evnt.LastModifiedDate AS EventLastModifiedDate
		,Evnt.CombinedAccount
		,Evnt.CreatedDate
		,Evnt.EventSource
		,Evnt.Comments
		,Evnt.TradeComment AS UpdatedComments
		,Evnt.CancelComment
		,Evnt.AXYSPositionDate
		,Evnt.LoadPaymentsDataUpTo
		,Evnt.ImposeBenePayment
		,Evnt.[Source]
		,Evnt.SourceFille
		,EvntAcnt.EventAccountID
		,EvntAcnt.EventID
		,EvntAcnt.CustomerAccountNumber
		,EvntAcnt.AccountOrder
		,EvntAcnt.AccountName
		,EvntAcnt.AccountType
		,EvntAcnt.PayoutRate
		,EvntAcnt.AnnuityAmount
		,EvntAcnt.SLMasterAccount
		,EvntAcnt.Managed
		,EvntAcnt.Custodian
		,EvntAcnt.CustodianAccountNumber
		,EvntAcnt.InvestmentTypeCode
		,EvntAcnt.TaxStatus
		,EvntAcnt.TradeDiscretion
		,EvntAcnt.TradeStatusCode
		,EvntAcnt.FSIOption
		,EvntAcnt.InvestmentComment
		,EvntAcnt.TrancheStatusCode
		,EvntAcnt.ImposedBenePayment
		,EvntAcnt.ObjectiveCode
		,EvntAcnt.LotAccountingCode
		,EvntAcnt.RecordVersion AS EventAccountRecordVersion
		,EvntAcnt.LastModifiedUserID AS EventAccountLastModifiedUser
		,EvntAcnt.LastModifiedDate AS EventAccountLastModifiedDate
		,EvntTypMstr.EventTypeID
		,EvntTypMstr.EventType
		,EvntTypMstr.RiskLevel
		,Usr1.LoginName AS EventCreatedUserName
		,Usr2.LoginName AS EventAccountAssignedTraderName
		,ISNULL(Evnt.BlockRevokeApproval, 0) AS HasSubmittedQuantityTillDate
		,Reviewer.LoginName AS Reviewer
		,CASE 
			WHEN Evnt.EventStatusID IN (
					@AnalysisPrepStatusId
					,@ReconciledStatusId
					)
				THEN AntPay.PaymentDate
			WHEN Evnt.EventStatusID IN (
					@ProposedStatusId
					,@ApprovedStatusId
					,@SubmittedStatusId
					)
				THEN EvntAcnt.PaymentDate
			WHEN Evnt.EventStatusID > @ReconciledStatusId
				THEN RvEvAcnt.PaymentDate
			END AS PaymentDate
		,CASE 
			WHEN Evnt.EventStatusID IN (
					@AnalysisPrepStatusId
					,@ReconciledStatusId
					)
				THEN AntPay.ScheduledAmount
			WHEN Evnt.EventStatusID IN (
					@ProposedStatusId
					,@ApprovedStatusId
					,@SubmittedStatusId
					)
				THEN EvntAcnt.ScheduledAmount
			WHEN Evnt.EventStatusID > @ReconciledStatusId
				THEN RvEvAcnt.ScheduledAmount
			END AS ScheduledAmount
		,CASE 
			WHEN Evnt.EventStatusID IN (
					@AnalysisPrepStatusId
					,@ReconciledStatusId
					)
				THEN AthImLvl1.IMlevel1Count
			WHEN Evnt.EventStatusID IN (
					@ProposedStatusId
					,@ApprovedStatusId
					,@SubmittedStatusId
					)
				THEN EvntAcnt.IMlevel1Count
			WHEN Evnt.EventStatusID > @ReconciledStatusId
				THEN RvEvAcnt.IMlevel1Count
			END AS IMlevel1Count
		,CASE 
			WHEN Evnt.EventStatusID IN (
					@AnalysisPrepStatusId
					,@ReconciledStatusId
					)
				THEN AthImLvl2.IMlevel2Count
			WHEN Evnt.EventStatusID IN (
					@ProposedStatusId
					,@ApprovedStatusId
					,@SubmittedStatusId
					)
				THEN EvntAcnt.IMlevel2Count
			WHEN Evnt.EventStatusID > @ReconciledStatusId
				THEN RvEvAcnt.IMlevel2Count
			END AS IMlevel2Count
		,CASE 
			WHEN Evnt.EventStatusID IN (
					@AnalysisPrepStatusId
					,@ReconciledStatusId
					)
				THEN AnlAcntPay.EstAnnualPayout
			WHEN Evnt.EventStatusID IN (
					@ProposedStatusId
					,@ApprovedStatusId
					,@SubmittedStatusId
					)
				THEN EvntAcnt.AnnualPayment
			WHEN Evnt.EventStatusID > @ReconciledStatusId
				THEN RvEvAcnt.AnnualPayment
			END AS AnnualPayment
	FROM TBL_TR_EVENT Evnt
	INNER JOIN TBL_TR_EVENTACCOUNT EvntAcnt ON EvntAcnt.EVENTID = Evnt.EVENTID
	INNER JOIN TBL_TR_AUDIT_Event AudEvnt ON Evnt.EVENTID = AudEvnt.EVENTID
		AND AudEvnt.AuditFlag = 'I'
	INNER JOIN TBL_TR_EVENTTYPE EvnTyp ON EvnTyp.EVENTID = Evnt.EVENTID
	INNER JOIN TBL_TR_EVENTTYPEMASTER EvntTypMstr ON EvnTyp.EventTypeID = EvntTypMstr.EventTypeID
	INNER JOIN #EventTypeMaster TempEvntTypMstr ON TempEvntTypMstr.EventTypeID = EvntTypMstr.EventTypeID
	INNER JOIN TBL_TR_EVENTSTATUS EvntSts ON Evnt.EventStatusID = EvntSts.EventStatusID
	INNER JOIN SYN_IT_AccountMaster AcntMgr ON AcntMgr.CustomerAccountNumber = EvntAcnt.CustomerAccountNumber
	LEFT OUTER JOIN (
		SELECT CustomerAccountNumber
			,EstAnnualPayout
			,PayoutYear
		FROM TBL_PP_AnnualAccountPayoutInfo
		WHERE PayoutYear = YEAR(GETDATE())
		) AnlAcntPay ON AnlAcntPay.CustomerAccountNumber = AcntMgr.CustomerAccountNumber
	LEFT OUTER JOIN TBL_KS_USER Usr1 ON Evnt.CreatedUserID = Usr1.UserID
	LEFT OUTER JOIN TBL_KS_USER Usr2 ON Evnt.AssignedTraderID = Usr2.UserID
	LEFT OUTER JOIN (
		SELECT AcntMgrCod.ManagerCode
			,ISNULL(UCntMstr.UDFCMColumn013, 0) AS IMlevel2Count
		FROM SYN_IT_AccountManagerCodes AcntMgrCod
		INNER JOIN SYN_IT_SubContactRoles SubCntRol ON AcntMgrCod.ContactID = SubCntRol.ContactID
		INNER JOIN SYN_IT_ContactMaster CntMstr ON CntMstr.ContactID = SubCntRol.SubContactID
		INNER JOIN SYN_IT_UDF_ContactMaster UCntMstr ON UCntMstr.ContactID_Key = CntMstr.ContactID
		INNER JOIN SYN_IT_ContactRoleCodes CntRolCod ON CntRolCod.ID = SubCntRol.ContactRoleCode
			-- 26-jun-2014  Salih: Modified Rolecode implementation from Rolecode description to ID.
			AND CntRolCod.ID = 553 -- 'Authorized IM Level 2'
		) AthImLvl2 ON AthImLvl2.ManagerCode = AcntMgr.ManagerCode
	LEFT OUTER JOIN (
		SELECT AcntMgrCod.ManagerCode
			,ISNULL(UCntMstr.UDFCMColumn013, 0) AS IMlevel1Count
		FROM SYN_IT_AccountManagerCodes AcntMgrCod
		INNER JOIN SYN_IT_SubContactRoles SubCntRol ON AcntMgrCod.ContactID = SubCntRol.ContactID
		INNER JOIN SYN_IT_ContactMaster CntMstr ON CntMstr.ContactID = SubCntRol.SubContactID
		INNER JOIN SYN_IT_UDF_ContactMaster UCntMstr ON UCntMstr.ContactID_Key = CntMstr.ContactID
		INNER JOIN SYN_IT_ContactRoleCodes CntRolCod ON CntRolCod.ID = SubCntRol.ContactRoleCode
			-- 26-jun-2014  Salih: Modified Rolecode implementation from Rolecode description to ID.
			AND CntRolCod.ID = 552 -- 'Authorized IM Level 1'
		) AthImLvl1 ON AthImLvl1.ManagerCode = AcntMgr.ManagerCode
	LEFT OUTER JOIN (
		SELECT CustomerAccountNumber
			,TaxYear
			,PaymentDate
			,ScheduledAmount
		FROM #Temp
		) AS AntPay ON AntPay.CustomerAccountNumber = AcntMgr.CustomerAccountNumber
	LEFT OUTER JOIN TBL_TR_ReviewEventAccount RvEvAcnt ON RvEvAcnt.EventAccountID = EvntAcnt.EventAccountID
	LEFT OUTER JOIN (
		SELECT EvntTrkr.EventID
			,EvntTrkr.ModifiedUserID
			,EvntTrkr.ModifiedDate
			,ROW_NUMBER() OVER (
				PARTITION BY EvntTrkr.EventID ORDER BY EvntTrkr.ModifiedDate DESC
				) AS RowNum
		FROM TBL_TR_EventTracker EvntTrkr
		WHERE EventStatusID = @Review1StatusId
		) ReviewTracker ON ReviewTracker.EventID = Evnt.EventID
		AND RowNum = 1
	LEFT OUTER JOIN TBL_KS_USER Reviewer ON ReviewTracker.ModifiedUserID = Reviewer.UserID
	WHERE CONVERT(DATETIME, CONVERT(VARCHAR(25), Evnt.CreatedDate, 101)) BETWEEN CAST(@FromDate AS VARCHAR)
			AND CAST(@ToDate AS VARCHAR)
		AND (
			(
				@CustomerAccountNumber <> 'All'
				AND EvntAcnt.CustomerAccountNumber = @CustomerAccountNumber
				)
			OR (@CustomerAccountNumber = 'All')
			)
		AND (
			(
				@EventStatus <> 'All'
				AND EvntSts.EventStatus = @EventStatus
				)
			OR (@EventStatus = 'All')
			)
		AND (
			(
				AcntMgr.ManagerCode = @ManagerCode
				AND (
					@ManagerCodeGroup = 'All Clients'
					OR @ManagerCodeGroup = 'My Clients'
					)
				AND @ManagerCode <> 'All'
				)
			OR (
				(
					@ManagerCodeGroup = 'My Clients'
					AND @ManagerCode = 'All'
					)
				AND AcntMgr.ManagerCode IN (
					SELECT AccMgrCod.ManagerCode
					FROM TBL_KS_User Usr
					INNER JOIN SYN_IT_SubContactRoles SubCntRol ON SubCntRol.SubContactID = Usr.InnotrustContactID
						AND UserID = @UserID
					INNER JOIN SYN_IT_AccountManagerCodes AccMgrCod ON AccMgrCod.ContactID = SubCntRol.ContactID
					)
				)
			OR (
				@ManagerCode = 'All'
				AND @ManagerCodeGroup = 'All Clients'
				)
			)
	ORDER BY Evnt.EventID

	DROP TABLE #Temp
END

SET NOCOUNT OFF
