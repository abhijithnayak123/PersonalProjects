  IF EXISTS (SELECT *
       FROM   sysobjects 
       WHERE  type = 'P'
              AND name = 'USP_EIS_RPT_BR_VE_AllRulesData_SelProc')
BEGIN
    DROP PROCEDURE USP_EIS_RPT_BR_VE_AllRulesData_SelProc;
    PRINT 'DROPPED USP_EIS_RPT_BR_VE_AllRulesData_SelProc';
END
GO


/****** Object:  StoredProcedure [dbo].[USP_EIS_RPT_BR_VE_AllRulesData_SelProc]    Script Date: 06/25/2014 12:20:21 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/******************************************************************************                  
** Name:     USP_EIS_RPT_BR_VE_AllRulesData_SelProc                  
** Short Desc: To retrieve candidate deliverable items for validation process. 
**                  
** Full Description: To retrieve  details
**                          
** Input Arguments: 
**					
** Sample Call 
**		
	DECLARE @RuleCategory VARCHAR(max)
    DECLARE @XMLDeliverableItems XML
	DECLARE @SSISPackageMarketValueFile VARCHAR(max);
	DECLARE @SSISPackageMarketValueConfig VARCHAR(max);
	DECLARE @blnCallSSISPackage bit
    SET @XMLDeliverableItems ='<DeliverableItemsDataToValidateCollection><InsertList></InsertList><UpdateList></UpdateList>
	<DeleteList></DeleteList><SelectList><DeliverableItemsDataToValidate AccountID="446"  
	BeneficiaryID="645"  ClientEmployeeID="0"  Clientid="1"  DeliverableItemID="3"  DeliverableQueueID="1"  
	DonorID="0"  TrustparticipantID="27" DeliverableFrequency="A"  /></SelectList></DeliverableItemsDataToValidateCollection>' 
	SET @RuleCategory = 'Universe Rule'
	SET @SSISPackageMarketValueFile = 'D:\SSISPackageMarketValue_devtest\DT_DW_EndingMarketValue.dtsx';
	SET @SSISPackageMarketValueConfig ='D:\SSISPackageMarketValue_devtest\DT_DW_EndingMarketValue.dtsConfig'        	
	SET @blnCallSSISPackage = 'False'
	EXEC USP_EIS_RPT_BR_VE_AllRulesData_SelProc
    @XMLDeliverableItems,
	@RuleCategory,
	@SSISPackageMarketValueFile,
	@SSISPackageMarketValueConfig,
	@blnCallSSISPackage
	
**									
** Return values: Null
**                  
**                  
** Standard declarations                  
**       SET LOCK_TIMEOUT         30000   -- 30 seconds                  
**                   
** Created By: Venugopal B
** Company   : Kaspick & Company                  
** Project   : Excelsior  - BeneReport                  
** Created DT: 07/28/2009                  
**                              
*******************************************************************************            
**       Change History                  
*******************************************************************************            
** Date:        Author:  Bug #     Description:                           Rvwd            
** --------		-------- ------    -------------------------------------- --------            
** <MM/DD/YYYY>
*******************************************************************************                  
** Copyright (C) <CopyrightYear,,Year> Kaspick & Company, All Rights Reserved                  
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION                  
*******************************************************************************/                  
CREATE PROCEDURE [dbo].[USP_EIS_RPT_BR_VE_AllRulesData_SelProc]      
 -- paremeters here      
 @XMLDeliverableItems XML, 
 @RuleCategory VARCHAR(max),
 @SSISPackageMarketValueFile VARCHAR(max),
 @SSISPackageMarketValueConfig VARCHAR(max),
 @blnCallSSISPackage bit 
AS    
BEGIN  
	--  Initial SET statements  --      
	--SET NOCOUNT ON;      
	SET LOCK_TIMEOUT                120000;   -- 30 seconds      
	--SET TRANSACTION ISOLATION LEVEL SNAPSHOT;      

	--  Variable Declarations  --      
	DECLARE @procname    VARCHAR(60);      
	DECLARE @ErrorDesc     VARCHAR(1000);      
	DECLARE @ErrorNumber     INT; 
	DECLARE @MaxCnt INT;
	DECLARE @Cnt INT;
	DECLARE @SPNAME VARCHAR(100);
	DECLARE @SQL NVARCHAR(max);
	DECLARE @DatabaseName VARCHAR(100);    
   	-- Variables used for error handling - uncomment if needed      
	DECLARE @val1      VARCHAR(30);      
	DECLARE @val2      VARCHAR(30);      

	--  Temp tables, Cursors, Table Variables  --      
	CREATE TABLE #XMLInput (    
		XMLInputdata    xml);    
	    
	CREATE TABLE #RuleData(    
		DeliverableItemID INT,     
		RuleID INT,     
		Attribute VARCHAR(max),    
		ActualValue VARCHAR(max),
		DisplayMessage VARCHAR(max))

	DECLARE  @ActiveRules TABLE(
		ID INT IDENTITY(1,1)  ,
		RuleID INT,
		SPNAME VARCHAR(100),
		DatabaseName VARCHAR(100))

	--  Variable Data Assignment  --      
	SET @procname = 'USP_EIS_RPT_BR_VE_AllRulesData_SelProc';      

	-- Body of procedure  --      
	BEGIN TRY      
		INSERT INTO #XMLInput VALUES (@XMLDeliverableItems);
		INSERT INTO @ActiveRules
		SELECT ValidationRuleID, SPNAME, DatabaseName FROM TBL_DLV_ValidationRule  -- changed the Kaspick DB table as StagingDB table is missing
		WHERE IsActive=1
		AND RuleCategoryID = 
			(SELECT LIST_ITEM_ID FROM
			 V_EIS_LIST_ITEMS 
			 WHERE LIST_ITEM_NAME = @RuleCategory 
			 AND LIST_TYPE_NAME = 'BeneReports Validation Engine Rule Category')      
		AND ISNULL(SPNAME,'') <> ''
		--USP_EIS_RPT_BR_SSIS_SelProc calculates Ending Market Value which
		--is needed for rule #101: Invalid Ending Market Value
		IF (@blnCallSSISPackage=1) AND EXISTS(SELECT RuleID FROM  @ActiveRules WHERE RuleID = 101)
			BEGIN
			  EXEC USP_RP_GetRPTBRSSIS
			  @SSISPackageMarketValueFile,
			  @SSISPackageMarketValueConfig
			END 
 
		SELECT @MaxCnt = COUNT(RuleID) FROM  @ActiveRules
		SET @Cnt=1
		WHILE (@Cnt<=@MaxCnt)
		BEGIN
			SELECT @SPNAME=SPNAME, @DatabaseName=DatabaseName FROM @ActiveRules WHERE ID = @Cnt;
			SET @SQL=NULL;
			SET @SQL ='DECLARE @xml xml
			SElect @xml = XMLInputdata FROM #XMLInput	 
			USE [' +@DatabaseName + ']
			SET ARITHABORT ON
			INSERT INTO #RuleData
			EXEC ' + @SPNAME +' @xml';
			
			print @SQL
			exec sp_executesql @SQL
			SET @Cnt= @Cnt+1;
		END
		SELECT * FROM #RuleData
	    DROP TABLE #XMLInput
		DROP TABLE #RuleData  
	END TRY      
	BEGIN CATCH      
   		SET @ErrorDesc = ERROR_MESSAGE();      
		SET @ErrorNumber = ERROR_NUMBER();      
		SET @val1 = '';      
		SET @val2 = '';      
		  
		EXEC dbo.spSYS_ErrorHandler @codename = @procname,      
		@errmsg = @ErrorDesc,       
		@errnbr = @ErrorNumber,      
		@val1 = '',       
		@val1str = 'USP_EIS_RPT_BR_VE_AllRulesData_SelProc: Cannot Select.',       
		@val2 = '',       
		@val2str = '';      
	END CATCH      
	-- End of procedure  -- 
END

GO



GO
 IF EXISTS (SELECT *
           FROM   sysobjects 
           WHERE  type = 'P'
                  AND name = 'USP_EIS_RPT_BR_VE_AllRulesData_SelProc')
    BEGIN
        PRINT 'CREATED USP_EIS_RPT_BR_VE_AllRulesData_SelProc';
    END
