/****** Object:  StoredProcedure [dbo].[USP_OP_UpdTransactionErrors]    Script Date: 05/16/2014 14:12:59 ******/
IF EXISTS (
		SELECT *
		FROM sys.objects
		WHERE object_id = OBJECT_ID(N'[dbo].[USP_OP_UpdTransactionErrors]')
			AND type IN (
				N'P'
				,N'PC'
				)
		)
	DROP PROCEDURE [dbo].[USP_OP_UpdTransactionErrors]
GO

/****** Object:  StoredProcedure [dbo].[USP_OP_UpdTransactionErrors]    Script Date: 05/16/2014 14:12:59 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/******************************************************************************      
** Name   :   USP_OP_UpdTransactionErrors      
** Short Desc : Put in Short Description      
**      
** Full Description      
**              
**      
** Sample Call 
EXEC USP_OP_UpdTransactionErrors
	'<TransactionCollection>
	<InsertList>
	<Transaction 
	AccountFMV = "123.00"
	AdventId = "TLSHA"
	AXYSComment = ""
	AXYSPostDate = ""
	AXYSTransactionID = ""
	Broker = "" 
	Commission = ""
	CurrentResponse = "1"
	CurrentStatus = "1"
	IsError = ""
	IsRecon= ""
	IsSigCash= ""
	LotID= ""
	LotLocation= ""
	iOrigninalCostDate= ""
	RunID= ""
	SecuritySymbol= ""
	SecurityType= ""
	SourceSymbol= ""
	SourceType= ""
	TradeAmount= ""
	TradeDate= ""
	TradeQuantity= ""
	TransactionCode= ""
	TransactionComment= "Testing Resolve"
	TransactionDate= ""
	TransactionDescription= ""
	TransactionID = "16"
	UserDefinedCode= ""
    />
	</InsertList>
	</TransactionCollection>',
'','','Corrected'


   -- parameters      
**      
** Return values: NONE      
**      
**      
** Standard declarations      
**       SET LOCK_TIMEOUT         30000   -- 30 seconds      
**       
** Created By :		
** Company  :		Kaspick & Company      
** Project  :		T-Rex     
** Created DT :		July/9/2009      
**                  
*******************************************************************************      
**       Change History      
*******************************************************************************      
** Date:        Author:  Bug #     Description:                           Rvwd      
** --------     -------- ------    -------------------------------------- --------      
** July/9/2009                  Created    
******************************************************************************      
** Copyright (C) 2007 Kaspick & Company, All Rights Reserved      
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION      
*******************************************************************************/
CREATE PROCEDURE [dbo].[USP_OP_UpdTransactionErrors] (
	@XMLDATA XML
	,@isReview BIT
	,@IsErrorDashboard BIT
	,@ReturnStatus INT = - 1 OUTPUT
	,-- assume SP fails and 
	@ErrorDesc VARCHAR(8000) OUTPUT
	)
AS
BEGIN
	BEGIN TRY
		DECLARE @STATUSUPDATE AS VARCHAR(20)
		DECLARE @OLDCOMMNENTS AS VARCHAR(MAX)
		DECLARE @UserRole TABLE (
			ManagerCode VARCHAR(10)
			,contactID INT
			,ContactName VARCHAR(100)
			,contactrolecode INT
			,ContactRoleCodeDesc VARCHAR(100)
			,userid INT
			,firstname VARCHAR(50)
			,lastname VARCHAR(50)
			)

		INSERT INTO @UserRole
		EXEC USP_KS_GetUserRole

		SELECT @STATUSUPDATE = 'TRANSACTIONSTATUS'

		BEGIN TRANSACTION @STATUSUPDATE

		IF EXISTS (
				SELECT 1
				FROM TBL_OP_Transaction OPTRAN
				INNER JOIN (
					SELECT XMLDATA.item.value('@TransactionID[1]', 'INT') AS TransactionID
						,XMLDATA.item.value('@RecordVersion[1]', 'varchar(max)') AS TranRecordVersion
					FROM @XMLDATA.nodes('//TransactionCollection/InsertList/Transaction') AS XMLDATA(item)
					) tempTran ON tempTran.TransactionID = OPTRAN.TransactionID
					AND sys.fn_varbintohexsubstring(1, OPTRAN.recordversion, 1, 0) = tempTran.TranRecordVersion
				)
		BEGIN
			IF (@IsErrorDashboard = 'True')
			BEGIN
				IF (@isReview = 'False')
				BEGIN
					UPDATE TBL_OP_Transaction
					SET TransactionComment = CASE isnull(TEMPTRADE.TransactionComment, '')
							WHEN ''
								THEN TR.TransactionComment
							ELSE (TEMPTRADE.TransactionComment + ' : ErrorComment' + CHAR(10) + ISNULL(TR.TransactionComment, ''))
							END --TEMPTRADE.TransactionComment + CHAR(10)+(select ISNULL(TransactionComment,'') from TBL_OP_Transaction tr2 WHERE  tr2.TransactionID = TR.TransactionID)
						,CURRENTERRORSTATUS = TEMPTRADE.CurrentErrorStatus
						,CurrentErrorResponse = TEMPTRADE.CurrentErrorResponse
						,LastModifiedUserID = TEMPTRADE.LastModifiedUser
						,LastModifiedDate = GETDATE()
					FROM TBL_OP_Transaction TR
					INNER JOIN (
						SELECT XMLDATA.item.value('@TransactionID[1]', 'INT') AS TransactionID
							,XMLDATA.item.value('@TransactionComment[1]', 'VARCHAR(1000)') AS TransactionComment
							,XMLDATA.item.value('@CurrentErrorStatus[1]', 'CHAR(10)') AS CurrentErrorStatus
							,XMLDATA.item.value('@CurrentErrorResponse[1]', 'bigint') AS CurrentErrorResponse
							,XMLDATA.item.value('@LastModifiedUser[1]', 'INT') AS LastModifiedUser
						FROM @XMLDATA.nodes('//TransactionCollection/InsertList/Transaction') AS XMLDATA(item)
						) TEMPTRADE ON TEMPTRADE.TransactionID = TR.TransactionID
				END
				ELSE
				BEGIN
					UPDATE TBL_OP_Transaction
					SET TransactionComment = CASE isnull(TEMPTRADE.TransactionComment, '')
							WHEN ''
								THEN TR.TransactionComment
							ELSE (TEMPTRADE.TransactionComment + ' : ErrorComment' + CHAR(10) + ISNULL(TR.TransactionComment, ''))
							END --TEMPTRADE.TransactionComment + CHAR(10) + (select ISNULL(TransactionComment,'') from TBL_OP_Transaction tr2 WHERE  tr2.TransactionID = TR.TransactionID)
						,CurrentErrorStatus = TEMPTRADE.CurrentErrorStatus
						,LastModifiedUserID = TEMPTRADE.LastModifiedUser
						,LastModifiedDate = GETDATE()
					FROM TBL_OP_Transaction TR
					INNER JOIN (
						SELECT XMLDATA.item.value('@TransactionID[1]', 'INT') AS TransactionID
							,XMLDATA.item.value('@TransactionComment[1]', 'VARCHAR(1000)') AS TransactionComment
							,XMLDATA.item.value('@CurrentErrorStatus[1]', 'CHAR(10)') AS CurrentErrorStatus
							,XMLDATA.item.value('@LastModifiedUser[1]', 'INT') AS LastModifiedUser
						FROM @XMLDATA.nodes('//TransactionCollection/InsertList/Transaction') AS XMLDATA(item)
						) TEMPTRADE ON TEMPTRADE.TransactionID = TR.TransactionID
				END
			END
			ELSE
			BEGIN
				IF (@isReview = 'False')
				BEGIN
					UPDATE TBL_OP_Transaction
					SET TransactionComment = CASE isnull(TEMPTRADE.TransactionComment, '')
							WHEN ''
								THEN TR.TransactionComment
							ELSE (TEMPTRADE.TransactionComment + ' : ReconComment' + CHAR(10) + ISNULL(TR.TransactionComment, ''))
							END --TEMPTRADE.TransactionComment + CHAR(10)+(select ISNULL(TransactionComment,'') from TBL_OP_Transaction tr2 WHERE  tr2.TransactionID = TR.TransactionID)
						,CURRENTRECONSTATUS = TEMPTRADE.CurrentReconStatus
						,CurrentReconResponse = TEMPTRADE.CurrentReconResponse
						,LastModifiedUserID = TEMPTRADE.LastModifiedUser
						,LastModifiedDate = GETDATE()
					FROM TBL_OP_Transaction TR
					INNER JOIN (
						SELECT XMLDATA.item.value('@TransactionID[1]', 'INT') AS TransactionID
							,XMLDATA.item.value('@TransactionComment[1]', 'VARCHAR(1000)') AS TransactionComment
							,XMLDATA.item.value('@CurrentReconStatus[1]', 'CHAR(10)') AS CurrentReconStatus
							,XMLDATA.item.value('@CurrentReconResponse[1]', 'bigint') AS CurrentReconResponse
							,XMLDATA.item.value('@LastModifiedUser[1]', 'INT') AS LastModifiedUser
						FROM @XMLDATA.nodes('//TransactionCollection/InsertList/Transaction') AS XMLDATA(item)
						) TEMPTRADE ON TEMPTRADE.TransactionID = TR.TransactionID
				END
				ELSE
				BEGIN
					UPDATE TBL_OP_Transaction
					SET TransactionComment = CASE isnull(TEMPTRADE.TransactionComment, '')
							WHEN ''
								THEN TR.TransactionComment
							ELSE (TEMPTRADE.TransactionComment + ' : ReconComment' + CHAR(10) + ISNULL(TR.TransactionComment, ''))
							END --TEMPTRADE.TransactionComment + CHAR(10) + (select ISNULL(TransactionComment,'') from TBL_OP_Transaction tr2 WHERE  tr2.TransactionID = TR.TransactionID)
						,CURRENTRECONSTATUS = TEMPTRADE.CurrentReconStatus
						,LastModifiedUserID = TEMPTRADE.LastModifiedUser
						,LastModifiedDate = GETDATE()
					FROM TBL_OP_Transaction TR
					INNER JOIN (
						SELECT XMLDATA.item.value('@TransactionID[1]', 'INT') AS TransactionID
							,XMLDATA.item.value('@TransactionComment[1]', 'VARCHAR(1000)') AS TransactionComment
							,XMLDATA.item.value('@CurrentReconStatus[1]', 'CHAR(10)') AS CurrentReconStatus
							,XMLDATA.item.value('@LastModifiedUser[1]', 'INT') AS LastModifiedUser
						FROM @XMLDATA.nodes('//TransactionCollection/InsertList/Transaction') AS XMLDATA(item)
						) TEMPTRADE ON TEMPTRADE.TransactionID = TR.TransactionID
				END
			END

			SELECT TR.TRANSACTIONID
				,AM.CustomerAccountNumber
				,AM.ManagerCode AS ManagerCode
				,(ISNULL(ClntMngr.FirstName, '') + ' ' + ISNULL(ClntMngr.LastName, '')) AS CLIENTMANAGER
				,(ISNULL(TrstAdmin.FirstName, '') + ' ' + ISNULL(TrstAdmin.LastName, '')) AS TRUSTADMINISTRATOR
				,(ISNULL(trdr.FirstName, '') + ' ' + ISNULL(trdr.LastName, '')) AS TRADER
				,(ISNULL(OpsAdmin.FirstName, '') + ' ' + ISNULL(OpsAdmin.LastName, '')) AS PORTFOLIOADMINISTRATOR
				,TR.TRANSACTIONDESCRIPTION
				,TR.TRANSACTIONCODE
				,TR.SECURITYSYMBOL
				,TR.TRADEDATE
				,TR.TRADEQUANTITY
				,TR.TRADEAMOUNT
				,(
					CASE 
						WHEN isnull(TR.AccountFMV, 0) <> 0
							THEN ISNULL(((TR.TRADEAMOUNT) / (TR.AccountFMV)), 0)
						ELSE 0
						END
					) AS NEWDOLLARSAMOUNT
				--,ISNULL(((TR.TRADEAMOUNT)/(TR.AccountFMV)),0) AS NEWDOLLARSAMOUNT
				,ISNULL(TR.ACCOUNTFMV, 0) AS ACCOUNTFMV
				,TR.TRANSACTIONCOMMENT
				,TR.CurrentErrorResponse
				,TR.CurrentReconResponse
				,isnull(ERR.ResponseDescription, '') AS ErrorResponseDescription
				,isnull(RRR.ResponseDescription, '') AS ReconResponseDescription
				,TR.SourceType
				,TR.SecurityType AS SECURITYTYPE
				--,D.AccountID AS ACCOUNTNUMBER
				,TR.CURRENTERRORSTATUS
				,TR.CURRENTRECONSTATUS
				,TRDTIMP.RunStartDateTime AS IMPORTDATE
				,TR.RunID
				,TR.OrigninalCostDate
				,TR.SourceSymbol
				,TR.LotLocation
				,TR.Broker
				,TR.Commission
				,TR.LotID
				,TR.AXYSComment
				,TR.AXYSPostDate
				,TR.AXYSTransactionID
				,TR.UserDefinedCode
				,TR.IsError
				,TR.IsRecon
				,TR.IsSigCash
				,TRR.ReconciliationGroupID AS GroupID
				,TR.RecordVersion
				,TR.LastModifiedUserID
				,TR.LastModifiedDate
				,TR.IsManagedAccount
			FROM TBL_OP_Transaction TR
			INNER JOIN TBL_OP_TransactionStatus TS ON TS.StatusID = TR.CURRENTERRORSTATUS
			INNER JOIN SYN_IT_AccountMaster AM ON TR.CustomerAccountNumber = AM.CustomerAccountNumber
			INNER JOIN TBL_OP_TransactionDataImport TRDTIMP ON TR.RunID = TRDTIMP.RunID
			LEFT OUTER JOIN TBL_OP_ResolutionResponse RRR ON TR.CurrentReconResponse = RRR.ResponseID
			LEFT OUTER JOIN TBL_OP_ResolutionResponse ERR ON TR.CurrentErrorResponse = ERR.ResponseID
			LEFT OUTER JOIN TBL_OP_TransactionReconciliation TRR ON TRR.TransactionID = TR.TransactionID
			LEFT OUTER JOIN @UserRole ClntMngr ON ClntMngr.ManagerCode = am.ManagerCode
				AND ClntMngr.ContactRoleCode IN (2)
			LEFT OUTER JOIN @UserRole TrstAdmin ON TrstAdmin.ManagerCode = am.ManagerCode
				AND TrstAdmin.ContactRoleCode IN (510)
			LEFT OUTER JOIN @UserRole trdr ON trdr.ManagerCode = am.ManagerCode
				AND trdr.ContactRoleCode IN (515)
			LEFT OUTER JOIN @UserRole OpsAdmin ON OpsAdmin.ManagerCode = am.ManagerCode
				AND OpsAdmin.ContactRoleCode IN (517)
			WHERE TR.TRANSACTIONID IN (
					SELECT XMLDATA.item.value('@TransactionID[1]', 'INT') AS TrID
					FROM @XMLDATA.nodes('//TransactionCollection/InsertList/Transaction') AS XMLDATA(item)
					)

			IF (@@ERROR > 0)
			BEGIN
				ROLLBACK TRANSACTION @STATUSUPDATE;
			END

			COMMIT TRANSACTION @STATUSUPDATE;
		END
		ELSE
		BEGIN
			SET @ReturnStatus = - 2;
			SET @ErrorDesc = 'Dirty Write';

			ROLLBACK TRANSACTION @STATUSUPDATE;
		END
	END TRY

	BEGIN CATCH
		SET @RETURNSTATUS = - 1;
		SET @ERRORDESC = ERROR_MESSAGE();

		ROLLBACK TRANSACTION @STATUSUPDATE;
	END CATCH
END
GO


