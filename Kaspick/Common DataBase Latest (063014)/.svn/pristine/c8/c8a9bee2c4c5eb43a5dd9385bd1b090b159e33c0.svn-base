/****** Object:  StoredProcedure [dbo].[USP_TR_ReviewTSheet]    Script Date: 06/26/2013 16:48:51 ******/
IF EXISTS (
		SELECT 1
		FROM sys.objects
		WHERE object_id = OBJECT_ID(N'[dbo].[USP_TR_ReviewTSheet]')
			AND type IN (
				N'P'
				,N'PC'
				)
		)
	DROP PROCEDURE [dbo].[USP_TR_ReviewTSheet]
GO

/****** Object:  StoredProcedure [dbo].[USP_TR_ReviewTSheet]    Script Date: 06/26/2013 16:48:51 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/******************************************************************************                      
** Name		 : USP_TR_ReviewTSheet                      
** Short Desc: Reviews the Tsheet for the specified EventID
**                      
** Full Description: Updates the Event details and Post the TSheets records for specified EventIDs
**      
**                              
** Input Arguments:   	@EventID INT
**	,@ReturnStatus INT  OUTPUT
**	,@ErrorDesc VARCHAR(8000) OUTPUT             
** Sample Call     

 DECLARE @XMLTSheet XML
 DECLARE @XMLTSheetInvestmentCommentHistoryCollection XML
 DECLARE @XMLTSheetAuthorizedSignerCollection XML
 DECLARE @XMLTSheetTradeRestrictionCollection XML
 DECLARE @ReturnStatus INT     
 DECLARE @ErrorDesc VARCHAR(1000)   
 
SET @XMLTSheet = '<TSheet>
	   	<Event EventID="1" RecordVersion="0x00000000020A9F19"  ReviewAXYSPositionDate="2009-11-13"  ReviewImposeBenePayments="1" ReviewLoadPaymentsDataUpTo="2009-12-13" LastModifiedUserID="1" Comments="rbandak 11/18/2009 09:19: investing proceeds 11/18" UpdatedComments="" EventTrancheRate="" />
	   	<EventAccountCollection>
	   	   <EventAccount EventAccountID="" AccountType="CRUT" PayoutRate="6.5" AnnuityAmount="0" SLMasterAccount="08593924" Managed="1" Custodian="Charles Schwab"  CustodianAccountNumber="70676043" InvestmentTypeCode="M" TaxStatus="STGSensitive" TradeDiscretion="1" TradeStatusCode="Trade w/o Restrictions" FSIOption="CR" InvestmentComment="" TrancheStatusCode="Not Applicable" ImposedBenePayment="0" ObjectiveCode="VTGro" PoliByCli="Addition - Investment Of Asset - Fully Invest Immediately - 1tranche(s)/0days apart Addition - Sell of Assets - Immediately Sell All - 1tranche(s)/0days apart New Trust - Investment Of Asset - Fully Invest Immediately - 1tranche(s)/0days apart New Trust - Sell of Assets - Immediately Sell All - 1tranche(s)/0days apart" LastModifiedUserID="1" LotAccountingCode="FIFO" PaymentDate="" AnnualPayment="" ScheduledAmount="" IMlevel1Count="" IMlevel2Count=""/>
	   	</EventAccountCollection>
	   	<TSheetTradeProposalCollection> 
	   	    <TSheetTradeProposal EventID="1" EventAccountID="1" SecurityTypeCode="caus" SecurityTypeOrder="48"  SecurityTypeDescription="Cash and Equivalents" SecuritySymbol="Test" SecurityDescription="Test" TSheetTradeForReview ="0" AssetClass="Test" TargetPercentage="0" AdjustedPercentage="0" TotalDollarChange="0" TrancheDollarChange="0" TradeProposedDollarAmount="0" TradeProposedQuantity="0" TPlusOne="0" TPlusTwo="0" TPlusThree="0" SubmissionType="Phone" SellAll="0" LastModifiedUserID="1" IsAdd="0" IsSubstitute="0" IsExclude="0" IsAboveTheLine="1" />
	   	</TSheetTradeProposalCollection>
	   	<TSheetLotsCollection>
	   	   <TSheetLots LotID="0" Industry="" CostBasis="0" PortfolioCode="" UnitCost="" AquisitionDate="1900-01-01" SharePrice="6608.47" Marketvalue="" Quantity="0" UnrealizedGainLossDollars="0" UnrealizedGainLossPercentage="0" SecurityTypeCode="caus" SecuritySymbol="CSca" EventID="1" EventAccountID="1" LastModifiedUserID="100060" />
	   	</TSheetLotsCollection>
	    </TSheet> '
	    
	    SET @XMLTSheetInvestmentCommentHistoryCollection= '<InvestmentCommentHistoryCollection>
	          <InvestmentCommentHistory EventID="17365" EventAccountID="19181" EventStatusID="2" InvestmentCommentId="3531" CustomerAccountNumber="OSHAN" InvestmentComments="Trustee, John Fenner.Non-Discretionary" CreatedUserID="100124" ModifiedUserID="100124" CreatedDate="2011-03-01" />
	    </InvestmentCommentHistoryCollection>'
	    SET @XMLTSheetAuthorizedSignerCollection='<AuthorizedSignerCollection>
	    <AuthorizedSigner EventID="35665" EventAccountID="39853" EventStatusID="2" EmployeeID="102025" CustomerAccountNumber="VCGAPRMU" AuthorizationType="IM Level 1" UserName="USER1" />
	   </AuthorizedSignerCollection>'
	    SET @XMLTSheetTradeRestrictionCollection='<TradeRestrictionCollection>
	      <TradeRestriction EventID="17365" EventAccountID="19181" EventStatusID="2" TradeRestrictionID="194" CustomerAccountNumber="OSHAN" TradeRestrictionType="Cap Gains - Restricted" SecuritySymbol="" Comments="Cap gain sensitive.  NQI" CreatedBy="User1" StartDate="2011-03-01" EndDate="1900-01-01" />
</TradeRestrictionCollection>'

 EXEC dbo.USP_TR_ReviewTSheet @XMLTSheet,@XMLTSheetInvestmentCommentHistoryCollection,@XMLTSheetAuthorizedSignerCollection ,@XMLTSheetTradeRestrictionCollection,1,@ReturnStatus OUTPUT ,@ErrorDesc  OUTPUT
 Select @ReturnStatus ,@ErrorDesc 
**             
**                      
**                      
** Standard declarations                      
**       SET LOCK_TIMEOUT         30000   -- 30 seconds                      
**                       
** Created By: Mohamed Salih 
** Company   : Kaspick & Company                      
** Project   : BackOffice Integration                      
** Created DT: 11-Mar-14               
**                                  
*******************************************************************************                
**       Change History                      
*******************************************************************************                
** Date:      Author:	 Bug #     Description:                           
** --------  --------	 ------    -------------------------------------- 
** 
***
*******************************************************************************                      
** Copyright (C) <CopyrightYear,,Year> Kaspick & Company, All Rights Reserved                      
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION                      
*******************************************************************************/
CREATE PROCEDURE [dbo].[USP_TR_ReviewTSheet] (
	@XMLTSheet XML
	,@XMLTSheetInvestmentCommentHistoryCollection XML
	,@XMLTSheetAuthorizedSignerCollection XML
	,@XMLTSheetTradeRestrictionCollection XML
	,@ReviewUserID INT
	,@ReturnStatus INT = - 1 OUTPUT
	,@ErrorDesc VARCHAR(8000) OUTPUT
	)
AS
BEGIN
	--  Initial Set statements  --    
	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 30000;-- 30 seconds 

	--  Variable Declarations  --      
	IF EXISTS (
			SELECT 1
			FROM TEMPDB.DBO.SYSOBJECTS
			WHERE ID = OBJECT_ID(N'TEMPDB.[DBO].[#TmpTSheetEvent]')
			)
	BEGIN
		DROP TABLE [DBO].[#TmpTSheetEvent]
	END

	DECLARE @ProposalCount AS INT
	DECLARE @procname AS VARCHAR(15)

	SET @ProposalCount = 0

	SELECT @procname = 'USP_TR_ReviewTSheet'

	SELECT @ProposalCount = @XMLTSheet.value('count(/TSheet/TSheetTradeProposalCollection)', 'int')

	CREATE TABLE #TmpTSheetEvent (
		EventID INT
		,RecordVersion VARCHAR(1000)
		,ReviewAXYSPositionDate DATETIME
		,ReviewImposeBenePayments BIT
		,ReviewLoadPaymentsDataUpTo DATETIME
		,LastModifiedUserID INT
		,Comments VARCHAR(1000)
		)

	INSERT INTO #TmpTSheetEvent (
		EventID
		,RecordVersion
		,ReviewAXYSPositionDate
		,ReviewImposeBenePayments
		,ReviewLoadPaymentsDataUpTo
		,LastModifiedUserID
		,Comments
		)
	SELECT XMLInput.Item.value('@EventID[1]', 'int') AS EventID
		,XMLInput.Item.value('@RecordVersion[1]', 'VARCHAR(1000)') AS RecordVersion
		,XMLInput.Item.value('@ReviewAXYSPositionDate[1]', 'DateTime') AS ReviewAXYSPositionDate
		,XMLInput.Item.value('@ReviewImposeBenePayments[1]', 'bit') AS ReviewImposeBenePayments
		,XMLInput.Item.value('@ReviewLoadPaymentsDataUpTo[1]', 'DateTime') AS ReviewLoadPaymentsDataUpTo
		,XMLInput.Item.value('@LastModifiedUser[1]', 'int') AS LastModifiedUserID
		,XMLInput.Item.value('@Comments[1]', 'varchar(1000)') AS Comments
	FROM @XMLTSheet.nodes('//TSheet/Event') AS XMLInput(Item)

	BEGIN TRY
		BEGIN TRANSACTION @procname

		IF EXISTS (
				SELECT 1
				FROM TBL_TR_Event Evnt
				INNER JOIN #TmpTSheetEvent XmlInput ON XmlInput.EventID = Evnt.EventID
					AND sys.fn_varbintohexsubstring(1, Evnt.RecordVersion, 1, 0) = XmlInput.RecordVersion
				)
		BEGIN
			IF (@ProposalCount > 0)
			BEGIN
				DECLARE @CurrentEventStatus INT
				DECLARE @ReconciledStatusID INT
				DECLARE @Review1StatusID INT
				DECLARE @CompleteStatusID INT
				DECLARE @SpecialEventTypeCount BIGINT

				SELECT @ReconciledStatusID = EventStatusID
				FROM TBL_TR_EventStatus
				WHERE EventStatus = 'Reconciled'

				SELECT @Review1StatusID = EventStatusID
				FROM TBL_TR_EventStatus
				WHERE EventStatus = 'Review1'

				SELECT @CompleteStatusID = EventStatusID
				FROM TBL_TR_EventStatus
				WHERE EventStatus = 'Complete'

				SELECT @SpecialEventTypeCount = COUNT(1)
				FROM TBL_TR_EventType EvntType
				INNER JOIN #TmpTSheetEvent XmlInput ON XmlInput.EventID = EvntType.EventID
				INNER JOIN TBL_TR_EventTypeMaster ETMaster ON ETMaster.EventTypeID = EvntType.EventTypeID
				WHERE ETMaster.EventType IN (
						'High Cash'
						,'Low Cash'
						,'Rebalance'
						,'Benpmts'
						,'Full Liquidation'
						)

				SELECT @CurrentEventStatus = EventStatusID
				FROM TBL_TR_Event Evnt
				INNER JOIN #TmpTSheetEvent XmlInput ON XmlInput.EventID = Evnt.EventID

				UPDATE TBL_TR_Event
				SET EventStatusID = (
						CASE 
							WHEN ISNULL(Evnt.Source, '') <> 'TRex'
								THEN @CompleteStatusID
							ELSE (
									CASE 
										WHEN Evnt.EventStatusID = @ReconciledStatusID
											AND @SpecialEventTypeCount > 0
											THEN @CompleteStatusID
										ELSE (
												CASE 
													WHEN Evnt.EventStatusID = @ReconciledStatusID
														AND @SpecialEventTypeCount = 0
														THEN @Review1StatusID
													ELSE (
															CASE 
																WHEN Evnt.EventStatusID = @Review1StatusID
																	THEN @CompleteStatusID
																END
															)
													END
												)
										END
									)
							END
						)
					,ReviewAXYSPositionDate = XmlInput.ReviewAXYSPositionDate
					,ReviewImposeBenePayment = XmlInput.ReviewImposeBenePayments
					,LastModifiedUserID = XmlInput.LastModifiedUserID
					,LastModifiedDate = GetDate()
					,ReviewLoadPaymentsDataUpTo = XmlInput.ReviewLoadPaymentsDataUpTo
					,Comments = XmlInput.Comments
				FROM TBL_TR_Event Evnt
				INNER JOIN #TmpTSheetEvent XmlInput ON XmlInput.EventID = Evnt.EventID

				IF (@CurrentEventStatus = @ReconciledStatusID)
				BEGIN
					DELETE REAccnt
					FROM TBL_TR_ReviewEventAccount REAccnt
					INNER JOIN (
						SELECT XMLInput.Item.value('@EventAccountID', 'int') AS EventAccountID
						FROM @XMLTSheet.nodes('//TSheet/EventAccountCollection/EventAccount') AS XMLInput(Item)
						) XmlInput ON XmlInput.EventAccountID = REAccnt.EventAccountID

					DELETE TShtLot
					FROM TBL_TR_TSheetLot TShtLot
					INNER JOIN #TmpTSheetEvent XmlInput ON XmlInput.EventID = TShtLot.EventID
						AND TShtLot.TSheetTradeForReview = 1

					DELETE TTPrpsl
					FROM TBL_TR_TSheetTradeProposal TTPrpsl
					INNER JOIN #TmpTSheetEvent XmlInput ON XmlInput.EventID = TTPrpsl.EventID
						AND TTPrpsl.TSheetTradeForReview = 1

					INSERT INTO TBL_TR_ReviewEventAccount (
						[EventAccountID]
						,[AccountType]
						,[PayoutRate]
						,[AnnuityAmount]
						,[SLMasterAccount]
						,[Managed]
						,[Custodian]
						,[CustodianAccountNumber]
						,[InvestmentTypeCode]
						,[TaxStatus]
						,[TradeDiscretion]
						,[TradeStatusCode]
						,[FSIOption]
						,[InvestmentComment]
						,[TrancheStatusCode]
						,[ImposedBenePayment]
						,[ObjectiveCode]
						,[PoliByCli]
						,[LastModifiedUserID]
						,[LastModifiedDate]
						,[PaymentDate]
						,[AnnualPayment]
						,[ScheduledAmount]
						,[IMlevel1Count]
						,[IMlevel2Count]
						)
					SELECT XMLInput.Item.value('@EventAccountID', 'int') AS EventAccountID
						,XMLInput.Item.value('@AccountType', 'varchar(20)') AS AccountType
						,XMLInput.Item.value('@PayoutRate', 'float') AS PayoutRate
						,XMLInput.Item.value('@AnnuityAmount', 'money') AS AnnuityAmount
						,XMLInput.Item.value('@SLMasterAccount', 'varchar(20)') SLMasterAccount
						,XMLInput.Item.value('@Managed', 'bit') AS Managed
						,XMLInput.Item.value('@Custodian', 'varchar(150)') AS Custodian
						,XMLInput.Item.value('@CustodianAccountNumber', 'int') AS CustodianAccountNumber
						,XMLInput.Item.value('@InvestmentTypeCode', 'varchar(25)') AS InvestmentTypeCode
						,XMLInput.Item.value('@TaxStatus', 'varchar(20)') AS TaxStatus
						,XMLInput.Item.value('@TradeDiscretion', 'bit') AS TradeDiscretion
						,XMLInput.Item.value('@TradeStatusCode', 'varchar(25)') AS TradeStatusCode
						,XMLInput.Item.value('@FSIOption', 'varchar(2)') AS FSIOption
						,XMLInput.Item.value('@InvestmentComment', 'varchar(1000)') AS InvestmentComment
						,XMLInput.Item.value('@TrancheStatusCode', 'varchar(25)') AS TrancheStatusCode
						,XMLInput.Item.value('@ImposedBenePayments', 'money') AS ImposedBenePayments
						,XMLInput.Item.value('@ObjectiveCode', 'varchar(30)') AS ObjectiveCode
						,XMLInput.Item.value('@PoliByCli', 'varchar(1000)') AS PoliByCli
						,XMLInput.Item.value('@LastModifiedUser', 'int') AS LastModifiedUserID
						,GetDate()
						,XMLInput.Item.value('@PaymentDate', 'datetime') AS PaymentDate
						,XMLInput.Item.value('@AnnualPayment', 'money') AS AnnualPayment
						,XMLInput.Item.value('@ScheduledAmount', 'money') AS ScheduledAmount
						,XMLInput.Item.value('@IMlevel1Count', 'int') AS IMlevel1Count
						,XMLInput.Item.value('@IMlevel2Count', 'int') AS IMlevel2Count
					FROM @XMLTSheet.nodes('//TSheet/EventAccountCollection/EventAccount') AS XMLInput(Item)

					INSERT INTO [TBL_TR_TSheetTradeProposal] (
						[EventID]
						,[EventAccountID]
						,[SecurityTypeCode]
						,[SecurityTypeOrder]
						,[SecurityTypeDescription]
						,[SecuritySymbol]
						,[SecurityDescription]
						,[TSheetTradeForReview]
						,[AssetClass]
						,[TargetPercentage]
						,[AdjustedPercentage]
						,[TotalDollarChange]
						,[TrancheDollarChange]
						,[TradeProposedDollarAmount]
						,[TradeProposedQuantity]
						,[TPlusOne]
						,[TPlusTwo]
						,[TPlusThree]
						,[SubmissionType]
						,[SellAll]
						,[LastModifiedUserID]
						,[LastModifiedDate]
						,[IsAdd]
						,[IsSubstitute]
						,[IsExclude]
						,[IsAboveTheLine]
						)
					SELECT XMLInput.Item.value('@EventID', 'INT') AS EventID
						,XMLInput.Item.value('@EventAccountID', 'INT') AS EventAccountID
						,XMLInput.Item.value('@SecurityTypeCode', 'varchar(50)') AS SecurityTypeCode
						,XMLInput.Item.value('@SecurityTypeOrder', 'INT') AS SecurityTypeOrder
						,XMLInput.Item.value('@SecurityTypeDescription', 'varchar(150)') AS SecurityTypeDescription
						,XMLInput.Item.value('@SecuritySymbol', 'varchar(50)') AS SecuritySymbol
						,XMLInput.Item.value('@SecurityDescription', 'varchar(150)') AS SecurityDescription
						,1
						,XMLInput.Item.value('@AssetClass', 'varchar(100)') AS AssetClass
						,XMLInput.Item.value('@TargetPercentage', 'float') AS TargetPercentage
						,XMLInput.Item.value('@AdjustedPercentage', 'float') AS AdjustedPercentage
						,XMLInput.Item.value('@TotalDollarChange', 'money') AS TotalDollarChange
						,XMLInput.Item.value('@TrancheDollarChange', 'money') AS TrancheDollarChange
						,XMLInput.Item.value('@TradeProposedDollarAmount', 'float') AS TradeProposedDollarAmount
						,XMLInput.Item.value('@TradeProposedQuantity', 'float') AS TradeProposedQuantity
						,XMLInput.Item.value('@TPlusOne', 'money') AS TPlusOne
						,XMLInput.Item.value('@TPlusTwo', 'money') AS TPlusTwo
						,XMLInput.Item.value('@TPlusThree', 'money') AS TPlusThree
						,XMLInput.Item.value('@SubmissionType', 'varchar(20)') AS SubmissionType
						,XMLInput.Item.value('@SellAll', 'bit') AS SellAll
						,XMLInput.Item.value('@LastModifiedUserID', 'int') AS LastModifiedUserID
						,GetDate()
						,XMLInput.Item.value('@IsAdd', 'bit') AS IsAdd
						,XMLInput.Item.value('@IsSubstitute', 'bit') AS IsSubstitute
						,XMLInput.Item.value('@IsExclude', 'bit') AS IsExclude
						,XMLInput.Item.value('@IsAboveTheLine', 'bit') AS IsAboveTheLine
					FROM @XMLTSheet.nodes('//TSheet/TSheetTradeProposalCollection/TSheetTradeProposal') AS XMLInput(Item)
					WHERE isnull(XMLInput.Item.value('@EventID', 'INT'), 0) <> 0
						AND isnull(XMLInput.Item.value('@EventAccountID', 'INT'), 0) <> 0

					INSERT INTO [TBL_TR_TSheetLot] (
						[LotID]
						,[Industry]
						,[CostBasis]
						,[PortfolioCode]
						,[UnitCost]
						,[AquisitionDate]
						,[SharePrice]
						,[Marketvalue]
						,[Quantity]
						,[UnrealizedGainLossDollars]
						,[UnrealizedGainLossPercentage]
						,[SecurityTypeCode]
						,[SecuritySymbol]
						,[EventID]
						,[EventAccountID]
						,[TSheetTradeForReview]
						,[LastModifiedUserID]
						,[LastModifiedDate]
						)
					SELECT XMLInput.Item.value('@LotID', 'INT') AS LotID
						,XMLInput.Item.value('@Industry', 'varchar(50)') AS Industry
						,XMLInput.Item.value('@CostBasis', 'money') AS CostBasis
						,XMLInput.Item.value('@PortfolioCode', 'varchar(50)') AS PortfolioCode
						,XMLInput.Item.value('@UnitCost', 'money') AS UnitCost
						,XMLInput.Item.value('@AquisitionDate', 'datetime') AS AquisitionDate
						,XMLInput.Item.value('@SharePrice', 'money') AS SharePrice
						,XMLInput.Item.value('@Marketvalue', 'money') AS Marketvalue
						,XMLInput.Item.value('@Quantity', 'float') AS Quantity
						,XMLInput.Item.value('@UnrealizedGainLossDollars', 'money') AS UnrealizedGainLossDollars
						,XMLInput.Item.value('@UnrealizedGainLossPercentage', 'float') AS UnrealizedGainLossPercentage
						,XMLInput.Item.value('@SecurityTypeCode', 'varchar(50)') AS SecurityTypeCode
						,XMLInput.Item.value('@SecuritySymbol', 'varchar(50)') AS SecuritySymbol
						,XMLInput.Item.value('@EventID', 'int') AS EventID
						,XMLInput.Item.value('@EventAccountID', 'bigint') AS EventAccountID
						,1
						,XMLInput.Item.value('@LastModifiedUserID', 'int') AS LastModifiedUserID
						,GetDate()
					FROM @XMLTSheet.nodes('//TSheet/TSheetLotsCollection/TSheetLots') AS XMLInput(Item)
					WHERE isnull(XMLInput.Item.value('@EventID', 'INT'), 0) <> 0
						AND isnull(XMLInput.Item.value('@EventAccountID', 'INT'), 0) <> 0

					INSERT INTO [TBL_TR_InvestmentCommentHistorySnapshot] (
						[EventID]
						,[EventAccountID]
						,[EventStatusID]
						,[InvestmentCommentId]
						,[CustomerAccountNumber]
						,[InvestmentComments]
						,[CreatedUserID]
						,[ModifiedUserID]
						,[CreatedDate]
						,[ModifiedDate]
						)
					SELECT XMLInput.Item.value('@EventID', 'int') AS EventID
						,XMLInput.Item.value('@EventAccountID', 'int') AS EventAccountID
						,XMLInput.Item.value('@EventStatusID', 'int') AS EventStatusID
						,XMLInput.Item.value('@InvestmentCommentId', 'int') AS InvestmentCommentId
						,XMLInput.Item.value('@CustomerAccountNumber', 'varchar(14)') AS CustomerAccountNumber
						,XMLInput.Item.value('@InvestmentComments', 'varchar(500)') AS InvestmentComments
						,XMLInput.Item.value('@CreatedUserID', 'int') AS CreatedUserID
						,XMLInput.Item.value('@ModifiedUserID', 'int') AS ModifiedUserID
						,XMLInput.Item.value('@CreatedDate', 'datetime') AS CreatedDate
						,GETDATE()
					FROM @XMLTSheetInvestmentCommentHistoryCollection.nodes('//InvestmentCommentHistoryCollection/InvestmentCommentHistory') AS XMLInput(Item)
					WHERE isnull(XMLInput.Item.value('@EventID', 'int'), 0) <> 0
						AND isnull(XMLInput.Item.value('@EventAccountID', 'int'), 0) <> 0

					INSERT INTO [TBL_TR_AuthorizedSignerSnapshot] (
						[EventID]
						,[EventAccountID]
						,[EventStatusID]
						,[EmployeeID]
						,[CustomerAccountNumber]
						,[AuthorizationType]
						,[UserName]
						)
					SELECT XMLInput.Item.value('@EventID', 'INT') AS EventID
						,XMLInput.Item.value('@EventAccountID', 'INT') AS EventAccountID
						,XMLInput.Item.value('@EventStatusID', 'INT') AS EventStatusID
						,XMLInput.Item.value('@EmployeeID', 'INT') AS EmployeeID
						,XMLInput.Item.value('@CustomerAccountNumber', 'varchar(14)') AS CustomerAccountNumber
						,XMLInput.Item.value('@AuthorizationType', 'varchar(250)') AS AuthorizationType
						,XMLInput.Item.value('@UserName', 'varchar(250)') AS UserName
					FROM @XMLTSheetAuthorizedSignerCollection.nodes('//AuthorizedSignerCollection/AuthorizedSigner') AS XMLInput(Item)
					WHERE isnull(XMLInput.Item.value('@EventID', 'INT'), 0) <> 0
						AND isnull(XMLInput.Item.value('@EventAccountID', 'INT'), 0) <> 0

					INSERT INTO [TBL_TR_TradeRestrictionSnapshot] (
						[EventID]
						,[EventAccountID]
						,[EventStatusID]
						,[TradeRestrictionID]
						,[CustomerAccountNumber]
						,[TradeRestrictionType]
						,[SecuritySymbol]
						,[Comments]
						,[CreatedBy]
						,[StartDate]
						,[EndDate]
						)
					SELECT XMLInput.Item.value('@EventID', 'INT') AS EventID
						,XMLInput.Item.value('@EventAccountID', 'INT') AS EventAccountID
						,XMLInput.Item.value('@EventStatusID', 'INT') AS EventStatusID
						,XMLInput.Item.value('@TradeRestrictionID', 'INT') AS TradeRestrictionID
						,XMLInput.Item.value('@CustomerAccountNumber', 'varchar(14)') AS CustomerAccountNumber
						,XMLInput.Item.value('@TradeRestrictionType', 'varchar(250)') AS TradeRestrictionType
						,XMLInput.Item.value('@SecuritySymbol', 'varchar(250)') AS SecuritySymbol
						,XMLInput.Item.value('@Comments', 'varchar(250)') AS Comments
						,XMLInput.Item.value('@CreatedBy', 'varchar(250)') AS CreatedBy
						,XMLInput.Item.value('@StartDate', 'datetime') AS StartDate
						,XMLInput.Item.value('@EndDate', 'datetime') AS EndDate
					FROM @XMLTSheetTradeRestrictionCollection.nodes('//TradeRestrictionCollection/TradeRestriction') AS XMLInput(Item)
					WHERE isnull(XMLInput.Item.value('@EventID', 'INT'), 0) <> 0
						AND isnull(XMLInput.Item.value('@EventAccountID', 'INT'), 0) <> 0
				END

				IF (@@ERROR > 0)
				BEGIN
					ROLLBACK TRANSACTION @procname
				END
			END

			SET @ReturnStatus = 0;

			COMMIT TRANSACTION @procname

			EXEC USP_TR_GetEventByID @XMLTSheet
		END
		ELSE
		BEGIN
			SET @ReturnStatus = - 2;
			SET @ErrorDesc = 'Dirty Write';

			ROLLBACK TRANSACTION @procname;
		END
	END TRY

	BEGIN CATCH
		SET @ReturnStatus = - 1;
		SET @ErrorDesc = error_message();

		ROLLBACK TRANSACTION @procname
	END CATCH

	SET NOCOUNT OFF;
END
