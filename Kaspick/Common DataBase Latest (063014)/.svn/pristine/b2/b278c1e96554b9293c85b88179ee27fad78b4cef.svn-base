/****** Object:  StoredProcedure [dbo].[USP_OP_UpdApproveOrRejectMatchedTransactions]    Script Date: 05/20/2014 18:56:08 ******/
IF EXISTS (
		SELECT *
		FROM sys.objects
		WHERE object_id = OBJECT_ID(N'[dbo].[USP_OP_UpdApproveOrRejectMatchedTransactions]')
			AND type IN (
				N'P'
				,N'PC'
				)
		)
	DROP PROCEDURE [dbo].[USP_OP_UpdApproveOrRejectMatchedTransactions]
GO

/****** Object:  StoredProcedure [dbo].[USP_OP_UpdApproveOrRejectMatchedTransactions]    Script Date: 05/20/2014 18:56:08 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

/******************************************************************************      
** Name   :   USP_OP_UpdApproveOrRejectMatchedTransactions      
** Short Desc : Put in Short Description      
**      
** Full Description      
**              
**      
** Sample Call 
EXEC USP_OP_UpdApproveOrRejectMatchedTransactions 1242, 0, 'Test by Tanuj',0,''  
**      
** Return values: NONE      
**      
**      
** Standard declarations      
**       SET LOCK_TIMEOUT         30000   -- 30 seconds      
**       
** Created By :		
** Company  :		Kaspick & Company      
** Project  :		Operations     
** Created DT :		05/28/2014    
**                  
*******************************************************************************      
**       Change History      
*******************************************************************************      
** Date:            Author:  Bug #     Description:                           Rvwd      
** --------         -------- ------    -------------------------------------- --------      
** 05/28/2014		Tanuj                Created    
******************************************************************************      
** Copyright (C) 2007 Kaspick & Company, All Rights Reserved      
** COMPANY CONFIDENTIAL -- NOT FOR DISTRIBUTION      
*******************************************************************************/
CREATE PROCEDURE [dbo].[USP_OP_UpdApproveOrRejectMatchedTransactions] (
	@GROUPID INT
	,@ISAPPROVED BIT
	,@GroupComment VARCHAR(200)
	,
	--@RunUser INT,
	@ReturnStatus INT = - 1 OUTPUT
	,-- assume SP fails and 
	@ErrorDesc VARCHAR(8000) OUTPUT
	)
AS
BEGIN
	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 30000;-- 30 seconds      
	--SET TRANSACTION ISOLATION LEVEL SNAPSHOT;

	DECLARE @TRANSTATUSID AS CHAR(10)
	DECLARE @UserRole TABLE (
		ManagerCode VARCHAR(10)
		,contactID INT
		,ContactName VARCHAR(100)
		,contactrolecode INT
		,ContactRoleCodeDesc VARCHAR(100)
		,userid INT
		,firstname VARCHAR(50)
		,lastname VARCHAR(50)
		)

	INSERT INTO @UserRole
	EXEC USP_KS_GetUserRole

	BEGIN TRY
		BEGIN TRANSACTION

		IF @ISAPPROVED = 1
		BEGIN
			SELECT @TRANSTATUSID = STATUSID
			FROM TBL_OP_TRANSACTIONSTATUS
			WHERE STATUSDESCRIPTION = 'Resolved'

			UPDATE TBL_OP_TRANSACTION
			SET CURRENTRECONSTATUS = @TRANSTATUSID
			WHERE TRANSACTIONID IN (
					SELECT TRANSACTIONID
					FROM TBL_OP_TRANSACTIONRECONCILIATION
					WHERE RECONCILIATIONGROUPID = @GROUPID
					)

			UPDATE TRADEIMPORT
			SET TradeStatus = 'reconciled'
				,ReconcileDate = GETDATE()
			WHERE TRADEID IN (
					SELECT TRADEID
					FROM TBL_OP_TRANSACTIONRECONCILIATION
					WHERE RECONCILIATIONGROUPID = @GROUPID
					)

			DECLARE @RunUser INT

			SET @RunUser = 1

			EXEC USP_OP_UpdMarkEventsReconciled @RunUser
		END

		IF @ISAPPROVED = 0
		BEGIN
			SELECT @TRANSTATUSID = STATUSID
			FROM TBL_OP_TRANSACTIONSTATUS
			WHERE STATUSDESCRIPTION = 'Open'

			UPDATE TBL_OP_TRANSACTION
			SET CURRENTRECONSTATUS = @TRANSTATUSID
			WHERE TRANSACTIONID IN (
					SELECT TRANSACTIONID
					FROM TBL_OP_TRANSACTIONRECONCILIATION
					WHERE RECONCILIATIONGROUPID = @GROUPID
					)

			DELETE
			FROM TBL_OP_TRANSACTIONRECONCILIATION
			WHERE RECONCILIATIONGROUPID = @GROUPID
		END

		SELECT TR.TRANSACTIONID
			,TR.CustomerAccountNumber
			,AM.ManagerCode AS ManagerCode
			,(ISNULL(ClntMngr.FirstName, '') + ' ' + ISNULL(ClntMngr.LastName, '')) AS CLIENTMANAGER
			,(ISNULL(TrstAdmin.FirstName, '') + ' ' + ISNULL(TrstAdmin.LastName, '')) AS TRUSTADMINISTRATOR
			,(ISNULL(trdr.FirstName, '') + ' ' + ISNULL(trdr.LastName, '')) AS TRADER
			,(ISNULL(OpsAdmin.FirstName, '') + ' ' + ISNULL(OpsAdmin.LastName, '')) AS PORTFOLIOADMINISTRATOR
			,TR.TRANSACTIONDESCRIPTION
			,TR.TRANSACTIONCODE
			,TR.SECURITYSYMBOL
			,TR.TRADEDATE
			,TR.TRADEQUANTITY
			,TR.TRADEAMOUNT
			,(
				CASE 
					WHEN isnull(TR.AccountFMV, 0) <> 0
						THEN ISNULL(((TR.TRADEAMOUNT) / (TR.AccountFMV)), 0)
					ELSE 0
					END
				) AS NEWDOLLARSAMOUNT
			,ISNULL(TR.ACCOUNTFMV, 0) AS ACCOUNTFMV
			,TR.TRANSACTIONCOMMENT
			,RR.ResponseDescription
			,TR.SourceType
			,TR.SecurityType AS SECURITYTYPE
			--,D.AccountID AS ACCOUNTNUMBER
			,TR.CURRENTERRORSTATUS
			,TR.CURRENTRECONSTATUS
			,TRDTIMP.RunStartDateTime AS IMPORTDATE
			,TR.RunID
			,TR.OrigninalCostDate
			,TR.SourceSymbol
			,TR.LotLocation
			,TR.Broker
			,TR.Commission
			,TR.LotID
			,TR.AXYSComment
			,TR.AXYSPostDate
			,TR.AXYSTransactionID
			,TR.UserDefinedCode
			,TR.IsError
			,TR.IsRecon
			,TR.IsSigCash
			,TRR.ReconciliationGroupID AS GroupID
			,TR.RecordVersion
			,TR.LastModifiedUserID
			,TR.LastModifiedDate
			,TR.IsManagedAccount
		FROM TBL_OP_Transaction TR
		INNER JOIN TBL_OP_TransactionStatus TS ON TS.StatusID = TR.CURRENTRECONSTATUS
		INNER JOIN SYN_IT_AccountMaster AM ON TR.CustomerAccountNumber = AM.CustomerAccountNumber
		INNER JOIN TBL_OP_ResolutionResponse RR ON TR.CurrentReconResponse = RR.ResponseID
		INNER JOIN TBL_OP_TransactionDataImport TRDTIMP ON TR.RunID = TRDTIMP.RunID
		LEFT OUTER JOIN TBL_OP_TransactionReconciliation TRR ON TRR.TransactionID = TR.TransactionID
		LEFT OUTER JOIN @UserRole ClntMngr ON ClntMngr.ManagerCode = am.ManagerCode
			AND ClntMngr.ContactRoleCode IN (2)
		LEFT OUTER JOIN @UserRole TrstAdmin ON TrstAdmin.ManagerCode = am.ManagerCode
			AND TrstAdmin.ContactRoleCode IN (510)
		LEFT OUTER JOIN @UserRole trdr ON trdr.ManagerCode = am.ManagerCode
			AND trdr.ContactRoleCode IN (515)
		LEFT OUTER JOIN @UserRole OpsAdmin ON OpsAdmin.ManagerCode = am.ManagerCode
			AND OpsAdmin.ContactRoleCode IN (517)
		WHERE TRR.ReconciliationGroupID = @GROUPID

		IF (@@ERROR > 0)
		BEGIN
			ROLLBACK TRANSACTION
		END

		COMMIT TRANSACTION
	END TRY

	BEGIN CATCH
		SET @ErrorDesc = ERROR_MESSAGE();
		SET @ReturnStatus = - 1;

		ROLLBACK TRANSACTION
	END CATCH
END
GO


